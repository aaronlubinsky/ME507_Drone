
ME507_Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007048  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080071e8  080071e8  000081e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007428  08007428  00009070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007428  08007428  00008428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007430  08007430  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007430  08007430  00008430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007434  08007434  00008434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007438  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000070  080074a8  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  080074a8  0000946c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001157b  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e2  00000000  00000000  0001a61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0001cd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd8  00000000  00000000  0001dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001889e  00000000  00000000  0001ea28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ecb  00000000  00000000  000372c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093d05  00000000  00000000  0004b191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dee96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f50  00000000  00000000  000deedc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e3e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080071d0 	.word	0x080071d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080071d0 	.word	0x080071d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <BNO_Init>:

extern I2C_HandleTypeDef hi2c1;
static uint8_t calibData;


void BNO_Init(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af04      	add	r7, sp, #16
	uint8_t ndof_mode = 0x0C;
 80005b2:	230c      	movs	r3, #12
 80005b4:	71fb      	strb	r3, [r7, #7]
	uint8_t config_mode = 0x00;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71bb      	strb	r3, [r7, #6]
	uint8_t successfulRead = false;
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]
	uint8_t sampleData = 0x00;
 80005be:	2300      	movs	r3, #0
 80005c0:	717b      	strb	r3, [r7, #5]
	int calibrated = false;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]


	while(successfulRead == false){ //WAIT to verify IMU connection
 80005c6:	e025      	b.n	8000614 <BNO_Init+0x68>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80005c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005cc:	4836      	ldr	r0, [pc, #216]	@ (80006a8 <BNO_Init+0xfc>)
 80005ce:	f002 fa50 	bl	8002a72 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80005d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005d6:	f001 fa93 	bl	8001b00 <HAL_Delay>
	HAL_I2C_DeInit(&hi2c1);
 80005da:	4834      	ldr	r0, [pc, #208]	@ (80006ac <BNO_Init+0x100>)
 80005dc:	f002 fba8 	bl	8002d30 <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c1);
 80005e0:	4832      	ldr	r0, [pc, #200]	@ (80006ac <BNO_Init+0x100>)
 80005e2:	f002 fa61 	bl	8002aa8 <HAL_I2C_Init>
	if (hi2c1.State == HAL_I2C_STATE_READY) {
 80005e6:	4b31      	ldr	r3, [pc, #196]	@ (80006ac <BNO_Init+0x100>)
 80005e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b20      	cmp	r3, #32
 80005f0:	d10b      	bne.n	800060a <BNO_Init+0x5e>
		HAL_I2C_Mem_Read(&hi2c1, BNO055_I2C_ADDR, 0x00, 1, &sampleData, 1, 100); // 0xaA0 should be returned if receiving from IMU
 80005f2:	2364      	movs	r3, #100	@ 0x64
 80005f4:	9302      	str	r3, [sp, #8]
 80005f6:	2301      	movs	r3, #1
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	1d7b      	adds	r3, r7, #5
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2301      	movs	r3, #1
 8000600:	2200      	movs	r2, #0
 8000602:	2150      	movs	r1, #80	@ 0x50
 8000604:	4829      	ldr	r0, [pc, #164]	@ (80006ac <BNO_Init+0x100>)
 8000606:	f002 fcbd 	bl	8002f84 <HAL_I2C_Mem_Read>
	}
	if (sampleData == 0xa0){
 800060a:	797b      	ldrb	r3, [r7, #5]
 800060c:	2ba0      	cmp	r3, #160	@ 0xa0
 800060e:	d101      	bne.n	8000614 <BNO_Init+0x68>
		successfulRead = true;
 8000610:	2301      	movs	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
	while(successfulRead == false){ //WAIT to verify IMU connection
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d0d6      	beq.n	80005c8 <BNO_Init+0x1c>
	}


	}
	// Set to CONFIG mode
    HAL_I2C_Mem_Write(&hi2c1, BNO055_I2C_ADDR, BNO055_OPR_MODE_ADDR,
 800061a:	2364      	movs	r3, #100	@ 0x64
 800061c:	9302      	str	r3, [sp, #8]
 800061e:	2301      	movs	r3, #1
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	1dbb      	adds	r3, r7, #6
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2301      	movs	r3, #1
 8000628:	223d      	movs	r2, #61	@ 0x3d
 800062a:	2150      	movs	r1, #80	@ 0x50
 800062c:	481f      	ldr	r0, [pc, #124]	@ (80006ac <BNO_Init+0x100>)
 800062e:	f002 fbaf 	bl	8002d90 <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, &config_mode, 1, 100);
    HAL_Delay(25);
 8000632:	2019      	movs	r0, #25
 8000634:	f001 fa64 	bl	8001b00 <HAL_Delay>

    //Set to NDOF mode
    HAL_I2C_Mem_Write(&hi2c1, BNO055_I2C_ADDR, BNO055_OPR_MODE_ADDR,
 8000638:	2364      	movs	r3, #100	@ 0x64
 800063a:	9302      	str	r3, [sp, #8]
 800063c:	2301      	movs	r3, #1
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2301      	movs	r3, #1
 8000646:	223d      	movs	r2, #61	@ 0x3d
 8000648:	2150      	movs	r1, #80	@ 0x50
 800064a:	4818      	ldr	r0, [pc, #96]	@ (80006ac <BNO_Init+0x100>)
 800064c:	f002 fba0 	bl	8002d90 <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, &ndof_mode, 1, 100);
    HAL_Delay(25);
 8000650:	2019      	movs	r0, #25
 8000652:	f001 fa55 	bl	8001b00 <HAL_Delay>


	//WAIT until IMU is callibrated

	while(calibrated == false){ //wait for imu to calibrate
 8000656:	e01f      	b.n	8000698 <BNO_Init+0xec>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   // Set PA0 High
 8000658:	2201      	movs	r2, #1
 800065a:	2101      	movs	r1, #1
 800065c:	4814      	ldr	r0, [pc, #80]	@ (80006b0 <BNO_Init+0x104>)
 800065e:	f002 f9ef 	bl	8002a40 <HAL_GPIO_WritePin>
		HAL_I2C_Mem_Read(&hi2c1, BNO055_I2C_ADDR, BNO055_CALIB_STAT, 1, &calibData, 1, 100);
 8000662:	2364      	movs	r3, #100	@ 0x64
 8000664:	9302      	str	r3, [sp, #8]
 8000666:	2301      	movs	r3, #1
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <BNO_Init+0x108>)
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2301      	movs	r3, #1
 8000670:	2235      	movs	r2, #53	@ 0x35
 8000672:	2150      	movs	r1, #80	@ 0x50
 8000674:	480d      	ldr	r0, [pc, #52]	@ (80006ac <BNO_Init+0x100>)
 8000676:	f002 fc85 	bl	8002f84 <HAL_I2C_Mem_Read>
		if (((calibData >> 6) & 0x03) == 0x03){
 800067a:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <BNO_Init+0x108>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	099b      	lsrs	r3, r3, #6
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 0303 	and.w	r3, r3, #3
 8000686:	2b03      	cmp	r3, #3
 8000688:	d101      	bne.n	800068e <BNO_Init+0xe2>
			calibrated = true;
 800068a:	2301      	movs	r3, #1
 800068c:	60bb      	str	r3, [r7, #8]

	}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);   // Set PA0 High
 800068e:	2200      	movs	r2, #0
 8000690:	2101      	movs	r1, #1
 8000692:	4807      	ldr	r0, [pc, #28]	@ (80006b0 <BNO_Init+0x104>)
 8000694:	f002 f9d4 	bl	8002a40 <HAL_GPIO_WritePin>
	while(calibrated == false){ //wait for imu to calibrate
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d0dc      	beq.n	8000658 <BNO_Init+0xac>
}
}
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40020400 	.word	0x40020400
 80006ac:	200000a4 	.word	0x200000a4
 80006b0:	40020000 	.word	0x40020000
 80006b4:	2000008c 	.word	0x2000008c

080006b8 <BNO_Read>:


void BNO_Read(int32_t *roll, int32_t *pitch, int32_t *yaw){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08e      	sub	sp, #56	@ 0x38
 80006bc:	af04      	add	r7, sp, #16
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
	uint8_t eulerData[6];
	int32_t rawYaw16;
	int32_t rawPitch16;
	int32_t rawRoll16;
	HAL_I2C_Mem_Read(&hi2c1, BNO055_I2C_ADDR, BNO055_EULER_LSB, I2C_MEMADD_SIZE_8BIT, eulerData, 6, 100);
 80006c4:	2364      	movs	r3, #100	@ 0x64
 80006c6:	9302      	str	r3, [sp, #8]
 80006c8:	2306      	movs	r3, #6
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2301      	movs	r3, #1
 80006d4:	221a      	movs	r2, #26
 80006d6:	2150      	movs	r1, #80	@ 0x50
 80006d8:	4822      	ldr	r0, [pc, #136]	@ (8000764 <BNO_Read+0xac>)
 80006da:	f002 fc53 	bl	8002f84 <HAL_I2C_Mem_Read>

    rawYaw16   = (int16_t)((eulerData[1] << 8) | eulerData[0]);
 80006de:	7d7b      	ldrb	r3, [r7, #21]
 80006e0:	b21b      	sxth	r3, r3
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	7d3b      	ldrb	r3, [r7, #20]
 80006e8:	b21b      	sxth	r3, r3
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b21b      	sxth	r3, r3
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
    rawRoll16  = (int16_t)((eulerData[3] << 8) | eulerData[2]);
 80006f0:	7dfb      	ldrb	r3, [r7, #23]
 80006f2:	b21b      	sxth	r3, r3
 80006f4:	021b      	lsls	r3, r3, #8
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	7dbb      	ldrb	r3, [r7, #22]
 80006fa:	b21b      	sxth	r3, r3
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b21b      	sxth	r3, r3
 8000700:	623b      	str	r3, [r7, #32]
    rawPitch16 = (int16_t)((eulerData[5] << 8) | eulerData[4]);
 8000702:	7e7b      	ldrb	r3, [r7, #25]
 8000704:	b21b      	sxth	r3, r3
 8000706:	021b      	lsls	r3, r3, #8
 8000708:	b21a      	sxth	r2, r3
 800070a:	7e3b      	ldrb	r3, [r7, #24]
 800070c:	b21b      	sxth	r3, r3
 800070e:	4313      	orrs	r3, r2
 8000710:	b21b      	sxth	r3, r3
 8000712:	61fb      	str	r3, [r7, #28]


    *yaw   = ((int32_t)rawYaw16 * 1000) / 16;
 8000714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000716:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800071a:	fb02 f303 	mul.w	r3, r2, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	da00      	bge.n	8000724 <BNO_Read+0x6c>
 8000722:	330f      	adds	r3, #15
 8000724:	111b      	asrs	r3, r3, #4
 8000726:	461a      	mov	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	601a      	str	r2, [r3, #0]
    *roll  = ((int32_t)rawRoll16 * 1000) / 16;
 800072c:	6a3b      	ldr	r3, [r7, #32]
 800072e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000732:	fb02 f303 	mul.w	r3, r2, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	da00      	bge.n	800073c <BNO_Read+0x84>
 800073a:	330f      	adds	r3, #15
 800073c:	111b      	asrs	r3, r3, #4
 800073e:	461a      	mov	r2, r3
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	601a      	str	r2, [r3, #0]
    *pitch = ((int32_t)rawPitch16 * 1000) / 16;
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800074a:	fb02 f303 	mul.w	r3, r2, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	da00      	bge.n	8000754 <BNO_Read+0x9c>
 8000752:	330f      	adds	r3, #15
 8000754:	111b      	asrs	r3, r3, #4
 8000756:	461a      	mov	r2, r3
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	601a      	str	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	@ 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200000a4 	.word	0x200000a4

08000768 <armESC>:

int A, B, C, D = 0;
int armCompare;

void armESC()
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800076e:	2100      	movs	r1, #0
 8000770:	482f      	ldr	r0, [pc, #188]	@ (8000830 <armESC+0xc8>)
 8000772:	f003 fe95 	bl	80044a0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000776:	2104      	movs	r1, #4
 8000778:	482d      	ldr	r0, [pc, #180]	@ (8000830 <armESC+0xc8>)
 800077a:	f003 fe91 	bl	80044a0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800077e:	2108      	movs	r1, #8
 8000780:	482b      	ldr	r0, [pc, #172]	@ (8000830 <armESC+0xc8>)
 8000782:	f003 fe8d 	bl	80044a0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000786:	210c      	movs	r1, #12
 8000788:	4829      	ldr	r0, [pc, #164]	@ (8000830 <armESC+0xc8>)
 800078a:	f003 fe89 	bl	80044a0 <HAL_TIM_PWM_Start>

    // Step 1: Send 960 (approx. 1000us) to arm
    uint16_t armCompare = 960;
 800078e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000792:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, armCompare);
 8000794:	4b26      	ldr	r3, [pc, #152]	@ (8000830 <armESC+0xc8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	88fa      	ldrh	r2, [r7, #6]
 800079a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, armCompare);
 800079c:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <armESC+0xc8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	88fa      	ldrh	r2, [r7, #6]
 80007a2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, armCompare);
 80007a4:	4b22      	ldr	r3, [pc, #136]	@ (8000830 <armESC+0xc8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	88fa      	ldrh	r2, [r7, #6]
 80007aa:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, armCompare);
 80007ac:	4b20      	ldr	r3, [pc, #128]	@ (8000830 <armESC+0xc8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	641a      	str	r2, [r3, #64]	@ 0x40

    for (int i = 0; i < 12; i++) {// Wait 3 seconds for ESCs to arm while blinking LED
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	e009      	b.n	80007ce <armESC+0x66>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);  // Change GPIOA and PIN as needed
 80007ba:	2101      	movs	r1, #1
 80007bc:	481d      	ldr	r0, [pc, #116]	@ (8000834 <armESC+0xcc>)
 80007be:	f002 f958 	bl	8002a72 <HAL_GPIO_TogglePin>
        HAL_Delay(125);
 80007c2:	207d      	movs	r0, #125	@ 0x7d
 80007c4:	f001 f99c 	bl	8001b00 <HAL_Delay>
    for (int i = 0; i < 12; i++) {// Wait 3 seconds for ESCs to arm while blinking LED
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	3301      	adds	r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	2b0b      	cmp	r3, #11
 80007d2:	ddf2      	ble.n	80007ba <armESC+0x52>
    }


    // Step 2: Now ready for throttle control
    while(roll_set < 150000){
 80007d4:	e022      	b.n	800081c <armESC+0xb4>
     armCompare = 2000;
 80007d6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007da:	80fb      	strh	r3, [r7, #6]
     __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, armCompare);
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <armESC+0xc8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	88fa      	ldrh	r2, [r7, #6]
 80007e2:	635a      	str	r2, [r3, #52]	@ 0x34
     __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, armCompare);
 80007e4:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <armESC+0xc8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	88fa      	ldrh	r2, [r7, #6]
 80007ea:	639a      	str	r2, [r3, #56]	@ 0x38
     __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, armCompare);
 80007ec:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <armESC+0xc8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	88fa      	ldrh	r2, [r7, #6]
 80007f2:	63da      	str	r2, [r3, #60]	@ 0x3c
     __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, armCompare);
 80007f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <armESC+0xc8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	88fa      	ldrh	r2, [r7, #6]
 80007fa:	641a      	str	r2, [r3, #64]	@ 0x40

     for (int i = 0; i < 12; i++) {// Wait 3 seconds for ESCs to arm while blinking LED
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	e009      	b.n	8000816 <armESC+0xae>
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);  // Change GPIOA and PIN as needed
 8000802:	2101      	movs	r1, #1
 8000804:	480b      	ldr	r0, [pc, #44]	@ (8000834 <armESC+0xcc>)
 8000806:	f002 f934 	bl	8002a72 <HAL_GPIO_TogglePin>
            HAL_Delay(125);
 800080a:	207d      	movs	r0, #125	@ 0x7d
 800080c:	f001 f978 	bl	8001b00 <HAL_Delay>
     for (int i = 0; i < 12; i++) {// Wait 3 seconds for ESCs to arm while blinking LED
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	3301      	adds	r3, #1
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	2b0b      	cmp	r3, #11
 800081a:	ddf2      	ble.n	8000802 <armESC+0x9a>
    while(roll_set < 150000){
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <armESC+0xd0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a06      	ldr	r2, [pc, #24]	@ (800083c <armESC+0xd4>)
 8000822:	4293      	cmp	r3, r2
 8000824:	ddd7      	ble.n	80007d6 <armESC+0x6e>
        }
    }
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000014c 	.word	0x2000014c
 8000834:	40020000 	.word	0x40020000
 8000838:	2000028c 	.word	0x2000028c
 800083c:	000249ef 	.word	0x000249ef

08000840 <update_Motors>:



void update_Motors(){ //Compare 960 = 1ms (0%)    Compare 2000 = 2ms (100%)
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af02      	add	r7, sp, #8
	//  Roll
	int roll_error = -roll_set + roll_true;
 8000846:	4b81      	ldr	r3, [pc, #516]	@ (8000a4c <update_Motors+0x20c>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	4b81      	ldr	r3, [pc, #516]	@ (8000a50 <update_Motors+0x210>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	60fb      	str	r3, [r7, #12]
	roll_integral += roll_error;
 8000852:	4b80      	ldr	r3, [pc, #512]	@ (8000a54 <update_Motors+0x214>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	4413      	add	r3, r2
 800085a:	4a7e      	ldr	r2, [pc, #504]	@ (8000a54 <update_Motors+0x214>)
 800085c:	6013      	str	r3, [r2, #0]
	roll_derivative = roll_error - last_roll_error;
 800085e:	4b7e      	ldr	r3, [pc, #504]	@ (8000a58 <update_Motors+0x218>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	4a7d      	ldr	r2, [pc, #500]	@ (8000a5c <update_Motors+0x21c>)
 8000868:	6013      	str	r3, [r2, #0]
	roll_effort = -(Kp_roll * roll_error + Ki_roll * roll_integral + Kd_roll * roll_derivative) / PID_SCALE;
 800086a:	4b7d      	ldr	r3, [pc, #500]	@ (8000a60 <update_Motors+0x220>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	fb03 f202 	mul.w	r2, r3, r2
 8000874:	4b7b      	ldr	r3, [pc, #492]	@ (8000a64 <update_Motors+0x224>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4976      	ldr	r1, [pc, #472]	@ (8000a54 <update_Motors+0x214>)
 800087a:	6809      	ldr	r1, [r1, #0]
 800087c:	fb01 f303 	mul.w	r3, r1, r3
 8000880:	441a      	add	r2, r3
 8000882:	4b79      	ldr	r3, [pc, #484]	@ (8000a68 <update_Motors+0x228>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4975      	ldr	r1, [pc, #468]	@ (8000a5c <update_Motors+0x21c>)
 8000888:	6809      	ldr	r1, [r1, #0]
 800088a:	fb01 f303 	mul.w	r3, r1, r3
 800088e:	4413      	add	r3, r2
 8000890:	4a76      	ldr	r2, [pc, #472]	@ (8000a6c <update_Motors+0x22c>)
 8000892:	fb82 1203 	smull	r1, r2, r2, r3
 8000896:	1192      	asrs	r2, r2, #6
 8000898:	17db      	asrs	r3, r3, #31
 800089a:	1a9b      	subs	r3, r3, r2
 800089c:	4a74      	ldr	r2, [pc, #464]	@ (8000a70 <update_Motors+0x230>)
 800089e:	6013      	str	r3, [r2, #0]
	last_roll_error = roll_error;
 80008a0:	4a6d      	ldr	r2, [pc, #436]	@ (8000a58 <update_Motors+0x218>)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	6013      	str	r3, [r2, #0]

	// Pitch
	int pitch_error = -pitch_set + pitch_true;
 80008a6:	4b73      	ldr	r3, [pc, #460]	@ (8000a74 <update_Motors+0x234>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4b73      	ldr	r3, [pc, #460]	@ (8000a78 <update_Motors+0x238>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	60bb      	str	r3, [r7, #8]
	pitch_integral += pitch_error;
 80008b2:	4b72      	ldr	r3, [pc, #456]	@ (8000a7c <update_Motors+0x23c>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	4413      	add	r3, r2
 80008ba:	4a70      	ldr	r2, [pc, #448]	@ (8000a7c <update_Motors+0x23c>)
 80008bc:	6013      	str	r3, [r2, #0]
	pitch_derivative = pitch_error - last_pitch_error;
 80008be:	4b70      	ldr	r3, [pc, #448]	@ (8000a80 <update_Motors+0x240>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	4a6f      	ldr	r2, [pc, #444]	@ (8000a84 <update_Motors+0x244>)
 80008c8:	6013      	str	r3, [r2, #0]
	pitch_effort = -(Kp_pitch * pitch_error + Ki_pitch * pitch_integral + Kd_pitch * pitch_derivative) / PID_SCALE;
 80008ca:	4b6f      	ldr	r3, [pc, #444]	@ (8000a88 <update_Motors+0x248>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	fb03 f202 	mul.w	r2, r3, r2
 80008d4:	4b6d      	ldr	r3, [pc, #436]	@ (8000a8c <update_Motors+0x24c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4968      	ldr	r1, [pc, #416]	@ (8000a7c <update_Motors+0x23c>)
 80008da:	6809      	ldr	r1, [r1, #0]
 80008dc:	fb01 f303 	mul.w	r3, r1, r3
 80008e0:	441a      	add	r2, r3
 80008e2:	4b6b      	ldr	r3, [pc, #428]	@ (8000a90 <update_Motors+0x250>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4967      	ldr	r1, [pc, #412]	@ (8000a84 <update_Motors+0x244>)
 80008e8:	6809      	ldr	r1, [r1, #0]
 80008ea:	fb01 f303 	mul.w	r3, r1, r3
 80008ee:	4413      	add	r3, r2
 80008f0:	4a5e      	ldr	r2, [pc, #376]	@ (8000a6c <update_Motors+0x22c>)
 80008f2:	fb82 1203 	smull	r1, r2, r2, r3
 80008f6:	1192      	asrs	r2, r2, #6
 80008f8:	17db      	asrs	r3, r3, #31
 80008fa:	1a9b      	subs	r3, r3, r2
 80008fc:	4a65      	ldr	r2, [pc, #404]	@ (8000a94 <update_Motors+0x254>)
 80008fe:	6013      	str	r3, [r2, #0]
	last_pitch_error = pitch_error;
 8000900:	4a5f      	ldr	r2, [pc, #380]	@ (8000a80 <update_Motors+0x240>)
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	6013      	str	r3, [r2, #0]

	//  Yaw
	int yaw_error = -yaw_set + yaw_true;
 8000906:	4b64      	ldr	r3, [pc, #400]	@ (8000a98 <update_Motors+0x258>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	4b64      	ldr	r3, [pc, #400]	@ (8000a9c <update_Motors+0x25c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	607b      	str	r3, [r7, #4]
	yaw_integral += yaw_error;
 8000912:	4b63      	ldr	r3, [pc, #396]	@ (8000aa0 <update_Motors+0x260>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	4a61      	ldr	r2, [pc, #388]	@ (8000aa0 <update_Motors+0x260>)
 800091c:	6013      	str	r3, [r2, #0]
	yaw_derivative = yaw_error - last_yaw_error;
 800091e:	4b61      	ldr	r3, [pc, #388]	@ (8000aa4 <update_Motors+0x264>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	4a60      	ldr	r2, [pc, #384]	@ (8000aa8 <update_Motors+0x268>)
 8000928:	6013      	str	r3, [r2, #0]
	yaw_effort = -(Kp_yaw * yaw_error + Ki_yaw * yaw_integral + Kd_yaw * yaw_derivative) / PID_SCALE;
 800092a:	4b60      	ldr	r3, [pc, #384]	@ (8000aac <update_Motors+0x26c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	fb03 f202 	mul.w	r2, r3, r2
 8000934:	4b5e      	ldr	r3, [pc, #376]	@ (8000ab0 <update_Motors+0x270>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4959      	ldr	r1, [pc, #356]	@ (8000aa0 <update_Motors+0x260>)
 800093a:	6809      	ldr	r1, [r1, #0]
 800093c:	fb01 f303 	mul.w	r3, r1, r3
 8000940:	441a      	add	r2, r3
 8000942:	4b5c      	ldr	r3, [pc, #368]	@ (8000ab4 <update_Motors+0x274>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4958      	ldr	r1, [pc, #352]	@ (8000aa8 <update_Motors+0x268>)
 8000948:	6809      	ldr	r1, [r1, #0]
 800094a:	fb01 f303 	mul.w	r3, r1, r3
 800094e:	4413      	add	r3, r2
 8000950:	4a46      	ldr	r2, [pc, #280]	@ (8000a6c <update_Motors+0x22c>)
 8000952:	fb82 1203 	smull	r1, r2, r2, r3
 8000956:	1192      	asrs	r2, r2, #6
 8000958:	17db      	asrs	r3, r3, #31
 800095a:	1a9b      	subs	r3, r3, r2
 800095c:	4a56      	ldr	r2, [pc, #344]	@ (8000ab8 <update_Motors+0x278>)
 800095e:	6013      	str	r3, [r2, #0]
	last_yaw_error = yaw_error;
 8000960:	4a50      	ldr	r2, [pc, #320]	@ (8000aa4 <update_Motors+0x264>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6013      	str	r3, [r2, #0]
	//printf("Errors -> Roll, Pitch, Yaw,  %d,%d,%d \r\n", roll_error, pitch_error, yaw_error);


	// Start with base throttle
	A = B = C = D = effort_set * K_effort + 960;
 8000966:	4b55      	ldr	r3, [pc, #340]	@ (8000abc <update_Motors+0x27c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a55      	ldr	r2, [pc, #340]	@ (8000ac0 <update_Motors+0x280>)
 800096c:	6812      	ldr	r2, [r2, #0]
 800096e:	fb02 f303 	mul.w	r3, r2, r3
 8000972:	f503 7370 	add.w	r3, r3, #960	@ 0x3c0
 8000976:	4a53      	ldr	r2, [pc, #332]	@ (8000ac4 <update_Motors+0x284>)
 8000978:	6013      	str	r3, [r2, #0]
 800097a:	4b52      	ldr	r3, [pc, #328]	@ (8000ac4 <update_Motors+0x284>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a52      	ldr	r2, [pc, #328]	@ (8000ac8 <update_Motors+0x288>)
 8000980:	6013      	str	r3, [r2, #0]
 8000982:	4b51      	ldr	r3, [pc, #324]	@ (8000ac8 <update_Motors+0x288>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a51      	ldr	r2, [pc, #324]	@ (8000acc <update_Motors+0x28c>)
 8000988:	6013      	str	r3, [r2, #0]
 800098a:	4b50      	ldr	r3, [pc, #320]	@ (8000acc <update_Motors+0x28c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a50      	ldr	r2, [pc, #320]	@ (8000ad0 <update_Motors+0x290>)
 8000990:	6013      	str	r3, [r2, #0]

	// Pitch: affects A, B, C
	if (pitch_effort > 0) {
 8000992:	4b40      	ldr	r3, [pc, #256]	@ (8000a94 <update_Motors+0x254>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	dd0e      	ble.n	80009b8 <update_Motors+0x178>
	    B += pitch_effort;
 800099a:	4b4c      	ldr	r3, [pc, #304]	@ (8000acc <update_Motors+0x28c>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a94 <update_Motors+0x254>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a49      	ldr	r2, [pc, #292]	@ (8000acc <update_Motors+0x28c>)
 80009a6:	6013      	str	r3, [r2, #0]
	    C += pitch_effort;
 80009a8:	4b47      	ldr	r3, [pc, #284]	@ (8000ac8 <update_Motors+0x288>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b39      	ldr	r3, [pc, #228]	@ (8000a94 <update_Motors+0x254>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4413      	add	r3, r2
 80009b2:	4a45      	ldr	r2, [pc, #276]	@ (8000ac8 <update_Motors+0x288>)
 80009b4:	6013      	str	r3, [r2, #0]
 80009b6:	e011      	b.n	80009dc <update_Motors+0x19c>
	}
	else if (pitch_effort < 0) {
 80009b8:	4b36      	ldr	r3, [pc, #216]	@ (8000a94 <update_Motors+0x254>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	da0d      	bge.n	80009dc <update_Motors+0x19c>
	    A -= pitch_effort;  // pitch_effort is negative
 80009c0:	4b43      	ldr	r3, [pc, #268]	@ (8000ad0 <update_Motors+0x290>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b33      	ldr	r3, [pc, #204]	@ (8000a94 <update_Motors+0x254>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	4a41      	ldr	r2, [pc, #260]	@ (8000ad0 <update_Motors+0x290>)
 80009cc:	6013      	str	r3, [r2, #0]
	    D -= pitch_effort;
 80009ce:	4b3d      	ldr	r3, [pc, #244]	@ (8000ac4 <update_Motors+0x284>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	4b30      	ldr	r3, [pc, #192]	@ (8000a94 <update_Motors+0x254>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	4a3a      	ldr	r2, [pc, #232]	@ (8000ac4 <update_Motors+0x284>)
 80009da:	6013      	str	r3, [r2, #0]
	}

	// Roll: affects B, C
	if (roll_effort > 0) {
 80009dc:	4b24      	ldr	r3, [pc, #144]	@ (8000a70 <update_Motors+0x230>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	dd0e      	ble.n	8000a02 <update_Motors+0x1c2>
	    C += roll_effort;
 80009e4:	4b38      	ldr	r3, [pc, #224]	@ (8000ac8 <update_Motors+0x288>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <update_Motors+0x230>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4413      	add	r3, r2
 80009ee:	4a36      	ldr	r2, [pc, #216]	@ (8000ac8 <update_Motors+0x288>)
 80009f0:	6013      	str	r3, [r2, #0]
	    D += roll_effort;
 80009f2:	4b34      	ldr	r3, [pc, #208]	@ (8000ac4 <update_Motors+0x284>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <update_Motors+0x230>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a31      	ldr	r2, [pc, #196]	@ (8000ac4 <update_Motors+0x284>)
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	e011      	b.n	8000a26 <update_Motors+0x1e6>
	}
	else if (roll_effort < 0) {
 8000a02:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <update_Motors+0x230>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	da0d      	bge.n	8000a26 <update_Motors+0x1e6>
	    A -= roll_effort;
 8000a0a:	4b31      	ldr	r3, [pc, #196]	@ (8000ad0 <update_Motors+0x290>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <update_Motors+0x230>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	4a2e      	ldr	r2, [pc, #184]	@ (8000ad0 <update_Motors+0x290>)
 8000a16:	6013      	str	r3, [r2, #0]
	    B -= roll_effort;
 8000a18:	4b2c      	ldr	r3, [pc, #176]	@ (8000acc <update_Motors+0x28c>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <update_Motors+0x230>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	4a2a      	ldr	r2, [pc, #168]	@ (8000acc <update_Motors+0x28c>)
 8000a24:	6013      	str	r3, [r2, #0]
	}

	// Yaw: affects A, C
	if (yaw_effort > 0) {
 8000a26:	4b24      	ldr	r3, [pc, #144]	@ (8000ab8 <update_Motors+0x278>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	dd52      	ble.n	8000ad4 <update_Motors+0x294>
	    A += yaw_effort;
 8000a2e:	4b28      	ldr	r3, [pc, #160]	@ (8000ad0 <update_Motors+0x290>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	4b21      	ldr	r3, [pc, #132]	@ (8000ab8 <update_Motors+0x278>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	4a25      	ldr	r2, [pc, #148]	@ (8000ad0 <update_Motors+0x290>)
 8000a3a:	6013      	str	r3, [r2, #0]
	    C += yaw_effort;
 8000a3c:	4b22      	ldr	r3, [pc, #136]	@ (8000ac8 <update_Motors+0x288>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <update_Motors+0x278>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a20      	ldr	r2, [pc, #128]	@ (8000ac8 <update_Motors+0x288>)
 8000a48:	6013      	str	r3, [r2, #0]
 8000a4a:	e055      	b.n	8000af8 <update_Motors+0x2b8>
 8000a4c:	2000029c 	.word	0x2000029c
 8000a50:	2000028c 	.word	0x2000028c
 8000a54:	200002b4 	.word	0x200002b4
 8000a58:	200002cc 	.word	0x200002cc
 8000a5c:	200002c0 	.word	0x200002c0
 8000a60:	20000000 	.word	0x20000000
 8000a64:	200002dc 	.word	0x200002dc
 8000a68:	200002e0 	.word	0x200002e0
 8000a6c:	10624dd3 	.word	0x10624dd3
 8000a70:	200002a8 	.word	0x200002a8
 8000a74:	200002a0 	.word	0x200002a0
 8000a78:	20000290 	.word	0x20000290
 8000a7c:	200002b8 	.word	0x200002b8
 8000a80:	200002d0 	.word	0x200002d0
 8000a84:	200002c4 	.word	0x200002c4
 8000a88:	20000004 	.word	0x20000004
 8000a8c:	200002e4 	.word	0x200002e4
 8000a90:	200002e8 	.word	0x200002e8
 8000a94:	200002ac 	.word	0x200002ac
 8000a98:	200002a4 	.word	0x200002a4
 8000a9c:	20000294 	.word	0x20000294
 8000aa0:	200002bc 	.word	0x200002bc
 8000aa4:	200002d4 	.word	0x200002d4
 8000aa8:	200002c8 	.word	0x200002c8
 8000aac:	200002ec 	.word	0x200002ec
 8000ab0:	200002f0 	.word	0x200002f0
 8000ab4:	200002f4 	.word	0x200002f4
 8000ab8:	200002b0 	.word	0x200002b0
 8000abc:	20000298 	.word	0x20000298
 8000ac0:	200002d8 	.word	0x200002d8
 8000ac4:	2000009c 	.word	0x2000009c
 8000ac8:	20000098 	.word	0x20000098
 8000acc:	20000094 	.word	0x20000094
 8000ad0:	20000090 	.word	0x20000090
	}
	else if (yaw_effort < 0) {
 8000ad4:	4b41      	ldr	r3, [pc, #260]	@ (8000bdc <update_Motors+0x39c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	da0d      	bge.n	8000af8 <update_Motors+0x2b8>
	    C -= yaw_effort;
 8000adc:	4b40      	ldr	r3, [pc, #256]	@ (8000be0 <update_Motors+0x3a0>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bdc <update_Motors+0x39c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	4a3e      	ldr	r2, [pc, #248]	@ (8000be0 <update_Motors+0x3a0>)
 8000ae8:	6013      	str	r3, [r2, #0]
	    D -= yaw_effort;
 8000aea:	4b3e      	ldr	r3, [pc, #248]	@ (8000be4 <update_Motors+0x3a4>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	4b3b      	ldr	r3, [pc, #236]	@ (8000bdc <update_Motors+0x39c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	4a3b      	ldr	r2, [pc, #236]	@ (8000be4 <update_Motors+0x3a4>)
 8000af6:	6013      	str	r3, [r2, #0]
	}

    // Clamp between 960 (0%) and 1500 (appx 50%)
    if (A < 960) A = 960;
 8000af8:	4b3b      	ldr	r3, [pc, #236]	@ (8000be8 <update_Motors+0x3a8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8000b00:	da03      	bge.n	8000b0a <update_Motors+0x2ca>
 8000b02:	4b39      	ldr	r3, [pc, #228]	@ (8000be8 <update_Motors+0x3a8>)
 8000b04:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000b08:	601a      	str	r2, [r3, #0]
    if (A > 1500) A = 1500;
 8000b0a:	4b37      	ldr	r3, [pc, #220]	@ (8000be8 <update_Motors+0x3a8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000b12:	4293      	cmp	r3, r2
 8000b14:	dd03      	ble.n	8000b1e <update_Motors+0x2de>
 8000b16:	4b34      	ldr	r3, [pc, #208]	@ (8000be8 <update_Motors+0x3a8>)
 8000b18:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000b1c:	601a      	str	r2, [r3, #0]

    if (B < 960) B = 960;
 8000b1e:	4b33      	ldr	r3, [pc, #204]	@ (8000bec <update_Motors+0x3ac>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8000b26:	da03      	bge.n	8000b30 <update_Motors+0x2f0>
 8000b28:	4b30      	ldr	r3, [pc, #192]	@ (8000bec <update_Motors+0x3ac>)
 8000b2a:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000b2e:	601a      	str	r2, [r3, #0]
    if (B > 1500) B = 1500;
 8000b30:	4b2e      	ldr	r3, [pc, #184]	@ (8000bec <update_Motors+0x3ac>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	dd03      	ble.n	8000b44 <update_Motors+0x304>
 8000b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bec <update_Motors+0x3ac>)
 8000b3e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000b42:	601a      	str	r2, [r3, #0]

    if (C < 960) C = 960;
 8000b44:	4b26      	ldr	r3, [pc, #152]	@ (8000be0 <update_Motors+0x3a0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8000b4c:	da03      	bge.n	8000b56 <update_Motors+0x316>
 8000b4e:	4b24      	ldr	r3, [pc, #144]	@ (8000be0 <update_Motors+0x3a0>)
 8000b50:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000b54:	601a      	str	r2, [r3, #0]
    if (C > 1500) C = 1500;
 8000b56:	4b22      	ldr	r3, [pc, #136]	@ (8000be0 <update_Motors+0x3a0>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	dd03      	ble.n	8000b6a <update_Motors+0x32a>
 8000b62:	4b1f      	ldr	r3, [pc, #124]	@ (8000be0 <update_Motors+0x3a0>)
 8000b64:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000b68:	601a      	str	r2, [r3, #0]

    if (D < 960) D = 960;
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000be4 <update_Motors+0x3a4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8000b72:	da03      	bge.n	8000b7c <update_Motors+0x33c>
 8000b74:	4b1b      	ldr	r3, [pc, #108]	@ (8000be4 <update_Motors+0x3a4>)
 8000b76:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000b7a:	601a      	str	r2, [r3, #0]
    if (D > 1500) D = 1500;
 8000b7c:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <update_Motors+0x3a4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000b84:	4293      	cmp	r3, r2
 8000b86:	dd03      	ble.n	8000b90 <update_Motors+0x350>
 8000b88:	4b16      	ldr	r3, [pc, #88]	@ (8000be4 <update_Motors+0x3a4>)
 8000b8a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000b8e:	601a      	str	r2, [r3, #0]

    printf("%d,%d,%d,%d \r\n", A, B, C, D);
 8000b90:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <update_Motors+0x3a8>)
 8000b92:	6819      	ldr	r1, [r3, #0]
 8000b94:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <update_Motors+0x3ac>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <update_Motors+0x3a0>)
 8000b9a:	6818      	ldr	r0, [r3, #0]
 8000b9c:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <update_Motors+0x3a4>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4812      	ldr	r0, [pc, #72]	@ (8000bf0 <update_Motors+0x3b0>)
 8000ba6:	f005 fbc7 	bl	8006338 <iprintf>


	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, A);
 8000baa:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <update_Motors+0x3a8>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <update_Motors+0x3b4>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, B);
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bec <update_Motors+0x3ac>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <update_Motors+0x3b4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, C);
 8000bbe:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <update_Motors+0x3a0>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <update_Motors+0x3b4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, D);
 8000bc8:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <update_Motors+0x3a4>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <update_Motors+0x3b4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200002b0 	.word	0x200002b0
 8000be0:	20000098 	.word	0x20000098
 8000be4:	2000009c 	.word	0x2000009c
 8000be8:	20000090 	.word	0x20000090
 8000bec:	20000094 	.word	0x20000094
 8000bf0:	080071e8 	.word	0x080071e8
 8000bf4:	2000014c 	.word	0x2000014c

08000bf8 <processInput>:

void InitializeBT(void){
	//send message from HC05. Receive message from PC. Confirm and continue.
}

void processInput(char *charBuf, int32_t *roll, int32_t *pitch, int32_t *yaw, int32_t *effort){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	@ 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	603b      	str	r3, [r7, #0]
	   int32_t LjoyX, LjoyY, RjoyX, LT, RT;

	   // Skip pound sign if present
	       if (charBuf[0] == '#') {
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b23      	cmp	r3, #35	@ 0x23
 8000c0c:	d10b      	bne.n	8000c26 <processInput+0x2e>
	           charBuf++;  // move pointer to the next character
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	3301      	adds	r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
	    	   badBTcount++;
	    	   printf("Bad BT input (did not process): %d\r\n", badBTcount);
	    	   return;
	       }

	    char *token = strtok(charBuf, ",");
 8000c14:	4935      	ldr	r1, [pc, #212]	@ (8000cec <processInput+0xf4>)
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f005 fbec 	bl	80063f4 <strtok>
 8000c1c:	6178      	str	r0, [r7, #20]
	    if (token) LjoyX = (int32_t)strtol(token, NULL, 10);
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d012      	beq.n	8000c4a <processInput+0x52>
 8000c24:	e00b      	b.n	8000c3e <processInput+0x46>
	    	   badBTcount++;
 8000c26:	4b32      	ldr	r3, [pc, #200]	@ (8000cf0 <processInput+0xf8>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	4a30      	ldr	r2, [pc, #192]	@ (8000cf0 <processInput+0xf8>)
 8000c2e:	6013      	str	r3, [r2, #0]
	    	   printf("Bad BT input (did not process): %d\r\n", badBTcount);
 8000c30:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf0 <processInput+0xf8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	482f      	ldr	r0, [pc, #188]	@ (8000cf4 <processInput+0xfc>)
 8000c38:	f005 fb7e 	bl	8006338 <iprintf>
	    	   return;
 8000c3c:	e052      	b.n	8000ce4 <processInput+0xec>
	    if (token) LjoyX = (int32_t)strtol(token, NULL, 10);
 8000c3e:	220a      	movs	r2, #10
 8000c40:	2100      	movs	r1, #0
 8000c42:	6978      	ldr	r0, [r7, #20]
 8000c44:	f005 faac 	bl	80061a0 <strtol>
 8000c48:	6278      	str	r0, [r7, #36]	@ 0x24

	    token = strtok(NULL, ",");
 8000c4a:	4928      	ldr	r1, [pc, #160]	@ (8000cec <processInput+0xf4>)
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f005 fbd1 	bl	80063f4 <strtok>
 8000c52:	6178      	str	r0, [r7, #20]
	    if (token) LjoyY = (int32_t)strtol(token, NULL, 10);
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d005      	beq.n	8000c66 <processInput+0x6e>
 8000c5a:	220a      	movs	r2, #10
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	6978      	ldr	r0, [r7, #20]
 8000c60:	f005 fa9e 	bl	80061a0 <strtol>
 8000c64:	6238      	str	r0, [r7, #32]

	    token = strtok(NULL, ",");
 8000c66:	4921      	ldr	r1, [pc, #132]	@ (8000cec <processInput+0xf4>)
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f005 fbc3 	bl	80063f4 <strtok>
 8000c6e:	6178      	str	r0, [r7, #20]
	    if (token) RjoyX = (int32_t)strtol(token, NULL, 10);
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d005      	beq.n	8000c82 <processInput+0x8a>
 8000c76:	220a      	movs	r2, #10
 8000c78:	2100      	movs	r1, #0
 8000c7a:	6978      	ldr	r0, [r7, #20]
 8000c7c:	f005 fa90 	bl	80061a0 <strtol>
 8000c80:	61f8      	str	r0, [r7, #28]

	    token = strtok(NULL, ",");
 8000c82:	491a      	ldr	r1, [pc, #104]	@ (8000cec <processInput+0xf4>)
 8000c84:	2000      	movs	r0, #0
 8000c86:	f005 fbb5 	bl	80063f4 <strtok>
 8000c8a:	6178      	str	r0, [r7, #20]
	    if (token) LT = (int32_t)strtol(token, NULL, 10);
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d005      	beq.n	8000c9e <processInput+0xa6>
 8000c92:	220a      	movs	r2, #10
 8000c94:	2100      	movs	r1, #0
 8000c96:	6978      	ldr	r0, [r7, #20]
 8000c98:	f005 fa82 	bl	80061a0 <strtol>
 8000c9c:	6138      	str	r0, [r7, #16]

	    token = strtok(NULL, ",");
 8000c9e:	4913      	ldr	r1, [pc, #76]	@ (8000cec <processInput+0xf4>)
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f005 fba7 	bl	80063f4 <strtok>
 8000ca6:	6178      	str	r0, [r7, #20]
	    if (token) RT = (int32_t)strtol(token, NULL, 10);
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d005      	beq.n	8000cba <processInput+0xc2>
 8000cae:	220a      	movs	r2, #10
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	6978      	ldr	r0, [r7, #20]
 8000cb4:	f005 fa74 	bl	80061a0 <strtol>
 8000cb8:	61b8      	str	r0, [r7, #24]

	    // Assign parsed values to output pointers
	    *roll   = LjoyX*180;
 8000cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cbc:	22b4      	movs	r2, #180	@ 0xb4
 8000cbe:	fb03 f202 	mul.w	r2, r3, r2
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	601a      	str	r2, [r3, #0]
	    *pitch  = LjoyY*180;
 8000cc6:	6a3b      	ldr	r3, [r7, #32]
 8000cc8:	22b4      	movs	r2, #180	@ 0xb4
 8000cca:	fb03 f202 	mul.w	r2, r3, r2
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	601a      	str	r2, [r3, #0]
	    *yaw    = RjoyX*180;
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	22b4      	movs	r2, #180	@ 0xb4
 8000cd6:	fb03 f202 	mul.w	r2, r3, r2
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	601a      	str	r2, [r3, #0]
	    *effort = RT;
 8000cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	601a      	str	r2, [r3, #0]
	   }
 8000ce4:	3728      	adds	r7, #40	@ 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	08007220 	.word	0x08007220
 8000cf0:	200000a0 	.word	0x200000a0
 8000cf4:	080071f8 	.word	0x080071f8

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfc:	f000 fe8e 	bl	8001a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d00:	f000 f86c 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d04:	f000 fa20 	bl	8001148 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d08:	f000 f9fe 	bl	8001108 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d0c:	f000 f8ce 	bl	8000eac <MX_I2C1_Init>
  MX_TIM3_Init();
 8000d10:	f000 f928 	bl	8000f64 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000d14:	f000 f9a4 	bl	8001060 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d18:	f000 f9cc 	bl	80010b4 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000d1c:	f000 f8f4 	bl	8000f08 <MX_I2C3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { //potential to use HAL tim int flag if control loop needs to run at percise intervals to avoid spike in derivative/integral calculation
	 if (state == 0){
 8000d20:	4b20      	ldr	r3, [pc, #128]	@ (8000da4 <main+0xac>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d105      	bne.n	8000d34 <main+0x3c>

		 BNO_Init();
 8000d28:	f7ff fc40 	bl	80005ac <BNO_Init>
		 state = 1;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000da4 <main+0xac>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	e7f5      	b.n	8000d20 <main+0x28>
	 }else if (state == 1){
 8000d34:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <main+0xac>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d114      	bne.n	8000d66 <main+0x6e>
		 HAL_UART_Receive_DMA(&huart2, BT_RxBuf, BT_MSG_LEN-1);
 8000d3c:	221e      	movs	r2, #30
 8000d3e:	491a      	ldr	r1, [pc, #104]	@ (8000da8 <main+0xb0>)
 8000d40:	481a      	ldr	r0, [pc, #104]	@ (8000dac <main+0xb4>)
 8000d42:	f004 f8a6 	bl	8004e92 <HAL_UART_Receive_DMA>
		 if (roll_set<-150000){
 8000d46:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <main+0xb8>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a1a      	ldr	r2, [pc, #104]	@ (8000db4 <main+0xbc>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	dae7      	bge.n	8000d20 <main+0x28>
			 armESC();
 8000d50:	f7ff fd0a 	bl	8000768 <armESC>
			 state = 2;
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <main+0xac>)
 8000d56:	2202      	movs	r2, #2
 8000d58:	601a      	str	r2, [r3, #0]
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // Set PA0 High (go signal)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	4816      	ldr	r0, [pc, #88]	@ (8000db8 <main+0xc0>)
 8000d60:	f001 fe6e 	bl	8002a40 <HAL_GPIO_WritePin>
 8000d64:	e7dc      	b.n	8000d20 <main+0x28>
		 }
		 }else if(state == 2){
 8000d66:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <main+0xac>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d1d8      	bne.n	8000d20 <main+0x28>

			 imu_request = true;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <main+0xc4>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	601a      	str	r2, [r3, #0]
		  if (imu_request) {
 8000d74:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <main+0xc4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0d1      	beq.n	8000d20 <main+0x28>
			  imu_request = false;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <main+0xc4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
		      BNO_Read(&roll_true, &pitch_true, &yaw_true);
 8000d82:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc0 <main+0xc8>)
 8000d84:	490f      	ldr	r1, [pc, #60]	@ (8000dc4 <main+0xcc>)
 8000d86:	4810      	ldr	r0, [pc, #64]	@ (8000dc8 <main+0xd0>)
 8000d88:	f7ff fc96 	bl	80006b8 <BNO_Read>
			  update_Motors(roll_effort, pitch_effort, yaw_effort, effort_set); //includes PID loop in one functon
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <main+0xd4>)
 8000d8e:	6818      	ldr	r0, [r3, #0]
 8000d90:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <main+0xd8>)
 8000d92:	6819      	ldr	r1, [r3, #0]
 8000d94:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <main+0xdc>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <main+0xe0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f7ff fd50 	bl	8000840 <update_Motors>
	 if (state == 0){
 8000da0:	e7be      	b.n	8000d20 <main+0x28>
 8000da2:	bf00      	nop
 8000da4:	20000284 	.word	0x20000284
 8000da8:	200002f8 	.word	0x200002f8
 8000dac:	200001dc 	.word	0x200001dc
 8000db0:	2000028c 	.word	0x2000028c
 8000db4:	fffdb610 	.word	0xfffdb610
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	20000288 	.word	0x20000288
 8000dc0:	200002a4 	.word	0x200002a4
 8000dc4:	200002a0 	.word	0x200002a0
 8000dc8:	2000029c 	.word	0x2000029c
 8000dcc:	200002a8 	.word	0x200002a8
 8000dd0:	200002ac 	.word	0x200002ac
 8000dd4:	200002b0 	.word	0x200002b0
 8000dd8:	20000298 	.word	0x20000298

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	@ 0x50
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	2230      	movs	r2, #48	@ 0x30
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f005 faf9 	bl	80063e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	4b27      	ldr	r3, [pc, #156]	@ (8000ea4 <SystemClock_Config+0xc8>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e08:	4a26      	ldr	r2, [pc, #152]	@ (8000ea4 <SystemClock_Config+0xc8>)
 8000e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e10:	4b24      	ldr	r3, [pc, #144]	@ (8000ea4 <SystemClock_Config+0xc8>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	4b21      	ldr	r3, [pc, #132]	@ (8000ea8 <SystemClock_Config+0xcc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a20      	ldr	r2, [pc, #128]	@ (8000ea8 <SystemClock_Config+0xcc>)
 8000e26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea8 <SystemClock_Config+0xcc>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e40:	2310      	movs	r3, #16
 8000e42:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e44:	2302      	movs	r3, #2
 8000e46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000e50:	2332      	movs	r3, #50	@ 0x32
 8000e52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	f107 0320 	add.w	r3, r7, #32
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 fe75 	bl	8003b50 <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e6c:	f000 fa48 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e70:	230f      	movs	r3, #15
 8000e72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e74:	2302      	movs	r3, #2
 8000e76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2101      	movs	r1, #1
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 f8d8 	bl	8004040 <HAL_RCC_ClockConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000e96:	f000 fa33 	bl	8001300 <Error_Handler>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3750      	adds	r7, #80	@ 0x50
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40007000 	.word	0x40007000

08000eac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000eb2:	4a13      	ldr	r2, [pc, #76]	@ (8000f00 <MX_I2C1_Init+0x54>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000eb8:	4a12      	ldr	r2, [pc, #72]	@ (8000f04 <MX_I2C1_Init+0x58>)
 8000eba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000eca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ece:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000edc:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ee8:	4804      	ldr	r0, [pc, #16]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000eea:	f001 fddd 	bl	8002aa8 <HAL_I2C_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ef4:	f000 fa04 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000a4 	.word	0x200000a4
 8000f00:	40005400 	.word	0x40005400
 8000f04:	000186a0 	.word	0x000186a0

08000f08 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <MX_I2C3_Init+0x50>)
 8000f0e:	4a13      	ldr	r2, [pc, #76]	@ (8000f5c <MX_I2C3_Init+0x54>)
 8000f10:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000f12:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <MX_I2C3_Init+0x50>)
 8000f14:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <MX_I2C3_Init+0x58>)
 8000f16:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <MX_I2C3_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <MX_I2C3_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <MX_I2C3_Init+0x50>)
 8000f26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f2a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <MX_I2C3_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000f32:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <MX_I2C3_Init+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f38:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <MX_I2C3_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <MX_I2C3_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f44:	4804      	ldr	r0, [pc, #16]	@ (8000f58 <MX_I2C3_Init+0x50>)
 8000f46:	f001 fdaf 	bl	8002aa8 <HAL_I2C_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000f50:	f000 f9d6 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200000f8 	.word	0x200000f8
 8000f5c:	40005c00 	.word	0x40005c00
 8000f60:	000186a0 	.word	0x000186a0

08000f64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	@ 0x28
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]
 8000f82:	615a      	str	r2, [r3, #20]
 8000f84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f86:	4b34      	ldr	r3, [pc, #208]	@ (8001058 <MX_TIM3_Init+0xf4>)
 8000f88:	4a34      	ldr	r2, [pc, #208]	@ (800105c <MX_TIM3_Init+0xf8>)
 8000f8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 8000f8c:	4b32      	ldr	r3, [pc, #200]	@ (8001058 <MX_TIM3_Init+0xf4>)
 8000f8e:	2232      	movs	r2, #50	@ 0x32
 8000f90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f92:	4b31      	ldr	r3, [pc, #196]	@ (8001058 <MX_TIM3_Init+0xf4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000f98:	4b2f      	ldr	r3, [pc, #188]	@ (8001058 <MX_TIM3_Init+0xf4>)
 8000f9a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000f9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8001058 <MX_TIM3_Init+0xf4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8001058 <MX_TIM3_Init+0xf4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fac:	482a      	ldr	r0, [pc, #168]	@ (8001058 <MX_TIM3_Init+0xf4>)
 8000fae:	f003 fa27 	bl	8004400 <HAL_TIM_PWM_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000fb8:	f000 f9a2 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4823      	ldr	r0, [pc, #140]	@ (8001058 <MX_TIM3_Init+0xf4>)
 8000fcc:	f003 fe18 	bl	8004c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000fd6:	f000 f993 	bl	8001300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fda:	2360      	movs	r3, #96	@ 0x60
 8000fdc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 400;
 8000fde:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000fe2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4819      	ldr	r0, [pc, #100]	@ (8001058 <MX_TIM3_Init+0xf4>)
 8000ff4:	f003 fb04 	bl	8004600 <HAL_TIM_PWM_ConfigChannel>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ffe:	f000 f97f 	bl	8001300 <Error_Handler>
  }
  sConfigOC.Pulse = 3200;
 8001002:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 8001006:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2204      	movs	r2, #4
 800100c:	4619      	mov	r1, r3
 800100e:	4812      	ldr	r0, [pc, #72]	@ (8001058 <MX_TIM3_Init+0xf4>)
 8001010:	f003 faf6 	bl	8004600 <HAL_TIM_PWM_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800101a:	f000 f971 	bl	8001300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2208      	movs	r2, #8
 8001022:	4619      	mov	r1, r3
 8001024:	480c      	ldr	r0, [pc, #48]	@ (8001058 <MX_TIM3_Init+0xf4>)
 8001026:	f003 faeb 	bl	8004600 <HAL_TIM_PWM_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001030:	f000 f966 	bl	8001300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	220c      	movs	r2, #12
 8001038:	4619      	mov	r1, r3
 800103a:	4807      	ldr	r0, [pc, #28]	@ (8001058 <MX_TIM3_Init+0xf4>)
 800103c:	f003 fae0 	bl	8004600 <HAL_TIM_PWM_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001046:	f000 f95b 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800104a:	4803      	ldr	r0, [pc, #12]	@ (8001058 <MX_TIM3_Init+0xf4>)
 800104c:	f000 fa7e 	bl	800154c <HAL_TIM_MspPostInit>

}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	@ 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2000014c 	.word	0x2000014c
 800105c:	40000400 	.word	0x40000400

08001060 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_USART1_UART_Init+0x4c>)
 8001066:	4a12      	ldr	r2, [pc, #72]	@ (80010b0 <MX_USART1_UART_Init+0x50>)
 8001068:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800106a:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <MX_USART1_UART_Init+0x4c>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_USART1_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_USART1_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <MX_USART1_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <MX_USART1_UART_Init+0x4c>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <MX_USART1_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_USART1_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	@ (80010ac <MX_USART1_UART_Init+0x4c>)
 8001098:	f003 fe20 	bl	8004cdc <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010a2:	f000 f92d 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000194 	.word	0x20000194
 80010b0:	40011000 	.word	0x40011000

080010b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <MX_USART2_UART_Init+0x4c>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	@ (8001104 <MX_USART2_UART_Init+0x50>)
 80010bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <MX_USART2_UART_Init+0x4c>)
 80010c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <MX_USART2_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <MX_USART2_UART_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <MX_USART2_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d8:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <MX_USART2_UART_Init+0x4c>)
 80010da:	220c      	movs	r2, #12
 80010dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010de:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <MX_USART2_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <MX_USART2_UART_Init+0x4c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	@ (8001100 <MX_USART2_UART_Init+0x4c>)
 80010ec:	f003 fdf6 	bl	8004cdc <HAL_UART_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010f6:	f000 f903 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200001dc 	.word	0x200001dc
 8001104:	40004400 	.word	0x40004400

08001108 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <MX_DMA_Init+0x3c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a0b      	ldr	r2, [pc, #44]	@ (8001144 <MX_DMA_Init+0x3c>)
 8001118:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <MX_DMA_Init+0x3c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	2010      	movs	r0, #16
 8001130:	f000 fde5 	bl	8001cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001134:	2010      	movs	r0, #16
 8001136:	f000 fdfe 	bl	8001d36 <HAL_NVIC_EnableIRQ>

}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	@ 0x28
 800114c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b42      	ldr	r3, [pc, #264]	@ (800126c <MX_GPIO_Init+0x124>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a41      	ldr	r2, [pc, #260]	@ (800126c <MX_GPIO_Init+0x124>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b3f      	ldr	r3, [pc, #252]	@ (800126c <MX_GPIO_Init+0x124>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b3b      	ldr	r3, [pc, #236]	@ (800126c <MX_GPIO_Init+0x124>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a3a      	ldr	r2, [pc, #232]	@ (800126c <MX_GPIO_Init+0x124>)
 8001184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b38      	ldr	r3, [pc, #224]	@ (800126c <MX_GPIO_Init+0x124>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	4b34      	ldr	r3, [pc, #208]	@ (800126c <MX_GPIO_Init+0x124>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a33      	ldr	r2, [pc, #204]	@ (800126c <MX_GPIO_Init+0x124>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b31      	ldr	r3, [pc, #196]	@ (800126c <MX_GPIO_Init+0x124>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b2d      	ldr	r3, [pc, #180]	@ (800126c <MX_GPIO_Init+0x124>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a2c      	ldr	r2, [pc, #176]	@ (800126c <MX_GPIO_Init+0x124>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b2a      	ldr	r3, [pc, #168]	@ (800126c <MX_GPIO_Init+0x124>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80011d4:	4826      	ldr	r0, [pc, #152]	@ (8001270 <MX_GPIO_Init+0x128>)
 80011d6:	f001 fc33 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f641 0103 	movw	r1, #6147	@ 0x1803
 80011e0:	4824      	ldr	r0, [pc, #144]	@ (8001274 <MX_GPIO_Init+0x12c>)
 80011e2:	f001 fc2d 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, US_ECHO_Pin|US_TRIG_Pin|GPIO_PIN_14|GPIO_PIN_9, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f44f 41e4 	mov.w	r1, #29184	@ 0x7200
 80011ec:	4822      	ldr	r0, [pc, #136]	@ (8001278 <MX_GPIO_Init+0x130>)
 80011ee:	f001 fc27 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80011f2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80011f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4819      	ldr	r0, [pc, #100]	@ (8001270 <MX_GPIO_Init+0x128>)
 800120c:	f001 f9b0 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001210:	f641 0303 	movw	r3, #6147	@ 0x1803
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4812      	ldr	r0, [pc, #72]	@ (8001274 <MX_GPIO_Init+0x12c>)
 800122a:	f001 f9a1 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800122e:	2310      	movs	r3, #16
 8001230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	480c      	ldr	r0, [pc, #48]	@ (8001274 <MX_GPIO_Init+0x12c>)
 8001242:	f001 f995 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pins : US_ECHO_Pin US_TRIG_Pin PB14 PB9 */
  GPIO_InitStruct.Pin = US_ECHO_Pin|US_TRIG_Pin|GPIO_PIN_14|GPIO_PIN_9;
 8001246:	f44f 43e4 	mov.w	r3, #29184	@ 0x7200
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	@ (8001278 <MX_GPIO_Init+0x130>)
 8001260:	f001 f986 	bl	8002570 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001264:	bf00      	nop
 8001266:	3728      	adds	r7, #40	@ 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	40020800 	.word	0x40020800
 8001274:	40020000 	.word	0x40020000
 8001278:	40020400 	.word	0x40020400

0800127c <HAL_UART_RxCpltCallback>:
  *  It adds an end message statment, sends the buffer to the processInput function and sets the imu_request flag
  *
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//should trigger when DMA reads complete message
{    if (huart->Instance == USART2) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af02      	add	r7, sp, #8
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0c      	ldr	r2, [pc, #48]	@ (80012bc <HAL_UART_RxCpltCallback+0x40>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d10a      	bne.n	80012a4 <HAL_UART_RxCpltCallback+0x28>
        // Null-terminate just in case you're using sscanf or string functions
        BT_RxBuf[BT_MSG_LEN - 1] = '\0';
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <HAL_UART_RxCpltCallback+0x44>)
 8001290:	2200      	movs	r2, #0
 8001292:	779a      	strb	r2, [r3, #30]

        // Process entire message

        processInput((char *)BT_RxBuf, &roll_set, &pitch_set, &yaw_set, &effort_set);
 8001294:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <HAL_UART_RxCpltCallback+0x48>)
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <HAL_UART_RxCpltCallback+0x4c>)
 800129a:	4a0c      	ldr	r2, [pc, #48]	@ (80012cc <HAL_UART_RxCpltCallback+0x50>)
 800129c:	490c      	ldr	r1, [pc, #48]	@ (80012d0 <HAL_UART_RxCpltCallback+0x54>)
 800129e:	4808      	ldr	r0, [pc, #32]	@ (80012c0 <HAL_UART_RxCpltCallback+0x44>)
 80012a0:	f7ff fcaa 	bl	8000bf8 <processInput>
        }
        // Restart DMA to receive next message
        //HAL_UART_Receive_DMA(&huart2, BT_RxBuf, BT_MSG_LEN); //set up this function to run on next BT input
        imu_request = true; //set up IMU to run when interupt exits
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <HAL_UART_RxCpltCallback+0x58>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	601a      	str	r2, [r3, #0]
        HAL_UART_Receive_DMA(&huart2, BT_RxBuf, BT_MSG_LEN-1); //set up this function to run on next BT input
 80012aa:	221e      	movs	r2, #30
 80012ac:	4904      	ldr	r1, [pc, #16]	@ (80012c0 <HAL_UART_RxCpltCallback+0x44>)
 80012ae:	480a      	ldr	r0, [pc, #40]	@ (80012d8 <HAL_UART_RxCpltCallback+0x5c>)
 80012b0:	f003 fdef 	bl	8004e92 <HAL_UART_Receive_DMA>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40004400 	.word	0x40004400
 80012c0:	200002f8 	.word	0x200002f8
 80012c4:	20000298 	.word	0x20000298
 80012c8:	20000294 	.word	0x20000294
 80012cc:	20000290 	.word	0x20000290
 80012d0:	2000028c 	.word	0x2000028c
 80012d4:	20000288 	.word	0x20000288
 80012d8:	200001dc 	.word	0x200001dc

080012dc <__io_putchar>:
/**
  * @brief  This function is used to send printf() statments to the ST-Link UART
  * @retval None
  */
int __io_putchar(int ch) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80012e4:	1d39      	adds	r1, r7, #4
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	2201      	movs	r2, #1
 80012ec:	4803      	ldr	r0, [pc, #12]	@ (80012fc <__io_putchar+0x20>)
 80012ee:	f003 fd45 	bl	8004d7c <HAL_UART_Transmit>
    return ch;
 80012f2:	687b      	ldr	r3, [r7, #4]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000194 	.word	0x20000194

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <Error_Handler+0x8>

0800130c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <HAL_MspInit+0x4c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	4a0f      	ldr	r2, [pc, #60]	@ (8001358 <HAL_MspInit+0x4c>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001320:	6453      	str	r3, [r2, #68]	@ 0x44
 8001322:	4b0d      	ldr	r3, [pc, #52]	@ (8001358 <HAL_MspInit+0x4c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <HAL_MspInit+0x4c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	4a08      	ldr	r2, [pc, #32]	@ (8001358 <HAL_MspInit+0x4c>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800133c:	6413      	str	r3, [r2, #64]	@ 0x40
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_MspInit+0x4c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800

0800135c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	@ 0x30
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a41      	ldr	r2, [pc, #260]	@ (8001480 <HAL_I2C_MspInit+0x124>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d12c      	bne.n	80013d8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	4b40      	ldr	r3, [pc, #256]	@ (8001484 <HAL_I2C_MspInit+0x128>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a3f      	ldr	r2, [pc, #252]	@ (8001484 <HAL_I2C_MspInit+0x128>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b3d      	ldr	r3, [pc, #244]	@ (8001484 <HAL_I2C_MspInit+0x128>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BNO_SCL_Pin|BNO_SDA_Pin;
 800139a:	23c0      	movs	r3, #192	@ 0xc0
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139e:	2312      	movs	r3, #18
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013aa:	2304      	movs	r3, #4
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	4834      	ldr	r0, [pc, #208]	@ (8001488 <HAL_I2C_MspInit+0x12c>)
 80013b6:	f001 f8db 	bl	8002570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	4b31      	ldr	r3, [pc, #196]	@ (8001484 <HAL_I2C_MspInit+0x128>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	4a30      	ldr	r2, [pc, #192]	@ (8001484 <HAL_I2C_MspInit+0x128>)
 80013c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001484 <HAL_I2C_MspInit+0x128>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 80013d6:	e04f      	b.n	8001478 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a2b      	ldr	r2, [pc, #172]	@ (800148c <HAL_I2C_MspInit+0x130>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d14a      	bne.n	8001478 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b27      	ldr	r3, [pc, #156]	@ (8001484 <HAL_I2C_MspInit+0x128>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a26      	ldr	r2, [pc, #152]	@ (8001484 <HAL_I2C_MspInit+0x128>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <HAL_I2C_MspInit+0x128>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <HAL_I2C_MspInit+0x128>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a1f      	ldr	r2, [pc, #124]	@ (8001484 <HAL_I2C_MspInit+0x128>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <HAL_I2C_MspInit+0x128>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800141a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001420:	2312      	movs	r3, #18
 8001422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800142c:	2304      	movs	r3, #4
 800142e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	4816      	ldr	r0, [pc, #88]	@ (8001490 <HAL_I2C_MspInit+0x134>)
 8001438:	f001 f89a 	bl	8002570 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800143c:	2310      	movs	r3, #16
 800143e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001440:	2312      	movs	r3, #18
 8001442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800144c:	2309      	movs	r3, #9
 800144e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4619      	mov	r1, r3
 8001456:	480c      	ldr	r0, [pc, #48]	@ (8001488 <HAL_I2C_MspInit+0x12c>)
 8001458:	f001 f88a 	bl	8002570 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <HAL_I2C_MspInit+0x128>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001464:	4a07      	ldr	r2, [pc, #28]	@ (8001484 <HAL_I2C_MspInit+0x128>)
 8001466:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800146a:	6413      	str	r3, [r2, #64]	@ 0x40
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <HAL_I2C_MspInit+0x128>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001470:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
}
 8001478:	bf00      	nop
 800147a:	3730      	adds	r7, #48	@ 0x30
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40005400 	.word	0x40005400
 8001484:	40023800 	.word	0x40023800
 8001488:	40020400 	.word	0x40020400
 800148c:	40005c00 	.word	0x40005c00
 8001490:	40020000 	.word	0x40020000

08001494 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a14      	ldr	r2, [pc, #80]	@ (80014f4 <HAL_I2C_MspDeInit+0x60>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d10e      	bne.n	80014c4 <HAL_I2C_MspDeInit+0x30>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80014a6:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <HAL_I2C_MspDeInit+0x64>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	4a13      	ldr	r2, [pc, #76]	@ (80014f8 <HAL_I2C_MspDeInit+0x64>)
 80014ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80014b0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BNO_SCL_GPIO_Port, BNO_SCL_Pin);
 80014b2:	2140      	movs	r1, #64	@ 0x40
 80014b4:	4811      	ldr	r0, [pc, #68]	@ (80014fc <HAL_I2C_MspDeInit+0x68>)
 80014b6:	f001 f9df 	bl	8002878 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BNO_SDA_GPIO_Port, BNO_SDA_Pin);
 80014ba:	2180      	movs	r1, #128	@ 0x80
 80014bc:	480f      	ldr	r0, [pc, #60]	@ (80014fc <HAL_I2C_MspDeInit+0x68>)
 80014be:	f001 f9db 	bl	8002878 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80014c2:	e013      	b.n	80014ec <HAL_I2C_MspDeInit+0x58>
  else if(hi2c->Instance==I2C3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001500 <HAL_I2C_MspDeInit+0x6c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d10e      	bne.n	80014ec <HAL_I2C_MspDeInit+0x58>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <HAL_I2C_MspDeInit+0x64>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	4a09      	ldr	r2, [pc, #36]	@ (80014f8 <HAL_I2C_MspDeInit+0x64>)
 80014d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80014d8:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80014da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014de:	4809      	ldr	r0, [pc, #36]	@ (8001504 <HAL_I2C_MspDeInit+0x70>)
 80014e0:	f001 f9ca 	bl	8002878 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 80014e4:	2110      	movs	r1, #16
 80014e6:	4805      	ldr	r0, [pc, #20]	@ (80014fc <HAL_I2C_MspDeInit+0x68>)
 80014e8:	f001 f9c6 	bl	8002878 <HAL_GPIO_DeInit>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40005400 	.word	0x40005400
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020400 	.word	0x40020400
 8001500:	40005c00 	.word	0x40005c00
 8001504:	40020000 	.word	0x40020000

08001508 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0b      	ldr	r2, [pc, #44]	@ (8001544 <HAL_TIM_PWM_MspInit+0x3c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d10d      	bne.n	8001536 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_TIM_PWM_MspInit+0x40>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	4a09      	ldr	r2, [pc, #36]	@ (8001548 <HAL_TIM_PWM_MspInit+0x40>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6413      	str	r3, [r2, #64]	@ 0x40
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <HAL_TIM_PWM_MspInit+0x40>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40000400 	.word	0x40000400
 8001548:	40023800 	.word	0x40023800

0800154c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	@ 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a21      	ldr	r2, [pc, #132]	@ (80015f0 <HAL_TIM_MspPostInit+0xa4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d13b      	bne.n	80015e6 <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b20      	ldr	r3, [pc, #128]	@ (80015f4 <HAL_TIM_MspPostInit+0xa8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a1f      	ldr	r2, [pc, #124]	@ (80015f4 <HAL_TIM_MspPostInit+0xa8>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b1d      	ldr	r3, [pc, #116]	@ (80015f4 <HAL_TIM_MspPostInit+0xa8>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <HAL_TIM_MspPostInit+0xa8>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a18      	ldr	r2, [pc, #96]	@ (80015f4 <HAL_TIM_MspPostInit+0xa8>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <HAL_TIM_MspPostInit+0xa8>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015a6:	23c0      	movs	r3, #192	@ 0xc0
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <HAL_TIM_MspPostInit+0xac>)
 80015c2:	f000 ffd5 	bl	8002570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015c6:	2303      	movs	r3, #3
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015d6:	2302      	movs	r3, #2
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4806      	ldr	r0, [pc, #24]	@ (80015fc <HAL_TIM_MspPostInit+0xb0>)
 80015e2:	f000 ffc5 	bl	8002570 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	@ 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40000400 	.word	0x40000400
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400

08001600 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	@ 0x30
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a51      	ldr	r2, [pc, #324]	@ (8001764 <HAL_UART_MspInit+0x164>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d135      	bne.n	800168e <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	4b50      	ldr	r3, [pc, #320]	@ (8001768 <HAL_UART_MspInit+0x168>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	4a4f      	ldr	r2, [pc, #316]	@ (8001768 <HAL_UART_MspInit+0x168>)
 800162c:	f043 0310 	orr.w	r3, r3, #16
 8001630:	6453      	str	r3, [r2, #68]	@ 0x44
 8001632:	4b4d      	ldr	r3, [pc, #308]	@ (8001768 <HAL_UART_MspInit+0x168>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	4b49      	ldr	r3, [pc, #292]	@ (8001768 <HAL_UART_MspInit+0x168>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a48      	ldr	r2, [pc, #288]	@ (8001768 <HAL_UART_MspInit+0x168>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b46      	ldr	r3, [pc, #280]	@ (8001768 <HAL_UART_MspInit+0x168>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_TO_ST_Pin|RX_FROM_ST_Pin;
 800165a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800165e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800166c:	2307      	movs	r3, #7
 800166e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	4619      	mov	r1, r3
 8001676:	483d      	ldr	r0, [pc, #244]	@ (800176c <HAL_UART_MspInit+0x16c>)
 8001678:	f000 ff7a 	bl	8002570 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	2025      	movs	r0, #37	@ 0x25
 8001682:	f000 fb3c 	bl	8001cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001686:	2025      	movs	r0, #37	@ 0x25
 8001688:	f000 fb55 	bl	8001d36 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800168c:	e066      	b.n	800175c <HAL_UART_MspInit+0x15c>
  else if(huart->Instance==USART2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a37      	ldr	r2, [pc, #220]	@ (8001770 <HAL_UART_MspInit+0x170>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d161      	bne.n	800175c <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	4b32      	ldr	r3, [pc, #200]	@ (8001768 <HAL_UART_MspInit+0x168>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	4a31      	ldr	r2, [pc, #196]	@ (8001768 <HAL_UART_MspInit+0x168>)
 80016a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001768 <HAL_UART_MspInit+0x168>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001768 <HAL_UART_MspInit+0x168>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001768 <HAL_UART_MspInit+0x168>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c4:	4b28      	ldr	r3, [pc, #160]	@ (8001768 <HAL_UART_MspInit+0x168>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_TX_TO_BT_Pin|UART_RX_FROM_BT_Pin;
 80016d0:	230c      	movs	r3, #12
 80016d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016e0:	2307      	movs	r3, #7
 80016e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	4820      	ldr	r0, [pc, #128]	@ (800176c <HAL_UART_MspInit+0x16c>)
 80016ec:	f000 ff40 	bl	8002570 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80016f0:	4b20      	ldr	r3, [pc, #128]	@ (8001774 <HAL_UART_MspInit+0x174>)
 80016f2:	4a21      	ldr	r2, [pc, #132]	@ (8001778 <HAL_UART_MspInit+0x178>)
 80016f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80016f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <HAL_UART_MspInit+0x174>)
 80016f8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <HAL_UART_MspInit+0x174>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001704:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <HAL_UART_MspInit+0x174>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800170a:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <HAL_UART_MspInit+0x174>)
 800170c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001710:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001712:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <HAL_UART_MspInit+0x174>)
 8001714:	2200      	movs	r2, #0
 8001716:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001718:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <HAL_UART_MspInit+0x174>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800171e:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <HAL_UART_MspInit+0x174>)
 8001720:	2200      	movs	r2, #0
 8001722:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001724:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <HAL_UART_MspInit+0x174>)
 8001726:	2200      	movs	r2, #0
 8001728:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800172a:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_UART_MspInit+0x174>)
 800172c:	2200      	movs	r2, #0
 800172e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001730:	4810      	ldr	r0, [pc, #64]	@ (8001774 <HAL_UART_MspInit+0x174>)
 8001732:	f000 fb1b 	bl	8001d6c <HAL_DMA_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <HAL_UART_MspInit+0x140>
      Error_Handler();
 800173c:	f7ff fde0 	bl	8001300 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a0c      	ldr	r2, [pc, #48]	@ (8001774 <HAL_UART_MspInit+0x174>)
 8001744:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001746:	4a0b      	ldr	r2, [pc, #44]	@ (8001774 <HAL_UART_MspInit+0x174>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	2100      	movs	r1, #0
 8001750:	2026      	movs	r0, #38	@ 0x26
 8001752:	f000 fad4 	bl	8001cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001756:	2026      	movs	r0, #38	@ 0x26
 8001758:	f000 faed 	bl	8001d36 <HAL_NVIC_EnableIRQ>
}
 800175c:	bf00      	nop
 800175e:	3730      	adds	r7, #48	@ 0x30
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40011000 	.word	0x40011000
 8001768:	40023800 	.word	0x40023800
 800176c:	40020000 	.word	0x40020000
 8001770:	40004400 	.word	0x40004400
 8001774:	20000224 	.word	0x20000224
 8001778:	40026088 	.word	0x40026088

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <NMI_Handler+0x4>

08001784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <MemManage_Handler+0x4>

08001794 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d2:	f000 f975 	bl	8001ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <DMA1_Stream5_IRQHandler+0x10>)
 80017e2:	f000 fc5b 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000224 	.word	0x20000224

080017f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <USART1_IRQHandler+0x10>)
 80017f6:	f003 fb71 	bl	8004edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000194 	.word	0x20000194

08001804 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <USART2_IRQHandler+0x10>)
 800180a:	f003 fb67 	bl	8004edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200001dc 	.word	0x200001dc

08001818 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return 1;
 800181c:	2301      	movs	r3, #1
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <_kill>:

int _kill(int pid, int sig)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001832:	f004 fe81 	bl	8006538 <__errno>
 8001836:	4603      	mov	r3, r0
 8001838:	2216      	movs	r2, #22
 800183a:	601a      	str	r2, [r3, #0]
  return -1;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <_exit>:

void _exit (int status)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001850:	f04f 31ff 	mov.w	r1, #4294967295
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ffe7 	bl	8001828 <_kill>
  while (1) {}    /* Make sure we hang here */
 800185a:	bf00      	nop
 800185c:	e7fd      	b.n	800185a <_exit+0x12>

0800185e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	e00a      	b.n	8001886 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001870:	f3af 8000 	nop.w
 8001874:	4601      	mov	r1, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	60ba      	str	r2, [r7, #8]
 800187c:	b2ca      	uxtb	r2, r1
 800187e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	dbf0      	blt.n	8001870 <_read+0x12>
  }

  return len;
 800188e:	687b      	ldr	r3, [r7, #4]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	e009      	b.n	80018be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	60ba      	str	r2, [r7, #8]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fd12 	bl	80012dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dbf1      	blt.n	80018aa <_write+0x12>
  }
  return len;
 80018c6:	687b      	ldr	r3, [r7, #4]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_close>:

int _close(int file)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018f8:	605a      	str	r2, [r3, #4]
  return 0;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_isatty>:

int _isatty(int file)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001910:	2301      	movs	r3, #1
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800191e:	b480      	push	{r7}
 8001920:	b085      	sub	sp, #20
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001940:	4a14      	ldr	r2, [pc, #80]	@ (8001994 <_sbrk+0x5c>)
 8001942:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <_sbrk+0x60>)
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800194c:	4b13      	ldr	r3, [pc, #76]	@ (800199c <_sbrk+0x64>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d102      	bne.n	800195a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001954:	4b11      	ldr	r3, [pc, #68]	@ (800199c <_sbrk+0x64>)
 8001956:	4a12      	ldr	r2, [pc, #72]	@ (80019a0 <_sbrk+0x68>)
 8001958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195a:	4b10      	ldr	r3, [pc, #64]	@ (800199c <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	429a      	cmp	r2, r3
 8001966:	d207      	bcs.n	8001978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001968:	f004 fde6 	bl	8006538 <__errno>
 800196c:	4603      	mov	r3, r0
 800196e:	220c      	movs	r2, #12
 8001970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
 8001976:	e009      	b.n	800198c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001978:	4b08      	ldr	r3, [pc, #32]	@ (800199c <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197e:	4b07      	ldr	r3, [pc, #28]	@ (800199c <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	4a05      	ldr	r2, [pc, #20]	@ (800199c <_sbrk+0x64>)
 8001988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198a:	68fb      	ldr	r3, [r7, #12]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20020000 	.word	0x20020000
 8001998:	00000400 	.word	0x00000400
 800199c:	20000318 	.word	0x20000318
 80019a0:	20000470 	.word	0x20000470

080019a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a8:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <SystemInit+0x20>)
 80019aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ae:	4a05      	ldr	r2, [pc, #20]	@ (80019c4 <SystemInit+0x20>)
 80019b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019cc:	f7ff ffea 	bl	80019a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d0:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019d2:	490d      	ldr	r1, [pc, #52]	@ (8001a08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d8:	e002      	b.n	80019e0 <LoopCopyDataInit>

080019da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019de:	3304      	adds	r3, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e4:	d3f9      	bcc.n	80019da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001a14 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ec:	e001      	b.n	80019f2 <LoopFillZerobss>

080019ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f0:	3204      	adds	r2, #4

080019f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f4:	d3fb      	bcc.n	80019ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019f6:	f004 fda5 	bl	8006544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fa:	f7ff f97d 	bl	8000cf8 <main>
  bx  lr    
 80019fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a0c:	08007438 	.word	0x08007438
  ldr r2, =_sbss
 8001a10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a14:	2000046c 	.word	0x2000046c

08001a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC_IRQHandler>
	...

08001a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a20:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0d      	ldr	r2, [pc, #52]	@ (8001a5c <HAL_Init+0x40>)
 8001a26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <HAL_Init+0x40>)
 8001a32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a38:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <HAL_Init+0x40>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a07      	ldr	r2, [pc, #28]	@ (8001a5c <HAL_Init+0x40>)
 8001a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a44:	2003      	movs	r0, #3
 8001a46:	f000 f94f 	bl	8001ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4a:	200f      	movs	r0, #15
 8001a4c:	f000 f808 	bl	8001a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a50:	f7ff fc5c 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023c00 	.word	0x40023c00

08001a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a68:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <HAL_InitTick+0x54>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <HAL_InitTick+0x58>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f967 	bl	8001d52 <HAL_SYSTICK_Config>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00e      	b.n	8001aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b0f      	cmp	r3, #15
 8001a92:	d80a      	bhi.n	8001aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a94:	2200      	movs	r2, #0
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f000 f92f 	bl	8001cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa0:	4a06      	ldr	r2, [pc, #24]	@ (8001abc <HAL_InitTick+0x5c>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	20000010 	.word	0x20000010
 8001abc:	2000000c 	.word	0x2000000c

08001ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_IncTick+0x20>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_IncTick+0x24>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <HAL_IncTick+0x24>)
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000010 	.word	0x20000010
 8001ae4:	2000031c 	.word	0x2000031c

08001ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return uwTick;
 8001aec:	4b03      	ldr	r3, [pc, #12]	@ (8001afc <HAL_GetTick+0x14>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	2000031c 	.word	0x2000031c

08001b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff ffee 	bl	8001ae8 <HAL_GetTick>
 8001b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d005      	beq.n	8001b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b44 <HAL_Delay+0x44>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b26:	bf00      	nop
 8001b28:	f7ff ffde 	bl	8001ae8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d8f7      	bhi.n	8001b28 <HAL_Delay+0x28>
  {
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000010 	.word	0x20000010

08001b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b64:	4013      	ands	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7a:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	60d3      	str	r3, [r2, #12]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b94:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	f003 0307 	and.w	r3, r3, #7
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	db0b      	blt.n	8001bd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	f003 021f 	and.w	r2, r3, #31
 8001bc4:	4907      	ldr	r1, [pc, #28]	@ (8001be4 <__NVIC_EnableIRQ+0x38>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	2001      	movs	r0, #1
 8001bce:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db0a      	blt.n	8001c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	490c      	ldr	r1, [pc, #48]	@ (8001c34 <__NVIC_SetPriority+0x4c>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	0112      	lsls	r2, r2, #4
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c10:	e00a      	b.n	8001c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4908      	ldr	r1, [pc, #32]	@ (8001c38 <__NVIC_SetPriority+0x50>)
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	3b04      	subs	r3, #4
 8001c20:	0112      	lsls	r2, r2, #4
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	440b      	add	r3, r1
 8001c26:	761a      	strb	r2, [r3, #24]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000e100 	.word	0xe000e100
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	@ 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f1c3 0307 	rsb	r3, r3, #7
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	bf28      	it	cs
 8001c5a:	2304      	movcs	r3, #4
 8001c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3304      	adds	r3, #4
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d902      	bls.n	8001c6c <NVIC_EncodePriority+0x30>
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3b03      	subs	r3, #3
 8001c6a:	e000      	b.n	8001c6e <NVIC_EncodePriority+0x32>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	401a      	ands	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	43d9      	mvns	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	4313      	orrs	r3, r2
         );
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	@ 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb4:	d301      	bcc.n	8001cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00f      	b.n	8001cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f7ff ff8e 	bl	8001be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd2:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	e000e010 	.word	0xe000e010

08001ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff29 	bl	8001b48 <__NVIC_SetPriorityGrouping>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d10:	f7ff ff3e 	bl	8001b90 <__NVIC_GetPriorityGrouping>
 8001d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	68b9      	ldr	r1, [r7, #8]
 8001d1a:	6978      	ldr	r0, [r7, #20]
 8001d1c:	f7ff ff8e 	bl	8001c3c <NVIC_EncodePriority>
 8001d20:	4602      	mov	r2, r0
 8001d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff5d 	bl	8001be8 <__NVIC_SetPriority>
}
 8001d2e:	bf00      	nop
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff31 	bl	8001bac <__NVIC_EnableIRQ>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ffa2 	bl	8001ca4 <SysTick_Config>
 8001d60:	4603      	mov	r3, r0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff feb6 	bl	8001ae8 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e099      	b.n	8001ebc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0201 	bic.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da8:	e00f      	b.n	8001dca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001daa:	f7ff fe9d 	bl	8001ae8 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d908      	bls.n	8001dca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e078      	b.n	8001ebc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1e8      	bne.n	8001daa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	4b38      	ldr	r3, [pc, #224]	@ (8001ec4 <HAL_DMA_Init+0x158>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d107      	bne.n	8001e34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f023 0307 	bic.w	r3, r3, #7
 8001e4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d117      	bne.n	8001e8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00e      	beq.n	8001e8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fb01 	bl	8002478 <DMA_CheckFifoParam>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2240      	movs	r2, #64	@ 0x40
 8001e80:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e016      	b.n	8001ebc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fab8 	bl	800240c <DMA_CalcBaseAndBitshift>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea4:	223f      	movs	r2, #63	@ 0x3f
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	f010803f 	.word	0xf010803f

08001ec8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ede:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_DMA_Start_IT+0x26>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e040      	b.n	8001f70 <HAL_DMA_Start_IT+0xa8>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d12f      	bne.n	8001f62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2202      	movs	r2, #2
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 fa4a 	bl	80023b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f20:	223f      	movs	r2, #63	@ 0x3f
 8001f22:	409a      	lsls	r2, r3
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0216 	orr.w	r2, r2, #22
 8001f36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d007      	beq.n	8001f50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0208 	orr.w	r2, r2, #8
 8001f4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	e005      	b.n	8001f6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f86:	f7ff fdaf 	bl	8001ae8 <HAL_GetTick>
 8001f8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d008      	beq.n	8001faa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2280      	movs	r2, #128	@ 0x80
 8001f9c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e052      	b.n	8002050 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0216 	bic.w	r2, r2, #22
 8001fb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <HAL_DMA_Abort+0x62>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0208 	bic.w	r2, r2, #8
 8001fe8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0201 	bic.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffa:	e013      	b.n	8002024 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ffc:	f7ff fd74 	bl	8001ae8 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b05      	cmp	r3, #5
 8002008:	d90c      	bls.n	8002024 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2220      	movs	r2, #32
 800200e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2203      	movs	r2, #3
 8002014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e015      	b.n	8002050 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1e4      	bne.n	8001ffc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002036:	223f      	movs	r2, #63	@ 0x3f
 8002038:	409a      	lsls	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d004      	beq.n	8002076 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2280      	movs	r2, #128	@ 0x80
 8002070:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e00c      	b.n	8002090 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2205      	movs	r2, #5
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0201 	bic.w	r2, r2, #1
 800208c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020a8:	4b8e      	ldr	r3, [pc, #568]	@ (80022e4 <HAL_DMA_IRQHandler+0x248>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a8e      	ldr	r2, [pc, #568]	@ (80022e8 <HAL_DMA_IRQHandler+0x24c>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0a9b      	lsrs	r3, r3, #10
 80020b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c6:	2208      	movs	r2, #8
 80020c8:	409a      	lsls	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d01a      	beq.n	8002108 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0204 	bic.w	r2, r2, #4
 80020ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f4:	2208      	movs	r2, #8
 80020f6:	409a      	lsls	r2, r3
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210c:	2201      	movs	r2, #1
 800210e:	409a      	lsls	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d012      	beq.n	800213e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00b      	beq.n	800213e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212a:	2201      	movs	r2, #1
 800212c:	409a      	lsls	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002136:	f043 0202 	orr.w	r2, r3, #2
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002142:	2204      	movs	r2, #4
 8002144:	409a      	lsls	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d012      	beq.n	8002174 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00b      	beq.n	8002174 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002160:	2204      	movs	r2, #4
 8002162:	409a      	lsls	r2, r3
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216c:	f043 0204 	orr.w	r2, r3, #4
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002178:	2210      	movs	r2, #16
 800217a:	409a      	lsls	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d043      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d03c      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002196:	2210      	movs	r2, #16
 8002198:	409a      	lsls	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d018      	beq.n	80021de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d108      	bne.n	80021cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d024      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
 80021ca:	e01f      	b.n	800220c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01b      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
 80021dc:	e016      	b.n	800220c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d107      	bne.n	80021fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0208 	bic.w	r2, r2, #8
 80021fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002210:	2220      	movs	r2, #32
 8002212:	409a      	lsls	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 808f 	beq.w	800233c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 8087 	beq.w	800233c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002232:	2220      	movs	r2, #32
 8002234:	409a      	lsls	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b05      	cmp	r3, #5
 8002244:	d136      	bne.n	80022b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0216 	bic.w	r2, r2, #22
 8002254:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002264:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	2b00      	cmp	r3, #0
 800226c:	d103      	bne.n	8002276 <HAL_DMA_IRQHandler+0x1da>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0208 	bic.w	r2, r2, #8
 8002284:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228a:	223f      	movs	r2, #63	@ 0x3f
 800228c:	409a      	lsls	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d07e      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	4798      	blx	r3
        }
        return;
 80022b2:	e079      	b.n	80023a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d01d      	beq.n	80022fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10d      	bne.n	80022ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d031      	beq.n	800233c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
 80022e0:	e02c      	b.n	800233c <HAL_DMA_IRQHandler+0x2a0>
 80022e2:	bf00      	nop
 80022e4:	20000008 	.word	0x20000008
 80022e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d023      	beq.n	800233c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	4798      	blx	r3
 80022fc:	e01e      	b.n	800233c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10f      	bne.n	800232c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0210 	bic.w	r2, r2, #16
 800231a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002340:	2b00      	cmp	r3, #0
 8002342:	d032      	beq.n	80023aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d022      	beq.n	8002396 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2205      	movs	r2, #5
 8002354:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	3301      	adds	r3, #1
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	429a      	cmp	r2, r3
 8002372:	d307      	bcc.n	8002384 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f2      	bne.n	8002368 <HAL_DMA_IRQHandler+0x2cc>
 8002382:	e000      	b.n	8002386 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002384:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	4798      	blx	r3
 80023a6:	e000      	b.n	80023aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80023a8:	bf00      	nop
    }
  }
}
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80023cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b40      	cmp	r3, #64	@ 0x40
 80023dc:	d108      	bne.n	80023f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023ee:	e007      	b.n	8002400 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	60da      	str	r2, [r3, #12]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	3b10      	subs	r3, #16
 800241c:	4a14      	ldr	r2, [pc, #80]	@ (8002470 <DMA_CalcBaseAndBitshift+0x64>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002426:	4a13      	ldr	r2, [pc, #76]	@ (8002474 <DMA_CalcBaseAndBitshift+0x68>)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b03      	cmp	r3, #3
 8002438:	d909      	bls.n	800244e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002442:	f023 0303 	bic.w	r3, r3, #3
 8002446:	1d1a      	adds	r2, r3, #4
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	659a      	str	r2, [r3, #88]	@ 0x58
 800244c:	e007      	b.n	800245e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002456:	f023 0303 	bic.w	r3, r3, #3
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	aaaaaaab 	.word	0xaaaaaaab
 8002474:	0800723c 	.word	0x0800723c

08002478 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002488:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d11f      	bne.n	80024d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d856      	bhi.n	8002546 <DMA_CheckFifoParam+0xce>
 8002498:	a201      	add	r2, pc, #4	@ (adr r2, 80024a0 <DMA_CheckFifoParam+0x28>)
 800249a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249e:	bf00      	nop
 80024a0:	080024b1 	.word	0x080024b1
 80024a4:	080024c3 	.word	0x080024c3
 80024a8:	080024b1 	.word	0x080024b1
 80024ac:	08002547 	.word	0x08002547
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d046      	beq.n	800254a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c0:	e043      	b.n	800254a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024ca:	d140      	bne.n	800254e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d0:	e03d      	b.n	800254e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024da:	d121      	bne.n	8002520 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d837      	bhi.n	8002552 <DMA_CheckFifoParam+0xda>
 80024e2:	a201      	add	r2, pc, #4	@ (adr r2, 80024e8 <DMA_CheckFifoParam+0x70>)
 80024e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e8:	080024f9 	.word	0x080024f9
 80024ec:	080024ff 	.word	0x080024ff
 80024f0:	080024f9 	.word	0x080024f9
 80024f4:	08002511 	.word	0x08002511
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
      break;
 80024fc:	e030      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002502:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d025      	beq.n	8002556 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800250e:	e022      	b.n	8002556 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002514:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002518:	d11f      	bne.n	800255a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800251e:	e01c      	b.n	800255a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d903      	bls.n	800252e <DMA_CheckFifoParam+0xb6>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d003      	beq.n	8002534 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800252c:	e018      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
      break;
 8002532:	e015      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002538:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00e      	beq.n	800255e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      break;
 8002544:	e00b      	b.n	800255e <DMA_CheckFifoParam+0xe6>
      break;
 8002546:	bf00      	nop
 8002548:	e00a      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
      break;
 800254a:	bf00      	nop
 800254c:	e008      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
      break;
 800254e:	bf00      	nop
 8002550:	e006      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
      break;
 8002552:	bf00      	nop
 8002554:	e004      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
      break;
 8002556:	bf00      	nop
 8002558:	e002      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
      break;   
 800255a:	bf00      	nop
 800255c:	e000      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
      break;
 800255e:	bf00      	nop
    }
  } 
  
  return status; 
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop

08002570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	@ 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	e159      	b.n	8002840 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800258c:	2201      	movs	r2, #1
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	f040 8148 	bne.w	800283a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d005      	beq.n	80025c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d130      	bne.n	8002624 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2203      	movs	r2, #3
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f8:	2201      	movs	r2, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 0201 	and.w	r2, r3, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b03      	cmp	r3, #3
 800262e:	d017      	beq.n	8002660 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d123      	bne.n	80026b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	08da      	lsrs	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3208      	adds	r2, #8
 8002674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	220f      	movs	r2, #15
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	08da      	lsrs	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3208      	adds	r2, #8
 80026ae:	69b9      	ldr	r1, [r7, #24]
 80026b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0203 	and.w	r2, r3, #3
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80a2 	beq.w	800283a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b57      	ldr	r3, [pc, #348]	@ (8002858 <HAL_GPIO_Init+0x2e8>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	4a56      	ldr	r2, [pc, #344]	@ (8002858 <HAL_GPIO_Init+0x2e8>)
 8002700:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002704:	6453      	str	r3, [r2, #68]	@ 0x44
 8002706:	4b54      	ldr	r3, [pc, #336]	@ (8002858 <HAL_GPIO_Init+0x2e8>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002712:	4a52      	ldr	r2, [pc, #328]	@ (800285c <HAL_GPIO_Init+0x2ec>)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	3302      	adds	r3, #2
 800271a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	220f      	movs	r2, #15
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a49      	ldr	r2, [pc, #292]	@ (8002860 <HAL_GPIO_Init+0x2f0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d019      	beq.n	8002772 <HAL_GPIO_Init+0x202>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a48      	ldr	r2, [pc, #288]	@ (8002864 <HAL_GPIO_Init+0x2f4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <HAL_GPIO_Init+0x1fe>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a47      	ldr	r2, [pc, #284]	@ (8002868 <HAL_GPIO_Init+0x2f8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00d      	beq.n	800276a <HAL_GPIO_Init+0x1fa>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a46      	ldr	r2, [pc, #280]	@ (800286c <HAL_GPIO_Init+0x2fc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d007      	beq.n	8002766 <HAL_GPIO_Init+0x1f6>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a45      	ldr	r2, [pc, #276]	@ (8002870 <HAL_GPIO_Init+0x300>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_GPIO_Init+0x1f2>
 800275e:	2304      	movs	r3, #4
 8002760:	e008      	b.n	8002774 <HAL_GPIO_Init+0x204>
 8002762:	2307      	movs	r3, #7
 8002764:	e006      	b.n	8002774 <HAL_GPIO_Init+0x204>
 8002766:	2303      	movs	r3, #3
 8002768:	e004      	b.n	8002774 <HAL_GPIO_Init+0x204>
 800276a:	2302      	movs	r3, #2
 800276c:	e002      	b.n	8002774 <HAL_GPIO_Init+0x204>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_GPIO_Init+0x204>
 8002772:	2300      	movs	r3, #0
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	f002 0203 	and.w	r2, r2, #3
 800277a:	0092      	lsls	r2, r2, #2
 800277c:	4093      	lsls	r3, r2
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002784:	4935      	ldr	r1, [pc, #212]	@ (800285c <HAL_GPIO_Init+0x2ec>)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	3302      	adds	r3, #2
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002792:	4b38      	ldr	r3, [pc, #224]	@ (8002874 <HAL_GPIO_Init+0x304>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002874 <HAL_GPIO_Init+0x304>)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002874 <HAL_GPIO_Init+0x304>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e0:	4a24      	ldr	r2, [pc, #144]	@ (8002874 <HAL_GPIO_Init+0x304>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027e6:	4b23      	ldr	r3, [pc, #140]	@ (8002874 <HAL_GPIO_Init+0x304>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800280a:	4a1a      	ldr	r2, [pc, #104]	@ (8002874 <HAL_GPIO_Init+0x304>)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002810:	4b18      	ldr	r3, [pc, #96]	@ (8002874 <HAL_GPIO_Init+0x304>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002834:	4a0f      	ldr	r2, [pc, #60]	@ (8002874 <HAL_GPIO_Init+0x304>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3301      	adds	r3, #1
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b0f      	cmp	r3, #15
 8002844:	f67f aea2 	bls.w	800258c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3724      	adds	r7, #36	@ 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	40013800 	.word	0x40013800
 8002860:	40020000 	.word	0x40020000
 8002864:	40020400 	.word	0x40020400
 8002868:	40020800 	.word	0x40020800
 800286c:	40020c00 	.word	0x40020c00
 8002870:	40021000 	.word	0x40021000
 8002874:	40013c00 	.word	0x40013c00

08002878 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	e0bb      	b.n	8002a0c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002894:	2201      	movs	r2, #1
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	f040 80ab 	bne.w	8002a06 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80028b0:	4a5c      	ldr	r2, [pc, #368]	@ (8002a24 <HAL_GPIO_DeInit+0x1ac>)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	089b      	lsrs	r3, r3, #2
 80028b6:	3302      	adds	r3, #2
 80028b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028bc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	220f      	movs	r2, #15
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	4013      	ands	r3, r2
 80028d0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a54      	ldr	r2, [pc, #336]	@ (8002a28 <HAL_GPIO_DeInit+0x1b0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d019      	beq.n	800290e <HAL_GPIO_DeInit+0x96>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a53      	ldr	r2, [pc, #332]	@ (8002a2c <HAL_GPIO_DeInit+0x1b4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d013      	beq.n	800290a <HAL_GPIO_DeInit+0x92>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a52      	ldr	r2, [pc, #328]	@ (8002a30 <HAL_GPIO_DeInit+0x1b8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00d      	beq.n	8002906 <HAL_GPIO_DeInit+0x8e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a51      	ldr	r2, [pc, #324]	@ (8002a34 <HAL_GPIO_DeInit+0x1bc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d007      	beq.n	8002902 <HAL_GPIO_DeInit+0x8a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a50      	ldr	r2, [pc, #320]	@ (8002a38 <HAL_GPIO_DeInit+0x1c0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d101      	bne.n	80028fe <HAL_GPIO_DeInit+0x86>
 80028fa:	2304      	movs	r3, #4
 80028fc:	e008      	b.n	8002910 <HAL_GPIO_DeInit+0x98>
 80028fe:	2307      	movs	r3, #7
 8002900:	e006      	b.n	8002910 <HAL_GPIO_DeInit+0x98>
 8002902:	2303      	movs	r3, #3
 8002904:	e004      	b.n	8002910 <HAL_GPIO_DeInit+0x98>
 8002906:	2302      	movs	r3, #2
 8002908:	e002      	b.n	8002910 <HAL_GPIO_DeInit+0x98>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_GPIO_DeInit+0x98>
 800290e:	2300      	movs	r3, #0
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	f002 0203 	and.w	r2, r2, #3
 8002916:	0092      	lsls	r2, r2, #2
 8002918:	4093      	lsls	r3, r2
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	429a      	cmp	r2, r3
 800291e:	d132      	bne.n	8002986 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002920:	4b46      	ldr	r3, [pc, #280]	@ (8002a3c <HAL_GPIO_DeInit+0x1c4>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	43db      	mvns	r3, r3
 8002928:	4944      	ldr	r1, [pc, #272]	@ (8002a3c <HAL_GPIO_DeInit+0x1c4>)
 800292a:	4013      	ands	r3, r2
 800292c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800292e:	4b43      	ldr	r3, [pc, #268]	@ (8002a3c <HAL_GPIO_DeInit+0x1c4>)
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	43db      	mvns	r3, r3
 8002936:	4941      	ldr	r1, [pc, #260]	@ (8002a3c <HAL_GPIO_DeInit+0x1c4>)
 8002938:	4013      	ands	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800293c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a3c <HAL_GPIO_DeInit+0x1c4>)
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	43db      	mvns	r3, r3
 8002944:	493d      	ldr	r1, [pc, #244]	@ (8002a3c <HAL_GPIO_DeInit+0x1c4>)
 8002946:	4013      	ands	r3, r2
 8002948:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800294a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a3c <HAL_GPIO_DeInit+0x1c4>)
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	43db      	mvns	r3, r3
 8002952:	493a      	ldr	r1, [pc, #232]	@ (8002a3c <HAL_GPIO_DeInit+0x1c4>)
 8002954:	4013      	ands	r3, r2
 8002956:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002968:	4a2e      	ldr	r2, [pc, #184]	@ (8002a24 <HAL_GPIO_DeInit+0x1ac>)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	43da      	mvns	r2, r3
 8002978:	482a      	ldr	r0, [pc, #168]	@ (8002a24 <HAL_GPIO_DeInit+0x1ac>)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	400a      	ands	r2, r1
 8002980:	3302      	adds	r3, #2
 8002982:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	2103      	movs	r1, #3
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	401a      	ands	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	08da      	lsrs	r2, r3, #3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3208      	adds	r2, #8
 80029a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	220f      	movs	r2, #15
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	08d2      	lsrs	r2, r2, #3
 80029bc:	4019      	ands	r1, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3208      	adds	r2, #8
 80029c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	2103      	movs	r1, #3
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	401a      	ands	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	2101      	movs	r1, #1
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	401a      	ands	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	2103      	movs	r1, #3
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	401a      	ands	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b0f      	cmp	r3, #15
 8002a10:	f67f af40 	bls.w	8002894 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40013800 	.word	0x40013800
 8002a28:	40020000 	.word	0x40020000
 8002a2c:	40020400 	.word	0x40020400
 8002a30:	40020800 	.word	0x40020800
 8002a34:	40020c00 	.word	0x40020c00
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40013c00 	.word	0x40013c00

08002a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a50:	787b      	ldrb	r3, [r7, #1]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a56:	887a      	ldrh	r2, [r7, #2]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a5c:	e003      	b.n	8002a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a5e:	887b      	ldrh	r3, [r7, #2]
 8002a60:	041a      	lsls	r2, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	619a      	str	r2, [r3, #24]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a84:	887a      	ldrh	r2, [r7, #2]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	041a      	lsls	r2, r3, #16
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	43d9      	mvns	r1, r3
 8002a90:	887b      	ldrh	r3, [r7, #2]
 8002a92:	400b      	ands	r3, r1
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	619a      	str	r2, [r3, #24]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e12b      	b.n	8002d12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe fc44 	bl	800135c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2224      	movs	r2, #36	@ 0x24
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0201 	bic.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002afa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b0c:	f001 fc50 	bl	80043b0 <HAL_RCC_GetPCLK1Freq>
 8002b10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4a81      	ldr	r2, [pc, #516]	@ (8002d1c <HAL_I2C_Init+0x274>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d807      	bhi.n	8002b2c <HAL_I2C_Init+0x84>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4a80      	ldr	r2, [pc, #512]	@ (8002d20 <HAL_I2C_Init+0x278>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	bf94      	ite	ls
 8002b24:	2301      	movls	r3, #1
 8002b26:	2300      	movhi	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e006      	b.n	8002b3a <HAL_I2C_Init+0x92>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4a7d      	ldr	r2, [pc, #500]	@ (8002d24 <HAL_I2C_Init+0x27c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	bf94      	ite	ls
 8002b34:	2301      	movls	r3, #1
 8002b36:	2300      	movhi	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e0e7      	b.n	8002d12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4a78      	ldr	r2, [pc, #480]	@ (8002d28 <HAL_I2C_Init+0x280>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	0c9b      	lsrs	r3, r3, #18
 8002b4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a6a      	ldr	r2, [pc, #424]	@ (8002d1c <HAL_I2C_Init+0x274>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d802      	bhi.n	8002b7c <HAL_I2C_Init+0xd4>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	e009      	b.n	8002b90 <HAL_I2C_Init+0xe8>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b82:	fb02 f303 	mul.w	r3, r2, r3
 8002b86:	4a69      	ldr	r2, [pc, #420]	@ (8002d2c <HAL_I2C_Init+0x284>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	099b      	lsrs	r3, r3, #6
 8002b8e:	3301      	adds	r3, #1
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	430b      	orrs	r3, r1
 8002b96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ba2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	495c      	ldr	r1, [pc, #368]	@ (8002d1c <HAL_I2C_Init+0x274>)
 8002bac:	428b      	cmp	r3, r1
 8002bae:	d819      	bhi.n	8002be4 <HAL_I2C_Init+0x13c>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1e59      	subs	r1, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bbe:	1c59      	adds	r1, r3, #1
 8002bc0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002bc4:	400b      	ands	r3, r1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_I2C_Init+0x138>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1e59      	subs	r1, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bd8:	3301      	adds	r3, #1
 8002bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bde:	e051      	b.n	8002c84 <HAL_I2C_Init+0x1dc>
 8002be0:	2304      	movs	r3, #4
 8002be2:	e04f      	b.n	8002c84 <HAL_I2C_Init+0x1dc>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d111      	bne.n	8002c10 <HAL_I2C_Init+0x168>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1e58      	subs	r0, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	440b      	add	r3, r1
 8002bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	e012      	b.n	8002c36 <HAL_I2C_Init+0x18e>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1e58      	subs	r0, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6859      	ldr	r1, [r3, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	0099      	lsls	r1, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c26:	3301      	adds	r3, #1
 8002c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_I2C_Init+0x196>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e022      	b.n	8002c84 <HAL_I2C_Init+0x1dc>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10e      	bne.n	8002c64 <HAL_I2C_Init+0x1bc>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1e58      	subs	r0, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6859      	ldr	r1, [r3, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	440b      	add	r3, r1
 8002c54:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c62:	e00f      	b.n	8002c84 <HAL_I2C_Init+0x1dc>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1e58      	subs	r0, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	0099      	lsls	r1, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	6809      	ldr	r1, [r1, #0]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69da      	ldr	r2, [r3, #28]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002cb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6911      	ldr	r1, [r2, #16]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68d2      	ldr	r2, [r2, #12]
 8002cbe:	4311      	orrs	r1, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	000186a0 	.word	0x000186a0
 8002d20:	001e847f 	.word	0x001e847f
 8002d24:	003d08ff 	.word	0x003d08ff
 8002d28:	431bde83 	.word	0x431bde83
 8002d2c:	10624dd3 	.word	0x10624dd3

08002d30 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e021      	b.n	8002d86 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2224      	movs	r2, #36	@ 0x24
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fe fb9a 	bl	8001494 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	4608      	mov	r0, r1
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4603      	mov	r3, r0
 8002da0:	817b      	strh	r3, [r7, #10]
 8002da2:	460b      	mov	r3, r1
 8002da4:	813b      	strh	r3, [r7, #8]
 8002da6:	4613      	mov	r3, r2
 8002da8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002daa:	f7fe fe9d 	bl	8001ae8 <HAL_GetTick>
 8002dae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	f040 80d9 	bne.w	8002f70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	2319      	movs	r3, #25
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	496d      	ldr	r1, [pc, #436]	@ (8002f7c <HAL_I2C_Mem_Write+0x1ec>)
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fc8b 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e0cc      	b.n	8002f72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_I2C_Mem_Write+0x56>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e0c5      	b.n	8002f72 <HAL_I2C_Mem_Write+0x1e2>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d007      	beq.n	8002e0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2221      	movs	r2, #33	@ 0x21
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2240      	movs	r2, #64	@ 0x40
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a3a      	ldr	r2, [r7, #32]
 8002e36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4a4d      	ldr	r2, [pc, #308]	@ (8002f80 <HAL_I2C_Mem_Write+0x1f0>)
 8002e4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e4e:	88f8      	ldrh	r0, [r7, #6]
 8002e50:	893a      	ldrh	r2, [r7, #8]
 8002e52:	8979      	ldrh	r1, [r7, #10]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fac2 	bl	80033e8 <I2C_RequestMemoryWrite>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d052      	beq.n	8002f10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e081      	b.n	8002f72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fd50 	bl	8003918 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00d      	beq.n	8002e9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d107      	bne.n	8002e96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e06b      	b.n	8002f72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9e:	781a      	ldrb	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d11b      	bne.n	8002f10 <HAL_I2C_Mem_Write+0x180>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d017      	beq.n	8002f10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	781a      	ldrb	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1aa      	bne.n	8002e6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 fd43 	bl	80039a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00d      	beq.n	8002f44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d107      	bne.n	8002f40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e016      	b.n	8002f72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e000      	b.n	8002f72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f70:	2302      	movs	r3, #2
  }
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	00100002 	.word	0x00100002
 8002f80:	ffff0000 	.word	0xffff0000

08002f84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08c      	sub	sp, #48	@ 0x30
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	4608      	mov	r0, r1
 8002f8e:	4611      	mov	r1, r2
 8002f90:	461a      	mov	r2, r3
 8002f92:	4603      	mov	r3, r0
 8002f94:	817b      	strh	r3, [r7, #10]
 8002f96:	460b      	mov	r3, r1
 8002f98:	813b      	strh	r3, [r7, #8]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f9e:	f7fe fda3 	bl	8001ae8 <HAL_GetTick>
 8002fa2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	f040 8214 	bne.w	80033da <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	2319      	movs	r3, #25
 8002fb8:	2201      	movs	r2, #1
 8002fba:	497b      	ldr	r1, [pc, #492]	@ (80031a8 <HAL_I2C_Mem_Read+0x224>)
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fb91 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e207      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_I2C_Mem_Read+0x56>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e200      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d007      	beq.n	8003000 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800300e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2222      	movs	r2, #34	@ 0x22
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2240      	movs	r2, #64	@ 0x40
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800302a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003030:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a5b      	ldr	r2, [pc, #364]	@ (80031ac <HAL_I2C_Mem_Read+0x228>)
 8003040:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003042:	88f8      	ldrh	r0, [r7, #6]
 8003044:	893a      	ldrh	r2, [r7, #8]
 8003046:	8979      	ldrh	r1, [r7, #10]
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	4603      	mov	r3, r0
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa5e 	bl	8003514 <I2C_RequestMemoryRead>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e1bc      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003066:	2b00      	cmp	r3, #0
 8003068:	d113      	bne.n	8003092 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306a:	2300      	movs	r3, #0
 800306c:	623b      	str	r3, [r7, #32]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	623b      	str	r3, [r7, #32]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	623b      	str	r3, [r7, #32]
 800307e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e190      	b.n	80033b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003096:	2b01      	cmp	r3, #1
 8003098:	d11b      	bne.n	80030d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e170      	b.n	80033b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d11b      	bne.n	8003112 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	e150      	b.n	80033b4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003128:	e144      	b.n	80033b4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312e:	2b03      	cmp	r3, #3
 8003130:	f200 80f1 	bhi.w	8003316 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003138:	2b01      	cmp	r3, #1
 800313a:	d123      	bne.n	8003184 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800313c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800313e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 fc79 	bl	8003a38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e145      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003182:	e117      	b.n	80033b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003188:	2b02      	cmp	r3, #2
 800318a:	d14e      	bne.n	800322a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800318c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003192:	2200      	movs	r2, #0
 8003194:	4906      	ldr	r1, [pc, #24]	@ (80031b0 <HAL_I2C_Mem_Read+0x22c>)
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 faa4 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e11a      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
 80031a6:	bf00      	nop
 80031a8:	00100002 	.word	0x00100002
 80031ac:	ffff0000 	.word	0xffff0000
 80031b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003228:	e0c4      	b.n	80033b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003230:	2200      	movs	r2, #0
 8003232:	496c      	ldr	r1, [pc, #432]	@ (80033e4 <HAL_I2C_Mem_Read+0x460>)
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 fa55 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0cb      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328c:	2200      	movs	r2, #0
 800328e:	4955      	ldr	r1, [pc, #340]	@ (80033e4 <HAL_I2C_Mem_Read+0x460>)
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fa27 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e09d      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003314:	e04e      	b.n	80033b4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003318:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fb8c 	bl	8003a38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e058      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b04      	cmp	r3, #4
 8003368:	d124      	bne.n	80033b4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336e:	2b03      	cmp	r3, #3
 8003370:	d107      	bne.n	8003382 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003380:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f47f aeb6 	bne.w	800312a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80033da:	2302      	movs	r3, #2
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3728      	adds	r7, #40	@ 0x28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	00010004 	.word	0x00010004

080033e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	4608      	mov	r0, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	817b      	strh	r3, [r7, #10]
 80033fa:	460b      	mov	r3, r1
 80033fc:	813b      	strh	r3, [r7, #8]
 80033fe:	4613      	mov	r3, r2
 8003400:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003410:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	2200      	movs	r2, #0
 800341a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f960 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00d      	beq.n	8003446 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003438:	d103      	bne.n	8003442 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003440:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e05f      	b.n	8003506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003446:	897b      	ldrh	r3, [r7, #10]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003454:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	6a3a      	ldr	r2, [r7, #32]
 800345a:	492d      	ldr	r1, [pc, #180]	@ (8003510 <I2C_RequestMemoryWrite+0x128>)
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f9bb 	bl	80037d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e04c      	b.n	8003506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003484:	6a39      	ldr	r1, [r7, #32]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 fa46 	bl	8003918 <I2C_WaitOnTXEFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00d      	beq.n	80034ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	2b04      	cmp	r3, #4
 8003498:	d107      	bne.n	80034aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e02b      	b.n	8003506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d105      	bne.n	80034c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034b4:	893b      	ldrh	r3, [r7, #8]
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	611a      	str	r2, [r3, #16]
 80034be:	e021      	b.n	8003504 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034c0:	893b      	ldrh	r3, [r7, #8]
 80034c2:	0a1b      	lsrs	r3, r3, #8
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d0:	6a39      	ldr	r1, [r7, #32]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fa20 	bl	8003918 <I2C_WaitOnTXEFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00d      	beq.n	80034fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d107      	bne.n	80034f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e005      	b.n	8003506 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034fa:	893b      	ldrh	r3, [r7, #8]
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	00010002 	.word	0x00010002

08003514 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	4608      	mov	r0, r1
 800351e:	4611      	mov	r1, r2
 8003520:	461a      	mov	r2, r3
 8003522:	4603      	mov	r3, r0
 8003524:	817b      	strh	r3, [r7, #10]
 8003526:	460b      	mov	r3, r1
 8003528:	813b      	strh	r3, [r7, #8]
 800352a:	4613      	mov	r3, r2
 800352c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800353c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800354c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	2200      	movs	r2, #0
 8003556:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f8c2 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00d      	beq.n	8003582 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003574:	d103      	bne.n	800357e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800357c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e0aa      	b.n	80036d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003582:	897b      	ldrh	r3, [r7, #10]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003590:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	6a3a      	ldr	r2, [r7, #32]
 8003596:	4952      	ldr	r1, [pc, #328]	@ (80036e0 <I2C_RequestMemoryRead+0x1cc>)
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f91d 	bl	80037d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e097      	b.n	80036d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c0:	6a39      	ldr	r1, [r7, #32]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f9a8 	bl	8003918 <I2C_WaitOnTXEFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d107      	bne.n	80035e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e076      	b.n	80036d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d105      	bne.n	80035fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035f0:	893b      	ldrh	r3, [r7, #8]
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	611a      	str	r2, [r3, #16]
 80035fa:	e021      	b.n	8003640 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035fc:	893b      	ldrh	r3, [r7, #8]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	b29b      	uxth	r3, r3
 8003602:	b2da      	uxtb	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800360a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360c:	6a39      	ldr	r1, [r7, #32]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 f982 	bl	8003918 <I2C_WaitOnTXEFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00d      	beq.n	8003636 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	2b04      	cmp	r3, #4
 8003620:	d107      	bne.n	8003632 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003630:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e050      	b.n	80036d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003636:	893b      	ldrh	r3, [r7, #8]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003642:	6a39      	ldr	r1, [r7, #32]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f967 	bl	8003918 <I2C_WaitOnTXEFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	2b04      	cmp	r3, #4
 8003656:	d107      	bne.n	8003668 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003666:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e035      	b.n	80036d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800367a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	2200      	movs	r2, #0
 8003684:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f82b 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00d      	beq.n	80036b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036a2:	d103      	bne.n	80036ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e013      	b.n	80036d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036b0:	897b      	ldrh	r3, [r7, #10]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	6a3a      	ldr	r2, [r7, #32]
 80036c4:	4906      	ldr	r1, [pc, #24]	@ (80036e0 <I2C_RequestMemoryRead+0x1cc>)
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f886 	bl	80037d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	00010002 	.word	0x00010002

080036e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f4:	e048      	b.n	8003788 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d044      	beq.n	8003788 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7fe f9f3 	bl	8001ae8 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <I2C_WaitOnFlagUntilTimeout+0x30>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d139      	bne.n	8003788 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	0c1b      	lsrs	r3, r3, #16
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b01      	cmp	r3, #1
 800371c:	d10d      	bne.n	800373a <I2C_WaitOnFlagUntilTimeout+0x56>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	43da      	mvns	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4013      	ands	r3, r2
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf0c      	ite	eq
 8003730:	2301      	moveq	r3, #1
 8003732:	2300      	movne	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	461a      	mov	r2, r3
 8003738:	e00c      	b.n	8003754 <I2C_WaitOnFlagUntilTimeout+0x70>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	43da      	mvns	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4013      	ands	r3, r2
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	bf0c      	ite	eq
 800374c:	2301      	moveq	r3, #1
 800374e:	2300      	movne	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	429a      	cmp	r2, r3
 8003758:	d116      	bne.n	8003788 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e023      	b.n	80037d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	0c1b      	lsrs	r3, r3, #16
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b01      	cmp	r3, #1
 8003790:	d10d      	bne.n	80037ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	43da      	mvns	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4013      	ands	r3, r2
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf0c      	ite	eq
 80037a4:	2301      	moveq	r3, #1
 80037a6:	2300      	movne	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	e00c      	b.n	80037c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	43da      	mvns	r2, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	4013      	ands	r3, r2
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	bf0c      	ite	eq
 80037c0:	2301      	moveq	r3, #1
 80037c2:	2300      	movne	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d093      	beq.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037e6:	e071      	b.n	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f6:	d123      	bne.n	8003840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003806:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003810:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	f043 0204 	orr.w	r2, r3, #4
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e067      	b.n	8003910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d041      	beq.n	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003848:	f7fe f94e 	bl	8001ae8 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	429a      	cmp	r2, r3
 8003856:	d302      	bcc.n	800385e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d136      	bne.n	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	d10c      	bne.n	8003882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	43da      	mvns	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4013      	ands	r3, r2
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	bf14      	ite	ne
 800387a:	2301      	movne	r3, #1
 800387c:	2300      	moveq	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	e00b      	b.n	800389a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	43da      	mvns	r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	4013      	ands	r3, r2
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf14      	ite	ne
 8003894:	2301      	movne	r3, #1
 8003896:	2300      	moveq	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d016      	beq.n	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	f043 0220 	orr.w	r2, r3, #32
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e021      	b.n	8003910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	0c1b      	lsrs	r3, r3, #16
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d10c      	bne.n	80038f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	43da      	mvns	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4013      	ands	r3, r2
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf14      	ite	ne
 80038e8:	2301      	movne	r3, #1
 80038ea:	2300      	moveq	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	e00b      	b.n	8003908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	43da      	mvns	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4013      	ands	r3, r2
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bf14      	ite	ne
 8003902:	2301      	movne	r3, #1
 8003904:	2300      	moveq	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	f47f af6d 	bne.w	80037e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003924:	e034      	b.n	8003990 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f8e3 	bl	8003af2 <I2C_IsAcknowledgeFailed>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e034      	b.n	80039a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393c:	d028      	beq.n	8003990 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393e:	f7fe f8d3 	bl	8001ae8 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	429a      	cmp	r2, r3
 800394c:	d302      	bcc.n	8003954 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d11d      	bne.n	8003990 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395e:	2b80      	cmp	r3, #128	@ 0x80
 8003960:	d016      	beq.n	8003990 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	f043 0220 	orr.w	r2, r3, #32
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e007      	b.n	80039a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800399a:	2b80      	cmp	r3, #128	@ 0x80
 800399c:	d1c3      	bne.n	8003926 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039b4:	e034      	b.n	8003a20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f89b 	bl	8003af2 <I2C_IsAcknowledgeFailed>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e034      	b.n	8003a30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d028      	beq.n	8003a20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ce:	f7fe f88b 	bl	8001ae8 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d302      	bcc.n	80039e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d11d      	bne.n	8003a20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d016      	beq.n	8003a20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	f043 0220 	orr.w	r2, r3, #32
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e007      	b.n	8003a30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d1c3      	bne.n	80039b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a44:	e049      	b.n	8003ada <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d119      	bne.n	8003a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f06f 0210 	mvn.w	r2, #16
 8003a5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e030      	b.n	8003aea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a88:	f7fe f82e 	bl	8001ae8 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d302      	bcc.n	8003a9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d11d      	bne.n	8003ada <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa8:	2b40      	cmp	r3, #64	@ 0x40
 8003aaa:	d016      	beq.n	8003ada <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	f043 0220 	orr.w	r2, r3, #32
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e007      	b.n	8003aea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae4:	2b40      	cmp	r3, #64	@ 0x40
 8003ae6:	d1ae      	bne.n	8003a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b08:	d11b      	bne.n	8003b42 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b12:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	f043 0204 	orr.w	r2, r3, #4
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e267      	b.n	8004032 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d075      	beq.n	8003c5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b6e:	4b88      	ldr	r3, [pc, #544]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d00c      	beq.n	8003b94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b7a:	4b85      	ldr	r3, [pc, #532]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d112      	bne.n	8003bac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b86:	4b82      	ldr	r3, [pc, #520]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b92:	d10b      	bne.n	8003bac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b94:	4b7e      	ldr	r3, [pc, #504]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d05b      	beq.n	8003c58 <HAL_RCC_OscConfig+0x108>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d157      	bne.n	8003c58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e242      	b.n	8004032 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb4:	d106      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x74>
 8003bb6:	4b76      	ldr	r3, [pc, #472]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a75      	ldr	r2, [pc, #468]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e01d      	b.n	8003c00 <HAL_RCC_OscConfig+0xb0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bcc:	d10c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x98>
 8003bce:	4b70      	ldr	r3, [pc, #448]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a6f      	ldr	r2, [pc, #444]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	4b6d      	ldr	r3, [pc, #436]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a6c      	ldr	r2, [pc, #432]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e00b      	b.n	8003c00 <HAL_RCC_OscConfig+0xb0>
 8003be8:	4b69      	ldr	r3, [pc, #420]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a68      	ldr	r2, [pc, #416]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003bee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	4b66      	ldr	r3, [pc, #408]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a65      	ldr	r2, [pc, #404]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003bfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d013      	beq.n	8003c30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c08:	f7fd ff6e 	bl	8001ae8 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c10:	f7fd ff6a 	bl	8001ae8 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	@ 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e207      	b.n	8004032 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c22:	4b5b      	ldr	r3, [pc, #364]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0xc0>
 8003c2e:	e014      	b.n	8003c5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c30:	f7fd ff5a 	bl	8001ae8 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c38:	f7fd ff56 	bl	8001ae8 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b64      	cmp	r3, #100	@ 0x64
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e1f3      	b.n	8004032 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c4a:	4b51      	ldr	r3, [pc, #324]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f0      	bne.n	8003c38 <HAL_RCC_OscConfig+0xe8>
 8003c56:	e000      	b.n	8003c5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d063      	beq.n	8003d2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c66:	4b4a      	ldr	r3, [pc, #296]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00b      	beq.n	8003c8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c72:	4b47      	ldr	r3, [pc, #284]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d11c      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c7e:	4b44      	ldr	r3, [pc, #272]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d116      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8a:	4b41      	ldr	r3, [pc, #260]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d005      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x152>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d001      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e1c7      	b.n	8004032 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4937      	ldr	r1, [pc, #220]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb6:	e03a      	b.n	8003d2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d020      	beq.n	8003d02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cc0:	4b34      	ldr	r3, [pc, #208]	@ (8003d94 <HAL_RCC_OscConfig+0x244>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc6:	f7fd ff0f 	bl	8001ae8 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cce:	f7fd ff0b 	bl	8001ae8 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e1a8      	b.n	8004032 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0f0      	beq.n	8003cce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cec:	4b28      	ldr	r3, [pc, #160]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4925      	ldr	r1, [pc, #148]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	600b      	str	r3, [r1, #0]
 8003d00:	e015      	b.n	8003d2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d02:	4b24      	ldr	r3, [pc, #144]	@ (8003d94 <HAL_RCC_OscConfig+0x244>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fd feee 	bl	8001ae8 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d10:	f7fd feea 	bl	8001ae8 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e187      	b.n	8004032 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d22:	4b1b      	ldr	r3, [pc, #108]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d036      	beq.n	8003da8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d016      	beq.n	8003d70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d42:	4b15      	ldr	r3, [pc, #84]	@ (8003d98 <HAL_RCC_OscConfig+0x248>)
 8003d44:	2201      	movs	r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d48:	f7fd fece 	bl	8001ae8 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d50:	f7fd feca 	bl	8001ae8 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e167      	b.n	8004032 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d62:	4b0b      	ldr	r3, [pc, #44]	@ (8003d90 <HAL_RCC_OscConfig+0x240>)
 8003d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCC_OscConfig+0x200>
 8003d6e:	e01b      	b.n	8003da8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d70:	4b09      	ldr	r3, [pc, #36]	@ (8003d98 <HAL_RCC_OscConfig+0x248>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d76:	f7fd feb7 	bl	8001ae8 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d7c:	e00e      	b.n	8003d9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d7e:	f7fd feb3 	bl	8001ae8 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d907      	bls.n	8003d9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e150      	b.n	8004032 <HAL_RCC_OscConfig+0x4e2>
 8003d90:	40023800 	.word	0x40023800
 8003d94:	42470000 	.word	0x42470000
 8003d98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d9c:	4b88      	ldr	r3, [pc, #544]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003d9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1ea      	bne.n	8003d7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8097 	beq.w	8003ee4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db6:	2300      	movs	r3, #0
 8003db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dba:	4b81      	ldr	r3, [pc, #516]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10f      	bne.n	8003de6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	4b7d      	ldr	r3, [pc, #500]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	4a7c      	ldr	r2, [pc, #496]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dd6:	4b7a      	ldr	r3, [pc, #488]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de2:	2301      	movs	r3, #1
 8003de4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de6:	4b77      	ldr	r3, [pc, #476]	@ (8003fc4 <HAL_RCC_OscConfig+0x474>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d118      	bne.n	8003e24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df2:	4b74      	ldr	r3, [pc, #464]	@ (8003fc4 <HAL_RCC_OscConfig+0x474>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a73      	ldr	r2, [pc, #460]	@ (8003fc4 <HAL_RCC_OscConfig+0x474>)
 8003df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dfe:	f7fd fe73 	bl	8001ae8 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e06:	f7fd fe6f 	bl	8001ae8 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e10c      	b.n	8004032 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e18:	4b6a      	ldr	r3, [pc, #424]	@ (8003fc4 <HAL_RCC_OscConfig+0x474>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d106      	bne.n	8003e3a <HAL_RCC_OscConfig+0x2ea>
 8003e2c:	4b64      	ldr	r3, [pc, #400]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e30:	4a63      	ldr	r2, [pc, #396]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e38:	e01c      	b.n	8003e74 <HAL_RCC_OscConfig+0x324>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b05      	cmp	r3, #5
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCC_OscConfig+0x30c>
 8003e42:	4b5f      	ldr	r3, [pc, #380]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e46:	4a5e      	ldr	r2, [pc, #376]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003e48:	f043 0304 	orr.w	r3, r3, #4
 8003e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e4e:	4b5c      	ldr	r3, [pc, #368]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e52:	4a5b      	ldr	r2, [pc, #364]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e5a:	e00b      	b.n	8003e74 <HAL_RCC_OscConfig+0x324>
 8003e5c:	4b58      	ldr	r3, [pc, #352]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e60:	4a57      	ldr	r2, [pc, #348]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e68:	4b55      	ldr	r3, [pc, #340]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6c:	4a54      	ldr	r2, [pc, #336]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	f023 0304 	bic.w	r3, r3, #4
 8003e72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d015      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7c:	f7fd fe34 	bl	8001ae8 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e82:	e00a      	b.n	8003e9a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e84:	f7fd fe30 	bl	8001ae8 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e0cb      	b.n	8004032 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9a:	4b49      	ldr	r3, [pc, #292]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0ee      	beq.n	8003e84 <HAL_RCC_OscConfig+0x334>
 8003ea6:	e014      	b.n	8003ed2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea8:	f7fd fe1e 	bl	8001ae8 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb0:	f7fd fe1a 	bl	8001ae8 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e0b5      	b.n	8004032 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1ee      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d105      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed8:	4b39      	ldr	r3, [pc, #228]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003edc:	4a38      	ldr	r2, [pc, #224]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003ede:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ee2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 80a1 	beq.w	8004030 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eee:	4b34      	ldr	r3, [pc, #208]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 030c 	and.w	r3, r3, #12
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d05c      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d141      	bne.n	8003f86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f02:	4b31      	ldr	r3, [pc, #196]	@ (8003fc8 <HAL_RCC_OscConfig+0x478>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fd fdee 	bl	8001ae8 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f10:	f7fd fdea 	bl	8001ae8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e087      	b.n	8004032 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f22:	4b27      	ldr	r3, [pc, #156]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69da      	ldr	r2, [r3, #28]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	019b      	lsls	r3, r3, #6
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f44:	085b      	lsrs	r3, r3, #1
 8003f46:	3b01      	subs	r3, #1
 8003f48:	041b      	lsls	r3, r3, #16
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f50:	061b      	lsls	r3, r3, #24
 8003f52:	491b      	ldr	r1, [pc, #108]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f58:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc8 <HAL_RCC_OscConfig+0x478>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5e:	f7fd fdc3 	bl	8001ae8 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f66:	f7fd fdbf 	bl	8001ae8 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e05c      	b.n	8004032 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f78:	4b11      	ldr	r3, [pc, #68]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0f0      	beq.n	8003f66 <HAL_RCC_OscConfig+0x416>
 8003f84:	e054      	b.n	8004030 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f86:	4b10      	ldr	r3, [pc, #64]	@ (8003fc8 <HAL_RCC_OscConfig+0x478>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8c:	f7fd fdac 	bl	8001ae8 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f94:	f7fd fda8 	bl	8001ae8 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e045      	b.n	8004032 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa6:	4b06      	ldr	r3, [pc, #24]	@ (8003fc0 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f0      	bne.n	8003f94 <HAL_RCC_OscConfig+0x444>
 8003fb2:	e03d      	b.n	8004030 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d107      	bne.n	8003fcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e038      	b.n	8004032 <HAL_RCC_OscConfig+0x4e2>
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	40007000 	.word	0x40007000
 8003fc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800403c <HAL_RCC_OscConfig+0x4ec>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d028      	beq.n	800402c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d121      	bne.n	800402c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d11a      	bne.n	800402c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004002:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004004:	4293      	cmp	r3, r2
 8004006:	d111      	bne.n	800402c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	085b      	lsrs	r3, r3, #1
 8004014:	3b01      	subs	r3, #1
 8004016:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d107      	bne.n	800402c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004026:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d001      	beq.n	8004030 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40023800 	.word	0x40023800

08004040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0cc      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004054:	4b68      	ldr	r3, [pc, #416]	@ (80041f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d90c      	bls.n	800407c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004062:	4b65      	ldr	r3, [pc, #404]	@ (80041f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406a:	4b63      	ldr	r3, [pc, #396]	@ (80041f8 <HAL_RCC_ClockConfig+0x1b8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d001      	beq.n	800407c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0b8      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d020      	beq.n	80040ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004094:	4b59      	ldr	r3, [pc, #356]	@ (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4a58      	ldr	r2, [pc, #352]	@ (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800409e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040ac:	4b53      	ldr	r3, [pc, #332]	@ (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	4a52      	ldr	r2, [pc, #328]	@ (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b8:	4b50      	ldr	r3, [pc, #320]	@ (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	494d      	ldr	r1, [pc, #308]	@ (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d044      	beq.n	8004160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d107      	bne.n	80040ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040de:	4b47      	ldr	r3, [pc, #284]	@ (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d119      	bne.n	800411e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e07f      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d003      	beq.n	80040fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d107      	bne.n	800410e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fe:	4b3f      	ldr	r3, [pc, #252]	@ (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e06f      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410e:	4b3b      	ldr	r3, [pc, #236]	@ (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e067      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800411e:	4b37      	ldr	r3, [pc, #220]	@ (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f023 0203 	bic.w	r2, r3, #3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	4934      	ldr	r1, [pc, #208]	@ (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	4313      	orrs	r3, r2
 800412e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004130:	f7fd fcda 	bl	8001ae8 <HAL_GetTick>
 8004134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004136:	e00a      	b.n	800414e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004138:	f7fd fcd6 	bl	8001ae8 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004146:	4293      	cmp	r3, r2
 8004148:	d901      	bls.n	800414e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e04f      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414e:	4b2b      	ldr	r3, [pc, #172]	@ (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 020c 	and.w	r2, r3, #12
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	429a      	cmp	r2, r3
 800415e:	d1eb      	bne.n	8004138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004160:	4b25      	ldr	r3, [pc, #148]	@ (80041f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d20c      	bcs.n	8004188 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416e:	4b22      	ldr	r3, [pc, #136]	@ (80041f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004176:	4b20      	ldr	r3, [pc, #128]	@ (80041f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d001      	beq.n	8004188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e032      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004194:	4b19      	ldr	r3, [pc, #100]	@ (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4916      	ldr	r1, [pc, #88]	@ (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041b2:	4b12      	ldr	r3, [pc, #72]	@ (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	490e      	ldr	r1, [pc, #56]	@ (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041c6:	f000 f821 	bl	800420c <HAL_RCC_GetSysClockFreq>
 80041ca:	4602      	mov	r2, r0
 80041cc:	4b0b      	ldr	r3, [pc, #44]	@ (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	091b      	lsrs	r3, r3, #4
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	490a      	ldr	r1, [pc, #40]	@ (8004200 <HAL_RCC_ClockConfig+0x1c0>)
 80041d8:	5ccb      	ldrb	r3, [r1, r3]
 80041da:	fa22 f303 	lsr.w	r3, r2, r3
 80041de:	4a09      	ldr	r2, [pc, #36]	@ (8004204 <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80041e2:	4b09      	ldr	r3, [pc, #36]	@ (8004208 <HAL_RCC_ClockConfig+0x1c8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fd fc3a 	bl	8001a60 <HAL_InitTick>

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40023c00 	.word	0x40023c00
 80041fc:	40023800 	.word	0x40023800
 8004200:	08007224 	.word	0x08007224
 8004204:	20000008 	.word	0x20000008
 8004208:	2000000c 	.word	0x2000000c

0800420c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800420c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004210:	b090      	sub	sp, #64	@ 0x40
 8004212:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004224:	4b59      	ldr	r3, [pc, #356]	@ (800438c <HAL_RCC_GetSysClockFreq+0x180>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 030c 	and.w	r3, r3, #12
 800422c:	2b08      	cmp	r3, #8
 800422e:	d00d      	beq.n	800424c <HAL_RCC_GetSysClockFreq+0x40>
 8004230:	2b08      	cmp	r3, #8
 8004232:	f200 80a1 	bhi.w	8004378 <HAL_RCC_GetSysClockFreq+0x16c>
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_RCC_GetSysClockFreq+0x34>
 800423a:	2b04      	cmp	r3, #4
 800423c:	d003      	beq.n	8004246 <HAL_RCC_GetSysClockFreq+0x3a>
 800423e:	e09b      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004240:	4b53      	ldr	r3, [pc, #332]	@ (8004390 <HAL_RCC_GetSysClockFreq+0x184>)
 8004242:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004244:	e09b      	b.n	800437e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004246:	4b53      	ldr	r3, [pc, #332]	@ (8004394 <HAL_RCC_GetSysClockFreq+0x188>)
 8004248:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800424a:	e098      	b.n	800437e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800424c:	4b4f      	ldr	r3, [pc, #316]	@ (800438c <HAL_RCC_GetSysClockFreq+0x180>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004254:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004256:	4b4d      	ldr	r3, [pc, #308]	@ (800438c <HAL_RCC_GetSysClockFreq+0x180>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d028      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004262:	4b4a      	ldr	r3, [pc, #296]	@ (800438c <HAL_RCC_GetSysClockFreq+0x180>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	099b      	lsrs	r3, r3, #6
 8004268:	2200      	movs	r2, #0
 800426a:	623b      	str	r3, [r7, #32]
 800426c:	627a      	str	r2, [r7, #36]	@ 0x24
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004274:	2100      	movs	r1, #0
 8004276:	4b47      	ldr	r3, [pc, #284]	@ (8004394 <HAL_RCC_GetSysClockFreq+0x188>)
 8004278:	fb03 f201 	mul.w	r2, r3, r1
 800427c:	2300      	movs	r3, #0
 800427e:	fb00 f303 	mul.w	r3, r0, r3
 8004282:	4413      	add	r3, r2
 8004284:	4a43      	ldr	r2, [pc, #268]	@ (8004394 <HAL_RCC_GetSysClockFreq+0x188>)
 8004286:	fba0 1202 	umull	r1, r2, r0, r2
 800428a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800428c:	460a      	mov	r2, r1
 800428e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004290:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004292:	4413      	add	r3, r2
 8004294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004298:	2200      	movs	r2, #0
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	61fa      	str	r2, [r7, #28]
 800429e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80042a6:	f7fb ffeb 	bl	8000280 <__aeabi_uldivmod>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4613      	mov	r3, r2
 80042b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042b2:	e053      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b4:	4b35      	ldr	r3, [pc, #212]	@ (800438c <HAL_RCC_GetSysClockFreq+0x180>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	099b      	lsrs	r3, r3, #6
 80042ba:	2200      	movs	r2, #0
 80042bc:	613b      	str	r3, [r7, #16]
 80042be:	617a      	str	r2, [r7, #20]
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042c6:	f04f 0b00 	mov.w	fp, #0
 80042ca:	4652      	mov	r2, sl
 80042cc:	465b      	mov	r3, fp
 80042ce:	f04f 0000 	mov.w	r0, #0
 80042d2:	f04f 0100 	mov.w	r1, #0
 80042d6:	0159      	lsls	r1, r3, #5
 80042d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042dc:	0150      	lsls	r0, r2, #5
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	ebb2 080a 	subs.w	r8, r2, sl
 80042e6:	eb63 090b 	sbc.w	r9, r3, fp
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042fe:	ebb2 0408 	subs.w	r4, r2, r8
 8004302:	eb63 0509 	sbc.w	r5, r3, r9
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	00eb      	lsls	r3, r5, #3
 8004310:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004314:	00e2      	lsls	r2, r4, #3
 8004316:	4614      	mov	r4, r2
 8004318:	461d      	mov	r5, r3
 800431a:	eb14 030a 	adds.w	r3, r4, sl
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	eb45 030b 	adc.w	r3, r5, fp
 8004324:	607b      	str	r3, [r7, #4]
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004332:	4629      	mov	r1, r5
 8004334:	028b      	lsls	r3, r1, #10
 8004336:	4621      	mov	r1, r4
 8004338:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800433c:	4621      	mov	r1, r4
 800433e:	028a      	lsls	r2, r1, #10
 8004340:	4610      	mov	r0, r2
 8004342:	4619      	mov	r1, r3
 8004344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004346:	2200      	movs	r2, #0
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	60fa      	str	r2, [r7, #12]
 800434c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004350:	f7fb ff96 	bl	8000280 <__aeabi_uldivmod>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4613      	mov	r3, r2
 800435a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800435c:	4b0b      	ldr	r3, [pc, #44]	@ (800438c <HAL_RCC_GetSysClockFreq+0x180>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	0c1b      	lsrs	r3, r3, #16
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	3301      	adds	r3, #1
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800436c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800436e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004376:	e002      	b.n	800437e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004378:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <HAL_RCC_GetSysClockFreq+0x184>)
 800437a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800437c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800437e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004380:	4618      	mov	r0, r3
 8004382:	3740      	adds	r7, #64	@ 0x40
 8004384:	46bd      	mov	sp, r7
 8004386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800438a:	bf00      	nop
 800438c:	40023800 	.word	0x40023800
 8004390:	00f42400 	.word	0x00f42400
 8004394:	017d7840 	.word	0x017d7840

08004398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800439c:	4b03      	ldr	r3, [pc, #12]	@ (80043ac <HAL_RCC_GetHCLKFreq+0x14>)
 800439e:	681b      	ldr	r3, [r3, #0]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	20000008 	.word	0x20000008

080043b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043b4:	f7ff fff0 	bl	8004398 <HAL_RCC_GetHCLKFreq>
 80043b8:	4602      	mov	r2, r0
 80043ba:	4b05      	ldr	r3, [pc, #20]	@ (80043d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	0a9b      	lsrs	r3, r3, #10
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	4903      	ldr	r1, [pc, #12]	@ (80043d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043c6:	5ccb      	ldrb	r3, [r1, r3]
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40023800 	.word	0x40023800
 80043d4:	08007234 	.word	0x08007234

080043d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043dc:	f7ff ffdc 	bl	8004398 <HAL_RCC_GetHCLKFreq>
 80043e0:	4602      	mov	r2, r0
 80043e2:	4b05      	ldr	r3, [pc, #20]	@ (80043f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	0b5b      	lsrs	r3, r3, #13
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	4903      	ldr	r1, [pc, #12]	@ (80043fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ee:	5ccb      	ldrb	r3, [r1, r3]
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40023800 	.word	0x40023800
 80043fc:	08007234 	.word	0x08007234

08004400 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e041      	b.n	8004496 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fd f86e 	bl	8001508 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3304      	adds	r3, #4
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f000 f9a0 	bl	8004784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d109      	bne.n	80044c4 <HAL_TIM_PWM_Start+0x24>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	bf14      	ite	ne
 80044bc:	2301      	movne	r3, #1
 80044be:	2300      	moveq	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	e022      	b.n	800450a <HAL_TIM_PWM_Start+0x6a>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d109      	bne.n	80044de <HAL_TIM_PWM_Start+0x3e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	bf14      	ite	ne
 80044d6:	2301      	movne	r3, #1
 80044d8:	2300      	moveq	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	e015      	b.n	800450a <HAL_TIM_PWM_Start+0x6a>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d109      	bne.n	80044f8 <HAL_TIM_PWM_Start+0x58>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	bf14      	ite	ne
 80044f0:	2301      	movne	r3, #1
 80044f2:	2300      	moveq	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	e008      	b.n	800450a <HAL_TIM_PWM_Start+0x6a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b01      	cmp	r3, #1
 8004502:	bf14      	ite	ne
 8004504:	2301      	movne	r3, #1
 8004506:	2300      	moveq	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e068      	b.n	80045e4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d104      	bne.n	8004522 <HAL_TIM_PWM_Start+0x82>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004520:	e013      	b.n	800454a <HAL_TIM_PWM_Start+0xaa>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b04      	cmp	r3, #4
 8004526:	d104      	bne.n	8004532 <HAL_TIM_PWM_Start+0x92>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004530:	e00b      	b.n	800454a <HAL_TIM_PWM_Start+0xaa>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d104      	bne.n	8004542 <HAL_TIM_PWM_Start+0xa2>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004540:	e003      	b.n	800454a <HAL_TIM_PWM_Start+0xaa>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2201      	movs	r2, #1
 8004550:	6839      	ldr	r1, [r7, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fb2e 	bl	8004bb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a23      	ldr	r2, [pc, #140]	@ (80045ec <HAL_TIM_PWM_Start+0x14c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d107      	bne.n	8004572 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004570:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1d      	ldr	r2, [pc, #116]	@ (80045ec <HAL_TIM_PWM_Start+0x14c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d018      	beq.n	80045ae <HAL_TIM_PWM_Start+0x10e>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004584:	d013      	beq.n	80045ae <HAL_TIM_PWM_Start+0x10e>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a19      	ldr	r2, [pc, #100]	@ (80045f0 <HAL_TIM_PWM_Start+0x150>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00e      	beq.n	80045ae <HAL_TIM_PWM_Start+0x10e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a17      	ldr	r2, [pc, #92]	@ (80045f4 <HAL_TIM_PWM_Start+0x154>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d009      	beq.n	80045ae <HAL_TIM_PWM_Start+0x10e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a16      	ldr	r2, [pc, #88]	@ (80045f8 <HAL_TIM_PWM_Start+0x158>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d004      	beq.n	80045ae <HAL_TIM_PWM_Start+0x10e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a14      	ldr	r2, [pc, #80]	@ (80045fc <HAL_TIM_PWM_Start+0x15c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d111      	bne.n	80045d2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b06      	cmp	r3, #6
 80045be:	d010      	beq.n	80045e2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d0:	e007      	b.n	80045e2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0201 	orr.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40010000 	.word	0x40010000
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40000800 	.word	0x40000800
 80045f8:	40000c00 	.word	0x40000c00
 80045fc:	40014000 	.word	0x40014000

08004600 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800461a:	2302      	movs	r3, #2
 800461c:	e0ae      	b.n	800477c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b0c      	cmp	r3, #12
 800462a:	f200 809f 	bhi.w	800476c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800462e:	a201      	add	r2, pc, #4	@ (adr r2, 8004634 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004634:	08004669 	.word	0x08004669
 8004638:	0800476d 	.word	0x0800476d
 800463c:	0800476d 	.word	0x0800476d
 8004640:	0800476d 	.word	0x0800476d
 8004644:	080046a9 	.word	0x080046a9
 8004648:	0800476d 	.word	0x0800476d
 800464c:	0800476d 	.word	0x0800476d
 8004650:	0800476d 	.word	0x0800476d
 8004654:	080046eb 	.word	0x080046eb
 8004658:	0800476d 	.word	0x0800476d
 800465c:	0800476d 	.word	0x0800476d
 8004660:	0800476d 	.word	0x0800476d
 8004664:	0800472b 	.word	0x0800472b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f914 	bl	800489c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0208 	orr.w	r2, r2, #8
 8004682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0204 	bic.w	r2, r2, #4
 8004692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6999      	ldr	r1, [r3, #24]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	619a      	str	r2, [r3, #24]
      break;
 80046a6:	e064      	b.n	8004772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 f95a 	bl	8004968 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6999      	ldr	r1, [r3, #24]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	021a      	lsls	r2, r3, #8
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	619a      	str	r2, [r3, #24]
      break;
 80046e8:	e043      	b.n	8004772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 f9a5 	bl	8004a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0208 	orr.w	r2, r2, #8
 8004704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0204 	bic.w	r2, r2, #4
 8004714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69d9      	ldr	r1, [r3, #28]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	61da      	str	r2, [r3, #28]
      break;
 8004728:	e023      	b.n	8004772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f9ef 	bl	8004b14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69da      	ldr	r2, [r3, #28]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69d9      	ldr	r1, [r3, #28]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	021a      	lsls	r2, r3, #8
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	61da      	str	r2, [r3, #28]
      break;
 800476a:	e002      	b.n	8004772 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	75fb      	strb	r3, [r7, #23]
      break;
 8004770:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800477a:	7dfb      	ldrb	r3, [r7, #23]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a3a      	ldr	r2, [pc, #232]	@ (8004880 <TIM_Base_SetConfig+0xfc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00f      	beq.n	80047bc <TIM_Base_SetConfig+0x38>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047a2:	d00b      	beq.n	80047bc <TIM_Base_SetConfig+0x38>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a37      	ldr	r2, [pc, #220]	@ (8004884 <TIM_Base_SetConfig+0x100>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d007      	beq.n	80047bc <TIM_Base_SetConfig+0x38>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a36      	ldr	r2, [pc, #216]	@ (8004888 <TIM_Base_SetConfig+0x104>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d003      	beq.n	80047bc <TIM_Base_SetConfig+0x38>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a35      	ldr	r2, [pc, #212]	@ (800488c <TIM_Base_SetConfig+0x108>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d108      	bne.n	80047ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004880 <TIM_Base_SetConfig+0xfc>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d01b      	beq.n	800480e <TIM_Base_SetConfig+0x8a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047dc:	d017      	beq.n	800480e <TIM_Base_SetConfig+0x8a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a28      	ldr	r2, [pc, #160]	@ (8004884 <TIM_Base_SetConfig+0x100>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <TIM_Base_SetConfig+0x8a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a27      	ldr	r2, [pc, #156]	@ (8004888 <TIM_Base_SetConfig+0x104>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00f      	beq.n	800480e <TIM_Base_SetConfig+0x8a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a26      	ldr	r2, [pc, #152]	@ (800488c <TIM_Base_SetConfig+0x108>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00b      	beq.n	800480e <TIM_Base_SetConfig+0x8a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a25      	ldr	r2, [pc, #148]	@ (8004890 <TIM_Base_SetConfig+0x10c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <TIM_Base_SetConfig+0x8a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a24      	ldr	r2, [pc, #144]	@ (8004894 <TIM_Base_SetConfig+0x110>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d003      	beq.n	800480e <TIM_Base_SetConfig+0x8a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a23      	ldr	r2, [pc, #140]	@ (8004898 <TIM_Base_SetConfig+0x114>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d108      	bne.n	8004820 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a0e      	ldr	r2, [pc, #56]	@ (8004880 <TIM_Base_SetConfig+0xfc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d103      	bne.n	8004854 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b01      	cmp	r3, #1
 8004864:	d105      	bne.n	8004872 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f023 0201 	bic.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	611a      	str	r2, [r3, #16]
  }
}
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40010000 	.word	0x40010000
 8004884:	40000400 	.word	0x40000400
 8004888:	40000800 	.word	0x40000800
 800488c:	40000c00 	.word	0x40000c00
 8004890:	40014000 	.word	0x40014000
 8004894:	40014400 	.word	0x40014400
 8004898:	40014800 	.word	0x40014800

0800489c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	f023 0201 	bic.w	r2, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0303 	bic.w	r3, r3, #3
 80048d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f023 0302 	bic.w	r3, r3, #2
 80048e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004964 <TIM_OC1_SetConfig+0xc8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d10c      	bne.n	8004912 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f023 0308 	bic.w	r3, r3, #8
 80048fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f023 0304 	bic.w	r3, r3, #4
 8004910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a13      	ldr	r2, [pc, #76]	@ (8004964 <TIM_OC1_SetConfig+0xc8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d111      	bne.n	800493e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	621a      	str	r2, [r3, #32]
}
 8004958:	bf00      	nop
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	40010000 	.word	0x40010000

08004968 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f023 0210 	bic.w	r2, r3, #16
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800499e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f023 0320 	bic.w	r3, r3, #32
 80049b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a3c <TIM_OC2_SetConfig+0xd4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d10d      	bne.n	80049e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a15      	ldr	r2, [pc, #84]	@ (8004a3c <TIM_OC2_SetConfig+0xd4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d113      	bne.n	8004a14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	621a      	str	r2, [r3, #32]
}
 8004a2e:	bf00      	nop
 8004a30:	371c      	adds	r7, #28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40010000 	.word	0x40010000

08004a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0303 	bic.w	r3, r3, #3
 8004a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a1d      	ldr	r2, [pc, #116]	@ (8004b10 <TIM_OC3_SetConfig+0xd0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d10d      	bne.n	8004aba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	021b      	lsls	r3, r3, #8
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a14      	ldr	r2, [pc, #80]	@ (8004b10 <TIM_OC3_SetConfig+0xd0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d113      	bne.n	8004aea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	621a      	str	r2, [r3, #32]
}
 8004b04:	bf00      	nop
 8004b06:	371c      	adds	r7, #28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	40010000 	.word	0x40010000

08004b14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	031b      	lsls	r3, r3, #12
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a10      	ldr	r2, [pc, #64]	@ (8004bb0 <TIM_OC4_SetConfig+0x9c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d109      	bne.n	8004b88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	019b      	lsls	r3, r3, #6
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	621a      	str	r2, [r3, #32]
}
 8004ba2:	bf00      	nop
 8004ba4:	371c      	adds	r7, #28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40010000 	.word	0x40010000

08004bb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a1a      	ldr	r2, [r3, #32]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	401a      	ands	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a1a      	ldr	r2, [r3, #32]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	431a      	orrs	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
	...

08004c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e050      	b.n	8004cba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d018      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c64:	d013      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a18      	ldr	r2, [pc, #96]	@ (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00e      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a16      	ldr	r2, [pc, #88]	@ (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d009      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a15      	ldr	r2, [pc, #84]	@ (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d004      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a13      	ldr	r2, [pc, #76]	@ (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40010000 	.word	0x40010000
 8004ccc:	40000400 	.word	0x40000400
 8004cd0:	40000800 	.word	0x40000800
 8004cd4:	40000c00 	.word	0x40000c00
 8004cd8:	40014000 	.word	0x40014000

08004cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e042      	b.n	8004d74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fc fc7c 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2224      	movs	r2, #36	@ 0x24
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 ff4f 	bl	8005bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695a      	ldr	r2, [r3, #20]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08a      	sub	sp, #40	@ 0x28
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d175      	bne.n	8004e88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_UART_Transmit+0x2c>
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e06e      	b.n	8004e8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2221      	movs	r2, #33	@ 0x21
 8004db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dba:	f7fc fe95 	bl	8001ae8 <HAL_GetTick>
 8004dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	88fa      	ldrh	r2, [r7, #6]
 8004dc4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	88fa      	ldrh	r2, [r7, #6]
 8004dca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd4:	d108      	bne.n	8004de8 <HAL_UART_Transmit+0x6c>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d104      	bne.n	8004de8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	e003      	b.n	8004df0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004df0:	e02e      	b.n	8004e50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2180      	movs	r1, #128	@ 0x80
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 fc27 	bl	8005650 <UART_WaitOnFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e03a      	b.n	8004e8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10b      	bne.n	8004e32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	3302      	adds	r3, #2
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	e007      	b.n	8004e42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	781a      	ldrb	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1cb      	bne.n	8004df2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2200      	movs	r2, #0
 8004e62:	2140      	movs	r1, #64	@ 0x40
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 fbf3 	bl	8005650 <UART_WaitOnFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e006      	b.n	8004e8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	e000      	b.n	8004e8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e88:	2302      	movs	r3, #2
  }
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d112      	bne.n	8004ed2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_UART_Receive_DMA+0x26>
 8004eb2:	88fb      	ldrh	r3, [r7, #6]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e00b      	b.n	8004ed4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	68b9      	ldr	r1, [r7, #8]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 fc1b 	bl	8005704 <UART_Start_Receive_DMA>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	e000      	b.n	8004ed4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ed2:	2302      	movs	r3, #2
  }
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b0ba      	sub	sp, #232	@ 0xe8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10f      	bne.n	8004f42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <HAL_UART_IRQHandler+0x66>
 8004f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fd83 	bl	8005a46 <UART_Receive_IT>
      return;
 8004f40:	e25b      	b.n	80053fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 80de 	beq.w	8005108 <HAL_UART_IRQHandler+0x22c>
 8004f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d106      	bne.n	8004f66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f5c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80d1 	beq.w	8005108 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00b      	beq.n	8004f8a <HAL_UART_IRQHandler+0xae>
 8004f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f82:	f043 0201 	orr.w	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00b      	beq.n	8004fae <HAL_UART_IRQHandler+0xd2>
 8004f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d005      	beq.n	8004fae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa6:	f043 0202 	orr.w	r2, r3, #2
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
 8004fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fca:	f043 0204 	orr.w	r2, r3, #4
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d011      	beq.n	8005002 <HAL_UART_IRQHandler+0x126>
 8004fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d105      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ffa:	f043 0208 	orr.w	r2, r3, #8
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 81f2 	beq.w	80053f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800500c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_UART_IRQHandler+0x14e>
 8005018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fd0e 	bl	8005a46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005034:	2b40      	cmp	r3, #64	@ 0x40
 8005036:	bf0c      	ite	eq
 8005038:	2301      	moveq	r3, #1
 800503a:	2300      	movne	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d103      	bne.n	8005056 <HAL_UART_IRQHandler+0x17a>
 800504e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005052:	2b00      	cmp	r3, #0
 8005054:	d04f      	beq.n	80050f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fc16 	bl	8005888 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005066:	2b40      	cmp	r3, #64	@ 0x40
 8005068:	d141      	bne.n	80050ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3314      	adds	r3, #20
 8005070:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005080:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005084:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005088:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3314      	adds	r3, #20
 8005092:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005096:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800509a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80050a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80050a6:	e841 2300 	strex	r3, r2, [r1]
 80050aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80050ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1d9      	bne.n	800506a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d013      	beq.n	80050e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c2:	4a7e      	ldr	r2, [pc, #504]	@ (80052bc <HAL_UART_IRQHandler+0x3e0>)
 80050c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fc ffc4 	bl	8002058 <HAL_DMA_Abort_IT>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d016      	beq.n	8005104 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050e0:	4610      	mov	r0, r2
 80050e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e4:	e00e      	b.n	8005104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f99e 	bl	8005428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ec:	e00a      	b.n	8005104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f99a 	bl	8005428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f4:	e006      	b.n	8005104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f996 	bl	8005428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005102:	e175      	b.n	80053f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005104:	bf00      	nop
    return;
 8005106:	e173      	b.n	80053f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510c:	2b01      	cmp	r3, #1
 800510e:	f040 814f 	bne.w	80053b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 8148 	beq.w	80053b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 8141 	beq.w	80053b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800512e:	2300      	movs	r3, #0
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	60bb      	str	r3, [r7, #8]
 8005142:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800514e:	2b40      	cmp	r3, #64	@ 0x40
 8005150:	f040 80b6 	bne.w	80052c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005160:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 8145 	beq.w	80053f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800516e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005172:	429a      	cmp	r2, r3
 8005174:	f080 813e 	bcs.w	80053f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800517e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800518a:	f000 8088 	beq.w	800529e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	330c      	adds	r3, #12
 8005194:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80051a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80051ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80051c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80051d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1d9      	bne.n	800518e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3314      	adds	r3, #20
 80051e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80051ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051ec:	f023 0301 	bic.w	r3, r3, #1
 80051f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3314      	adds	r3, #20
 80051fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005202:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005206:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005210:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e1      	bne.n	80051da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3314      	adds	r3, #20
 800521c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005226:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005228:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800522c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3314      	adds	r3, #20
 8005236:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800523a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800523c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005240:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005248:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e3      	bne.n	8005216 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800526c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800526e:	f023 0310 	bic.w	r3, r3, #16
 8005272:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	330c      	adds	r3, #12
 800527c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005280:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005282:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005286:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800528e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e3      	bne.n	800525c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005298:	4618      	mov	r0, r3
 800529a:	f7fc fe6d 	bl	8001f78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2202      	movs	r2, #2
 80052a2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	4619      	mov	r1, r3
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f8c1 	bl	800543c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052ba:	e09b      	b.n	80053f4 <HAL_UART_IRQHandler+0x518>
 80052bc:	0800594f 	.word	0x0800594f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 808e 	beq.w	80053f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80052dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 8089 	beq.w	80053f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	330c      	adds	r3, #12
 80052ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	330c      	adds	r3, #12
 8005306:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800530a:	647a      	str	r2, [r7, #68]	@ 0x44
 800530c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005310:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e3      	bne.n	80052e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3314      	adds	r3, #20
 8005324:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	623b      	str	r3, [r7, #32]
   return(result);
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3314      	adds	r3, #20
 800533e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005342:	633a      	str	r2, [r7, #48]	@ 0x30
 8005344:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005346:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800534a:	e841 2300 	strex	r3, r2, [r1]
 800534e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e3      	bne.n	800531e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	e853 3f00 	ldrex	r3, [r3]
 8005372:	60fb      	str	r3, [r7, #12]
   return(result);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0310 	bic.w	r3, r3, #16
 800537a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	330c      	adds	r3, #12
 8005384:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005388:	61fa      	str	r2, [r7, #28]
 800538a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	69b9      	ldr	r1, [r7, #24]
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	617b      	str	r3, [r7, #20]
   return(result);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e3      	bne.n	8005364 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053a6:	4619      	mov	r1, r3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f847 	bl	800543c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053ae:	e023      	b.n	80053f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d009      	beq.n	80053d0 <HAL_UART_IRQHandler+0x4f4>
 80053bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fad4 	bl	8005976 <UART_Transmit_IT>
    return;
 80053ce:	e014      	b.n	80053fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00e      	beq.n	80053fa <HAL_UART_IRQHandler+0x51e>
 80053dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fb14 	bl	8005a16 <UART_EndTransmit_IT>
    return;
 80053ee:	e004      	b.n	80053fa <HAL_UART_IRQHandler+0x51e>
    return;
 80053f0:	bf00      	nop
 80053f2:	e002      	b.n	80053fa <HAL_UART_IRQHandler+0x51e>
      return;
 80053f4:	bf00      	nop
 80053f6:	e000      	b.n	80053fa <HAL_UART_IRQHandler+0x51e>
      return;
 80053f8:	bf00      	nop
  }
}
 80053fa:	37e8      	adds	r7, #232	@ 0xe8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b09c      	sub	sp, #112	@ 0x70
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005460:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800546c:	2b00      	cmp	r3, #0
 800546e:	d172      	bne.n	8005556 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005472:	2200      	movs	r2, #0
 8005474:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	330c      	adds	r3, #12
 800547c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800548c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800548e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	330c      	adds	r3, #12
 8005494:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005496:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005498:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800549c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e5      	bne.n	8005476 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3314      	adds	r3, #20
 80054b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b4:	e853 3f00 	ldrex	r3, [r3]
 80054b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054bc:	f023 0301 	bic.w	r3, r3, #1
 80054c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80054c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3314      	adds	r3, #20
 80054c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80054ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80054cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054d2:	e841 2300 	strex	r3, r2, [r1]
 80054d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1e5      	bne.n	80054aa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3314      	adds	r3, #20
 80054e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	623b      	str	r3, [r7, #32]
   return(result);
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80054f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3314      	adds	r3, #20
 80054fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80054fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8005500:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005502:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800550c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1e5      	bne.n	80054de <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005514:	2220      	movs	r2, #32
 8005516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800551a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800551c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551e:	2b01      	cmp	r3, #1
 8005520:	d119      	bne.n	8005556 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005522:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	330c      	adds	r3, #12
 8005528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	e853 3f00 	ldrex	r3, [r3]
 8005530:	60fb      	str	r3, [r7, #12]
   return(result);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f023 0310 	bic.w	r3, r3, #16
 8005538:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800553a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	330c      	adds	r3, #12
 8005540:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005542:	61fa      	str	r2, [r7, #28]
 8005544:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	69b9      	ldr	r1, [r7, #24]
 8005548:	69fa      	ldr	r2, [r7, #28]
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	617b      	str	r3, [r7, #20]
   return(result);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1e5      	bne.n	8005522 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005556:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005558:	2200      	movs	r2, #0
 800555a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800555c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800555e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005560:	2b01      	cmp	r3, #1
 8005562:	d106      	bne.n	8005572 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005566:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005568:	4619      	mov	r1, r3
 800556a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800556c:	f7ff ff66 	bl	800543c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005570:	e002      	b.n	8005578 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005572:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005574:	f7fb fe82 	bl	800127c <HAL_UART_RxCpltCallback>
}
 8005578:	bf00      	nop
 800557a:	3770      	adds	r7, #112	@ 0x70
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2201      	movs	r2, #1
 8005592:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005598:	2b01      	cmp	r3, #1
 800559a:	d108      	bne.n	80055ae <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055a0:	085b      	lsrs	r3, r3, #1
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	4619      	mov	r1, r3
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f7ff ff48 	bl	800543c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055ac:	e002      	b.n	80055b4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f7ff ff30 	bl	8005414 <HAL_UART_RxHalfCpltCallback>
}
 80055b4:	bf00      	nop
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055cc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d8:	2b80      	cmp	r3, #128	@ 0x80
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b21      	cmp	r3, #33	@ 0x21
 80055ee:	d108      	bne.n	8005602 <UART_DMAError+0x46>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2200      	movs	r2, #0
 80055fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80055fc:	68b8      	ldr	r0, [r7, #8]
 80055fe:	f000 f91b 	bl	8005838 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800560c:	2b40      	cmp	r3, #64	@ 0x40
 800560e:	bf0c      	ite	eq
 8005610:	2301      	moveq	r3, #1
 8005612:	2300      	movne	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b22      	cmp	r3, #34	@ 0x22
 8005622:	d108      	bne.n	8005636 <UART_DMAError+0x7a>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2200      	movs	r2, #0
 800562e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005630:	68b8      	ldr	r0, [r7, #8]
 8005632:	f000 f929 	bl	8005888 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563a:	f043 0210 	orr.w	r2, r3, #16
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005642:	68b8      	ldr	r0, [r7, #8]
 8005644:	f7ff fef0 	bl	8005428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005648:	bf00      	nop
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	4613      	mov	r3, r2
 800565e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005660:	e03b      	b.n	80056da <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005668:	d037      	beq.n	80056da <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566a:	f7fc fa3d 	bl	8001ae8 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	6a3a      	ldr	r2, [r7, #32]
 8005676:	429a      	cmp	r2, r3
 8005678:	d302      	bcc.n	8005680 <UART_WaitOnFlagUntilTimeout+0x30>
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e03a      	b.n	80056fa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	d023      	beq.n	80056da <UART_WaitOnFlagUntilTimeout+0x8a>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b80      	cmp	r3, #128	@ 0x80
 8005696:	d020      	beq.n	80056da <UART_WaitOnFlagUntilTimeout+0x8a>
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b40      	cmp	r3, #64	@ 0x40
 800569c:	d01d      	beq.n	80056da <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d116      	bne.n	80056da <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 f8e0 	bl	8005888 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2208      	movs	r2, #8
 80056cc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e00f      	b.n	80056fa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4013      	ands	r3, r2
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	bf0c      	ite	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	2300      	movne	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d0b4      	beq.n	8005662 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b098      	sub	sp, #96	@ 0x60
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	4613      	mov	r3, r2
 8005710:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	88fa      	ldrh	r2, [r7, #6]
 800571c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2222      	movs	r2, #34	@ 0x22
 8005728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005730:	4a3e      	ldr	r2, [pc, #248]	@ (800582c <UART_Start_Receive_DMA+0x128>)
 8005732:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005738:	4a3d      	ldr	r2, [pc, #244]	@ (8005830 <UART_Start_Receive_DMA+0x12c>)
 800573a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005740:	4a3c      	ldr	r2, [pc, #240]	@ (8005834 <UART_Start_Receive_DMA+0x130>)
 8005742:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005748:	2200      	movs	r2, #0
 800574a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800574c:	f107 0308 	add.w	r3, r7, #8
 8005750:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3304      	adds	r3, #4
 800575c:	4619      	mov	r1, r3
 800575e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	f7fc fbb0 	bl	8001ec8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005768:	2300      	movs	r3, #0
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	613b      	str	r3, [r7, #16]
 800577c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d019      	beq.n	80057ba <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	330c      	adds	r3, #12
 800578c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800579c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	330c      	adds	r3, #12
 80057a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057a6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80057a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80057ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057ae:	e841 2300 	strex	r3, r2, [r1]
 80057b2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80057b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1e5      	bne.n	8005786 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3314      	adds	r3, #20
 80057c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057cc:	f043 0301 	orr.w	r3, r3, #1
 80057d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3314      	adds	r3, #20
 80057d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057da:	63ba      	str	r2, [r7, #56]	@ 0x38
 80057dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80057e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e5      	bne.n	80057ba <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3314      	adds	r3, #20
 80057f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	617b      	str	r3, [r7, #20]
   return(result);
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005804:	653b      	str	r3, [r7, #80]	@ 0x50
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3314      	adds	r3, #20
 800580c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800580e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6a39      	ldr	r1, [r7, #32]
 8005814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	61fb      	str	r3, [r7, #28]
   return(result);
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e5      	bne.n	80057ee <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3760      	adds	r7, #96	@ 0x60
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	08005455 	.word	0x08005455
 8005830:	08005581 	.word	0x08005581
 8005834:	080055bd 	.word	0x080055bd

08005838 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005838:	b480      	push	{r7}
 800583a:	b089      	sub	sp, #36	@ 0x24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	330c      	adds	r3, #12
 8005846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005856:	61fb      	str	r3, [r7, #28]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	330c      	adds	r3, #12
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	61ba      	str	r2, [r7, #24]
 8005862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	6979      	ldr	r1, [r7, #20]
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	613b      	str	r3, [r7, #16]
   return(result);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e5      	bne.n	8005840 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800587c:	bf00      	nop
 800587e:	3724      	adds	r7, #36	@ 0x24
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005888:	b480      	push	{r7}
 800588a:	b095      	sub	sp, #84	@ 0x54
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	330c      	adds	r3, #12
 8005896:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	330c      	adds	r3, #12
 80058ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80058b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e5      	bne.n	8005890 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3314      	adds	r3, #20
 80058ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	f023 0301 	bic.w	r3, r3, #1
 80058da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3314      	adds	r3, #20
 80058e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e5      	bne.n	80058c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d119      	bne.n	8005934 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	330c      	adds	r3, #12
 8005906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	e853 3f00 	ldrex	r3, [r3]
 800590e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f023 0310 	bic.w	r3, r3, #16
 8005916:	647b      	str	r3, [r7, #68]	@ 0x44
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	330c      	adds	r3, #12
 800591e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005920:	61ba      	str	r2, [r7, #24]
 8005922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005924:	6979      	ldr	r1, [r7, #20]
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	e841 2300 	strex	r3, r2, [r1]
 800592c:	613b      	str	r3, [r7, #16]
   return(result);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1e5      	bne.n	8005900 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005942:	bf00      	nop
 8005944:	3754      	adds	r7, #84	@ 0x54
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f7ff fd5d 	bl	8005428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800596e:	bf00      	nop
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005976:	b480      	push	{r7}
 8005978:	b085      	sub	sp, #20
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b21      	cmp	r3, #33	@ 0x21
 8005988:	d13e      	bne.n	8005a08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005992:	d114      	bne.n	80059be <UART_Transmit_IT+0x48>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d110      	bne.n	80059be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	1c9a      	adds	r2, r3, #2
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	621a      	str	r2, [r3, #32]
 80059bc:	e008      	b.n	80059d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	1c59      	adds	r1, r3, #1
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6211      	str	r1, [r2, #32]
 80059c8:	781a      	ldrb	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29b      	uxth	r3, r3
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	4619      	mov	r1, r3
 80059de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10f      	bne.n	8005a04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	e000      	b.n	8005a0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a08:	2302      	movs	r3, #2
  }
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b082      	sub	sp, #8
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68da      	ldr	r2, [r3, #12]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff fce2 	bl	8005400 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b08c      	sub	sp, #48	@ 0x30
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b22      	cmp	r3, #34	@ 0x22
 8005a58:	f040 80ae 	bne.w	8005bb8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a64:	d117      	bne.n	8005a96 <UART_Receive_IT+0x50>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d113      	bne.n	8005a96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a76:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8e:	1c9a      	adds	r2, r3, #2
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a94:	e026      	b.n	8005ae4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aa8:	d007      	beq.n	8005aba <UART_Receive_IT+0x74>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <UART_Receive_IT+0x82>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac4:	701a      	strb	r2, [r3, #0]
 8005ac6:	e008      	b.n	8005ada <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	4619      	mov	r1, r3
 8005af2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d15d      	bne.n	8005bb4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0220 	bic.w	r2, r2, #32
 8005b06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695a      	ldr	r2, [r3, #20]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0201 	bic.w	r2, r2, #1
 8005b26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d135      	bne.n	8005baa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	330c      	adds	r3, #12
 8005b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	613b      	str	r3, [r7, #16]
   return(result);
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f023 0310 	bic.w	r3, r3, #16
 8005b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	330c      	adds	r3, #12
 8005b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b64:	623a      	str	r2, [r7, #32]
 8005b66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	69f9      	ldr	r1, [r7, #28]
 8005b6a:	6a3a      	ldr	r2, [r7, #32]
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e5      	bne.n	8005b44 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0310 	and.w	r3, r3, #16
 8005b82:	2b10      	cmp	r3, #16
 8005b84:	d10a      	bne.n	8005b9c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7ff fc4a 	bl	800543c <HAL_UARTEx_RxEventCallback>
 8005ba8:	e002      	b.n	8005bb0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7fb fb66 	bl	800127c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	e002      	b.n	8005bba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	e000      	b.n	8005bba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005bb8:	2302      	movs	r3, #2
  }
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3730      	adds	r7, #48	@ 0x30
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
	...

08005bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bc8:	b0c0      	sub	sp, #256	@ 0x100
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be0:	68d9      	ldr	r1, [r3, #12]
 8005be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	ea40 0301 	orr.w	r3, r0, r1
 8005bec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c1c:	f021 010c 	bic.w	r1, r1, #12
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c3e:	6999      	ldr	r1, [r3, #24]
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	ea40 0301 	orr.w	r3, r0, r1
 8005c4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	4b8f      	ldr	r3, [pc, #572]	@ (8005e90 <UART_SetConfig+0x2cc>)
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d005      	beq.n	8005c64 <UART_SetConfig+0xa0>
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	4b8d      	ldr	r3, [pc, #564]	@ (8005e94 <UART_SetConfig+0x2d0>)
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d104      	bne.n	8005c6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c64:	f7fe fbb8 	bl	80043d8 <HAL_RCC_GetPCLK2Freq>
 8005c68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c6c:	e003      	b.n	8005c76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c6e:	f7fe fb9f 	bl	80043b0 <HAL_RCC_GetPCLK1Freq>
 8005c72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c80:	f040 810c 	bne.w	8005e9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c96:	4622      	mov	r2, r4
 8005c98:	462b      	mov	r3, r5
 8005c9a:	1891      	adds	r1, r2, r2
 8005c9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c9e:	415b      	adcs	r3, r3
 8005ca0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ca2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	eb12 0801 	adds.w	r8, r2, r1
 8005cac:	4629      	mov	r1, r5
 8005cae:	eb43 0901 	adc.w	r9, r3, r1
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	f04f 0300 	mov.w	r3, #0
 8005cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cc6:	4690      	mov	r8, r2
 8005cc8:	4699      	mov	r9, r3
 8005cca:	4623      	mov	r3, r4
 8005ccc:	eb18 0303 	adds.w	r3, r8, r3
 8005cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005cd4:	462b      	mov	r3, r5
 8005cd6:	eb49 0303 	adc.w	r3, r9, r3
 8005cda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	18db      	adds	r3, r3, r3
 8005cf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	eb42 0303 	adc.w	r3, r2, r3
 8005cfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d08:	f7fa faba 	bl	8000280 <__aeabi_uldivmod>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4b61      	ldr	r3, [pc, #388]	@ (8005e98 <UART_SetConfig+0x2d4>)
 8005d12:	fba3 2302 	umull	r2, r3, r3, r2
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	011c      	lsls	r4, r3, #4
 8005d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d2c:	4642      	mov	r2, r8
 8005d2e:	464b      	mov	r3, r9
 8005d30:	1891      	adds	r1, r2, r2
 8005d32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d34:	415b      	adcs	r3, r3
 8005d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d3c:	4641      	mov	r1, r8
 8005d3e:	eb12 0a01 	adds.w	sl, r2, r1
 8005d42:	4649      	mov	r1, r9
 8005d44:	eb43 0b01 	adc.w	fp, r3, r1
 8005d48:	f04f 0200 	mov.w	r2, #0
 8005d4c:	f04f 0300 	mov.w	r3, #0
 8005d50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d5c:	4692      	mov	sl, r2
 8005d5e:	469b      	mov	fp, r3
 8005d60:	4643      	mov	r3, r8
 8005d62:	eb1a 0303 	adds.w	r3, sl, r3
 8005d66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d6a:	464b      	mov	r3, r9
 8005d6c:	eb4b 0303 	adc.w	r3, fp, r3
 8005d70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	18db      	adds	r3, r3, r3
 8005d8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d8e:	4613      	mov	r3, r2
 8005d90:	eb42 0303 	adc.w	r3, r2, r3
 8005d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d9e:	f7fa fa6f 	bl	8000280 <__aeabi_uldivmod>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4611      	mov	r1, r2
 8005da8:	4b3b      	ldr	r3, [pc, #236]	@ (8005e98 <UART_SetConfig+0x2d4>)
 8005daa:	fba3 2301 	umull	r2, r3, r3, r1
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	2264      	movs	r2, #100	@ 0x64
 8005db2:	fb02 f303 	mul.w	r3, r2, r3
 8005db6:	1acb      	subs	r3, r1, r3
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005dbe:	4b36      	ldr	r3, [pc, #216]	@ (8005e98 <UART_SetConfig+0x2d4>)
 8005dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8005dc4:	095b      	lsrs	r3, r3, #5
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005dcc:	441c      	add	r4, r3
 8005dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005dd8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ddc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005de0:	4642      	mov	r2, r8
 8005de2:	464b      	mov	r3, r9
 8005de4:	1891      	adds	r1, r2, r2
 8005de6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005de8:	415b      	adcs	r3, r3
 8005dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005df0:	4641      	mov	r1, r8
 8005df2:	1851      	adds	r1, r2, r1
 8005df4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005df6:	4649      	mov	r1, r9
 8005df8:	414b      	adcs	r3, r1
 8005dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e08:	4659      	mov	r1, fp
 8005e0a:	00cb      	lsls	r3, r1, #3
 8005e0c:	4651      	mov	r1, sl
 8005e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e12:	4651      	mov	r1, sl
 8005e14:	00ca      	lsls	r2, r1, #3
 8005e16:	4610      	mov	r0, r2
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	4642      	mov	r2, r8
 8005e1e:	189b      	adds	r3, r3, r2
 8005e20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e24:	464b      	mov	r3, r9
 8005e26:	460a      	mov	r2, r1
 8005e28:	eb42 0303 	adc.w	r3, r2, r3
 8005e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e44:	460b      	mov	r3, r1
 8005e46:	18db      	adds	r3, r3, r3
 8005e48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	eb42 0303 	adc.w	r3, r2, r3
 8005e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e5a:	f7fa fa11 	bl	8000280 <__aeabi_uldivmod>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4b0d      	ldr	r3, [pc, #52]	@ (8005e98 <UART_SetConfig+0x2d4>)
 8005e64:	fba3 1302 	umull	r1, r3, r3, r2
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	2164      	movs	r1, #100	@ 0x64
 8005e6c:	fb01 f303 	mul.w	r3, r1, r3
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	3332      	adds	r3, #50	@ 0x32
 8005e76:	4a08      	ldr	r2, [pc, #32]	@ (8005e98 <UART_SetConfig+0x2d4>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	095b      	lsrs	r3, r3, #5
 8005e7e:	f003 0207 	and.w	r2, r3, #7
 8005e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4422      	add	r2, r4
 8005e8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e8c:	e106      	b.n	800609c <UART_SetConfig+0x4d8>
 8005e8e:	bf00      	nop
 8005e90:	40011000 	.word	0x40011000
 8005e94:	40011400 	.word	0x40011400
 8005e98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ea6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005eaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005eae:	4642      	mov	r2, r8
 8005eb0:	464b      	mov	r3, r9
 8005eb2:	1891      	adds	r1, r2, r2
 8005eb4:	6239      	str	r1, [r7, #32]
 8005eb6:	415b      	adcs	r3, r3
 8005eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ebe:	4641      	mov	r1, r8
 8005ec0:	1854      	adds	r4, r2, r1
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	eb43 0501 	adc.w	r5, r3, r1
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	f04f 0300 	mov.w	r3, #0
 8005ed0:	00eb      	lsls	r3, r5, #3
 8005ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ed6:	00e2      	lsls	r2, r4, #3
 8005ed8:	4614      	mov	r4, r2
 8005eda:	461d      	mov	r5, r3
 8005edc:	4643      	mov	r3, r8
 8005ede:	18e3      	adds	r3, r4, r3
 8005ee0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ee4:	464b      	mov	r3, r9
 8005ee6:	eb45 0303 	adc.w	r3, r5, r3
 8005eea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005efa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005efe:	f04f 0200 	mov.w	r2, #0
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	008b      	lsls	r3, r1, #2
 8005f0e:	4621      	mov	r1, r4
 8005f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f14:	4621      	mov	r1, r4
 8005f16:	008a      	lsls	r2, r1, #2
 8005f18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f1c:	f7fa f9b0 	bl	8000280 <__aeabi_uldivmod>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4b60      	ldr	r3, [pc, #384]	@ (80060a8 <UART_SetConfig+0x4e4>)
 8005f26:	fba3 2302 	umull	r2, r3, r3, r2
 8005f2a:	095b      	lsrs	r3, r3, #5
 8005f2c:	011c      	lsls	r4, r3, #4
 8005f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f32:	2200      	movs	r2, #0
 8005f34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f40:	4642      	mov	r2, r8
 8005f42:	464b      	mov	r3, r9
 8005f44:	1891      	adds	r1, r2, r2
 8005f46:	61b9      	str	r1, [r7, #24]
 8005f48:	415b      	adcs	r3, r3
 8005f4a:	61fb      	str	r3, [r7, #28]
 8005f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f50:	4641      	mov	r1, r8
 8005f52:	1851      	adds	r1, r2, r1
 8005f54:	6139      	str	r1, [r7, #16]
 8005f56:	4649      	mov	r1, r9
 8005f58:	414b      	adcs	r3, r1
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f68:	4659      	mov	r1, fp
 8005f6a:	00cb      	lsls	r3, r1, #3
 8005f6c:	4651      	mov	r1, sl
 8005f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f72:	4651      	mov	r1, sl
 8005f74:	00ca      	lsls	r2, r1, #3
 8005f76:	4610      	mov	r0, r2
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	4642      	mov	r2, r8
 8005f7e:	189b      	adds	r3, r3, r2
 8005f80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f84:	464b      	mov	r3, r9
 8005f86:	460a      	mov	r2, r1
 8005f88:	eb42 0303 	adc.w	r3, r2, r3
 8005f8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005fa8:	4649      	mov	r1, r9
 8005faa:	008b      	lsls	r3, r1, #2
 8005fac:	4641      	mov	r1, r8
 8005fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fb2:	4641      	mov	r1, r8
 8005fb4:	008a      	lsls	r2, r1, #2
 8005fb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005fba:	f7fa f961 	bl	8000280 <__aeabi_uldivmod>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	4b38      	ldr	r3, [pc, #224]	@ (80060a8 <UART_SetConfig+0x4e4>)
 8005fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	2264      	movs	r2, #100	@ 0x64
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
 8005fd2:	1acb      	subs	r3, r1, r3
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	3332      	adds	r3, #50	@ 0x32
 8005fd8:	4a33      	ldr	r2, [pc, #204]	@ (80060a8 <UART_SetConfig+0x4e4>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fe4:	441c      	add	r4, r3
 8005fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fea:	2200      	movs	r2, #0
 8005fec:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fee:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ff0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	464b      	mov	r3, r9
 8005ff8:	1891      	adds	r1, r2, r2
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	415b      	adcs	r3, r3
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006004:	4641      	mov	r1, r8
 8006006:	1851      	adds	r1, r2, r1
 8006008:	6039      	str	r1, [r7, #0]
 800600a:	4649      	mov	r1, r9
 800600c:	414b      	adcs	r3, r1
 800600e:	607b      	str	r3, [r7, #4]
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800601c:	4659      	mov	r1, fp
 800601e:	00cb      	lsls	r3, r1, #3
 8006020:	4651      	mov	r1, sl
 8006022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006026:	4651      	mov	r1, sl
 8006028:	00ca      	lsls	r2, r1, #3
 800602a:	4610      	mov	r0, r2
 800602c:	4619      	mov	r1, r3
 800602e:	4603      	mov	r3, r0
 8006030:	4642      	mov	r2, r8
 8006032:	189b      	adds	r3, r3, r2
 8006034:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006036:	464b      	mov	r3, r9
 8006038:	460a      	mov	r2, r1
 800603a:	eb42 0303 	adc.w	r3, r2, r3
 800603e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	663b      	str	r3, [r7, #96]	@ 0x60
 800604a:	667a      	str	r2, [r7, #100]	@ 0x64
 800604c:	f04f 0200 	mov.w	r2, #0
 8006050:	f04f 0300 	mov.w	r3, #0
 8006054:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006058:	4649      	mov	r1, r9
 800605a:	008b      	lsls	r3, r1, #2
 800605c:	4641      	mov	r1, r8
 800605e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006062:	4641      	mov	r1, r8
 8006064:	008a      	lsls	r2, r1, #2
 8006066:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800606a:	f7fa f909 	bl	8000280 <__aeabi_uldivmod>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	4b0d      	ldr	r3, [pc, #52]	@ (80060a8 <UART_SetConfig+0x4e4>)
 8006074:	fba3 1302 	umull	r1, r3, r3, r2
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	2164      	movs	r1, #100	@ 0x64
 800607c:	fb01 f303 	mul.w	r3, r1, r3
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	3332      	adds	r3, #50	@ 0x32
 8006086:	4a08      	ldr	r2, [pc, #32]	@ (80060a8 <UART_SetConfig+0x4e4>)
 8006088:	fba2 2303 	umull	r2, r3, r2, r3
 800608c:	095b      	lsrs	r3, r3, #5
 800608e:	f003 020f 	and.w	r2, r3, #15
 8006092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4422      	add	r2, r4
 800609a:	609a      	str	r2, [r3, #8]
}
 800609c:	bf00      	nop
 800609e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80060a2:	46bd      	mov	sp, r7
 80060a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060a8:	51eb851f 	.word	0x51eb851f

080060ac <_strtol_l.isra.0>:
 80060ac:	2b24      	cmp	r3, #36	@ 0x24
 80060ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b2:	4686      	mov	lr, r0
 80060b4:	4690      	mov	r8, r2
 80060b6:	d801      	bhi.n	80060bc <_strtol_l.isra.0+0x10>
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d106      	bne.n	80060ca <_strtol_l.isra.0+0x1e>
 80060bc:	f000 fa3c 	bl	8006538 <__errno>
 80060c0:	2316      	movs	r3, #22
 80060c2:	6003      	str	r3, [r0, #0]
 80060c4:	2000      	movs	r0, #0
 80060c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ca:	4834      	ldr	r0, [pc, #208]	@ (800619c <_strtol_l.isra.0+0xf0>)
 80060cc:	460d      	mov	r5, r1
 80060ce:	462a      	mov	r2, r5
 80060d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060d4:	5d06      	ldrb	r6, [r0, r4]
 80060d6:	f016 0608 	ands.w	r6, r6, #8
 80060da:	d1f8      	bne.n	80060ce <_strtol_l.isra.0+0x22>
 80060dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80060de:	d110      	bne.n	8006102 <_strtol_l.isra.0+0x56>
 80060e0:	782c      	ldrb	r4, [r5, #0]
 80060e2:	2601      	movs	r6, #1
 80060e4:	1c95      	adds	r5, r2, #2
 80060e6:	f033 0210 	bics.w	r2, r3, #16
 80060ea:	d115      	bne.n	8006118 <_strtol_l.isra.0+0x6c>
 80060ec:	2c30      	cmp	r4, #48	@ 0x30
 80060ee:	d10d      	bne.n	800610c <_strtol_l.isra.0+0x60>
 80060f0:	782a      	ldrb	r2, [r5, #0]
 80060f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80060f6:	2a58      	cmp	r2, #88	@ 0x58
 80060f8:	d108      	bne.n	800610c <_strtol_l.isra.0+0x60>
 80060fa:	786c      	ldrb	r4, [r5, #1]
 80060fc:	3502      	adds	r5, #2
 80060fe:	2310      	movs	r3, #16
 8006100:	e00a      	b.n	8006118 <_strtol_l.isra.0+0x6c>
 8006102:	2c2b      	cmp	r4, #43	@ 0x2b
 8006104:	bf04      	itt	eq
 8006106:	782c      	ldrbeq	r4, [r5, #0]
 8006108:	1c95      	addeq	r5, r2, #2
 800610a:	e7ec      	b.n	80060e6 <_strtol_l.isra.0+0x3a>
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1f6      	bne.n	80060fe <_strtol_l.isra.0+0x52>
 8006110:	2c30      	cmp	r4, #48	@ 0x30
 8006112:	bf14      	ite	ne
 8006114:	230a      	movne	r3, #10
 8006116:	2308      	moveq	r3, #8
 8006118:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800611c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006120:	2200      	movs	r2, #0
 8006122:	fbbc f9f3 	udiv	r9, ip, r3
 8006126:	4610      	mov	r0, r2
 8006128:	fb03 ca19 	mls	sl, r3, r9, ip
 800612c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006130:	2f09      	cmp	r7, #9
 8006132:	d80f      	bhi.n	8006154 <_strtol_l.isra.0+0xa8>
 8006134:	463c      	mov	r4, r7
 8006136:	42a3      	cmp	r3, r4
 8006138:	dd1b      	ble.n	8006172 <_strtol_l.isra.0+0xc6>
 800613a:	1c57      	adds	r7, r2, #1
 800613c:	d007      	beq.n	800614e <_strtol_l.isra.0+0xa2>
 800613e:	4581      	cmp	r9, r0
 8006140:	d314      	bcc.n	800616c <_strtol_l.isra.0+0xc0>
 8006142:	d101      	bne.n	8006148 <_strtol_l.isra.0+0x9c>
 8006144:	45a2      	cmp	sl, r4
 8006146:	db11      	blt.n	800616c <_strtol_l.isra.0+0xc0>
 8006148:	fb00 4003 	mla	r0, r0, r3, r4
 800614c:	2201      	movs	r2, #1
 800614e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006152:	e7eb      	b.n	800612c <_strtol_l.isra.0+0x80>
 8006154:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006158:	2f19      	cmp	r7, #25
 800615a:	d801      	bhi.n	8006160 <_strtol_l.isra.0+0xb4>
 800615c:	3c37      	subs	r4, #55	@ 0x37
 800615e:	e7ea      	b.n	8006136 <_strtol_l.isra.0+0x8a>
 8006160:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006164:	2f19      	cmp	r7, #25
 8006166:	d804      	bhi.n	8006172 <_strtol_l.isra.0+0xc6>
 8006168:	3c57      	subs	r4, #87	@ 0x57
 800616a:	e7e4      	b.n	8006136 <_strtol_l.isra.0+0x8a>
 800616c:	f04f 32ff 	mov.w	r2, #4294967295
 8006170:	e7ed      	b.n	800614e <_strtol_l.isra.0+0xa2>
 8006172:	1c53      	adds	r3, r2, #1
 8006174:	d108      	bne.n	8006188 <_strtol_l.isra.0+0xdc>
 8006176:	2322      	movs	r3, #34	@ 0x22
 8006178:	f8ce 3000 	str.w	r3, [lr]
 800617c:	4660      	mov	r0, ip
 800617e:	f1b8 0f00 	cmp.w	r8, #0
 8006182:	d0a0      	beq.n	80060c6 <_strtol_l.isra.0+0x1a>
 8006184:	1e69      	subs	r1, r5, #1
 8006186:	e006      	b.n	8006196 <_strtol_l.isra.0+0xea>
 8006188:	b106      	cbz	r6, 800618c <_strtol_l.isra.0+0xe0>
 800618a:	4240      	negs	r0, r0
 800618c:	f1b8 0f00 	cmp.w	r8, #0
 8006190:	d099      	beq.n	80060c6 <_strtol_l.isra.0+0x1a>
 8006192:	2a00      	cmp	r2, #0
 8006194:	d1f6      	bne.n	8006184 <_strtol_l.isra.0+0xd8>
 8006196:	f8c8 1000 	str.w	r1, [r8]
 800619a:	e794      	b.n	80060c6 <_strtol_l.isra.0+0x1a>
 800619c:	08007245 	.word	0x08007245

080061a0 <strtol>:
 80061a0:	4613      	mov	r3, r2
 80061a2:	460a      	mov	r2, r1
 80061a4:	4601      	mov	r1, r0
 80061a6:	4802      	ldr	r0, [pc, #8]	@ (80061b0 <strtol+0x10>)
 80061a8:	6800      	ldr	r0, [r0, #0]
 80061aa:	f7ff bf7f 	b.w	80060ac <_strtol_l.isra.0>
 80061ae:	bf00      	nop
 80061b0:	20000020 	.word	0x20000020

080061b4 <std>:
 80061b4:	2300      	movs	r3, #0
 80061b6:	b510      	push	{r4, lr}
 80061b8:	4604      	mov	r4, r0
 80061ba:	e9c0 3300 	strd	r3, r3, [r0]
 80061be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061c2:	6083      	str	r3, [r0, #8]
 80061c4:	8181      	strh	r1, [r0, #12]
 80061c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80061c8:	81c2      	strh	r2, [r0, #14]
 80061ca:	6183      	str	r3, [r0, #24]
 80061cc:	4619      	mov	r1, r3
 80061ce:	2208      	movs	r2, #8
 80061d0:	305c      	adds	r0, #92	@ 0x5c
 80061d2:	f000 f906 	bl	80063e2 <memset>
 80061d6:	4b0d      	ldr	r3, [pc, #52]	@ (800620c <std+0x58>)
 80061d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80061da:	4b0d      	ldr	r3, [pc, #52]	@ (8006210 <std+0x5c>)
 80061dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80061de:	4b0d      	ldr	r3, [pc, #52]	@ (8006214 <std+0x60>)
 80061e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80061e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006218 <std+0x64>)
 80061e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80061e6:	4b0d      	ldr	r3, [pc, #52]	@ (800621c <std+0x68>)
 80061e8:	6224      	str	r4, [r4, #32]
 80061ea:	429c      	cmp	r4, r3
 80061ec:	d006      	beq.n	80061fc <std+0x48>
 80061ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80061f2:	4294      	cmp	r4, r2
 80061f4:	d002      	beq.n	80061fc <std+0x48>
 80061f6:	33d0      	adds	r3, #208	@ 0xd0
 80061f8:	429c      	cmp	r4, r3
 80061fa:	d105      	bne.n	8006208 <std+0x54>
 80061fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006204:	f000 b9c2 	b.w	800658c <__retarget_lock_init_recursive>
 8006208:	bd10      	pop	{r4, pc}
 800620a:	bf00      	nop
 800620c:	0800635d 	.word	0x0800635d
 8006210:	0800637f 	.word	0x0800637f
 8006214:	080063b7 	.word	0x080063b7
 8006218:	080063db 	.word	0x080063db
 800621c:	20000320 	.word	0x20000320

08006220 <stdio_exit_handler>:
 8006220:	4a02      	ldr	r2, [pc, #8]	@ (800622c <stdio_exit_handler+0xc>)
 8006222:	4903      	ldr	r1, [pc, #12]	@ (8006230 <stdio_exit_handler+0x10>)
 8006224:	4803      	ldr	r0, [pc, #12]	@ (8006234 <stdio_exit_handler+0x14>)
 8006226:	f000 b869 	b.w	80062fc <_fwalk_sglue>
 800622a:	bf00      	nop
 800622c:	20000014 	.word	0x20000014
 8006230:	08006e75 	.word	0x08006e75
 8006234:	20000024 	.word	0x20000024

08006238 <cleanup_stdio>:
 8006238:	6841      	ldr	r1, [r0, #4]
 800623a:	4b0c      	ldr	r3, [pc, #48]	@ (800626c <cleanup_stdio+0x34>)
 800623c:	4299      	cmp	r1, r3
 800623e:	b510      	push	{r4, lr}
 8006240:	4604      	mov	r4, r0
 8006242:	d001      	beq.n	8006248 <cleanup_stdio+0x10>
 8006244:	f000 fe16 	bl	8006e74 <_fflush_r>
 8006248:	68a1      	ldr	r1, [r4, #8]
 800624a:	4b09      	ldr	r3, [pc, #36]	@ (8006270 <cleanup_stdio+0x38>)
 800624c:	4299      	cmp	r1, r3
 800624e:	d002      	beq.n	8006256 <cleanup_stdio+0x1e>
 8006250:	4620      	mov	r0, r4
 8006252:	f000 fe0f 	bl	8006e74 <_fflush_r>
 8006256:	68e1      	ldr	r1, [r4, #12]
 8006258:	4b06      	ldr	r3, [pc, #24]	@ (8006274 <cleanup_stdio+0x3c>)
 800625a:	4299      	cmp	r1, r3
 800625c:	d004      	beq.n	8006268 <cleanup_stdio+0x30>
 800625e:	4620      	mov	r0, r4
 8006260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006264:	f000 be06 	b.w	8006e74 <_fflush_r>
 8006268:	bd10      	pop	{r4, pc}
 800626a:	bf00      	nop
 800626c:	20000320 	.word	0x20000320
 8006270:	20000388 	.word	0x20000388
 8006274:	200003f0 	.word	0x200003f0

08006278 <global_stdio_init.part.0>:
 8006278:	b510      	push	{r4, lr}
 800627a:	4b0b      	ldr	r3, [pc, #44]	@ (80062a8 <global_stdio_init.part.0+0x30>)
 800627c:	4c0b      	ldr	r4, [pc, #44]	@ (80062ac <global_stdio_init.part.0+0x34>)
 800627e:	4a0c      	ldr	r2, [pc, #48]	@ (80062b0 <global_stdio_init.part.0+0x38>)
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	4620      	mov	r0, r4
 8006284:	2200      	movs	r2, #0
 8006286:	2104      	movs	r1, #4
 8006288:	f7ff ff94 	bl	80061b4 <std>
 800628c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006290:	2201      	movs	r2, #1
 8006292:	2109      	movs	r1, #9
 8006294:	f7ff ff8e 	bl	80061b4 <std>
 8006298:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800629c:	2202      	movs	r2, #2
 800629e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062a2:	2112      	movs	r1, #18
 80062a4:	f7ff bf86 	b.w	80061b4 <std>
 80062a8:	20000458 	.word	0x20000458
 80062ac:	20000320 	.word	0x20000320
 80062b0:	08006221 	.word	0x08006221

080062b4 <__sfp_lock_acquire>:
 80062b4:	4801      	ldr	r0, [pc, #4]	@ (80062bc <__sfp_lock_acquire+0x8>)
 80062b6:	f000 b96a 	b.w	800658e <__retarget_lock_acquire_recursive>
 80062ba:	bf00      	nop
 80062bc:	20000461 	.word	0x20000461

080062c0 <__sfp_lock_release>:
 80062c0:	4801      	ldr	r0, [pc, #4]	@ (80062c8 <__sfp_lock_release+0x8>)
 80062c2:	f000 b965 	b.w	8006590 <__retarget_lock_release_recursive>
 80062c6:	bf00      	nop
 80062c8:	20000461 	.word	0x20000461

080062cc <__sinit>:
 80062cc:	b510      	push	{r4, lr}
 80062ce:	4604      	mov	r4, r0
 80062d0:	f7ff fff0 	bl	80062b4 <__sfp_lock_acquire>
 80062d4:	6a23      	ldr	r3, [r4, #32]
 80062d6:	b11b      	cbz	r3, 80062e0 <__sinit+0x14>
 80062d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062dc:	f7ff bff0 	b.w	80062c0 <__sfp_lock_release>
 80062e0:	4b04      	ldr	r3, [pc, #16]	@ (80062f4 <__sinit+0x28>)
 80062e2:	6223      	str	r3, [r4, #32]
 80062e4:	4b04      	ldr	r3, [pc, #16]	@ (80062f8 <__sinit+0x2c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1f5      	bne.n	80062d8 <__sinit+0xc>
 80062ec:	f7ff ffc4 	bl	8006278 <global_stdio_init.part.0>
 80062f0:	e7f2      	b.n	80062d8 <__sinit+0xc>
 80062f2:	bf00      	nop
 80062f4:	08006239 	.word	0x08006239
 80062f8:	20000458 	.word	0x20000458

080062fc <_fwalk_sglue>:
 80062fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006300:	4607      	mov	r7, r0
 8006302:	4688      	mov	r8, r1
 8006304:	4614      	mov	r4, r2
 8006306:	2600      	movs	r6, #0
 8006308:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800630c:	f1b9 0901 	subs.w	r9, r9, #1
 8006310:	d505      	bpl.n	800631e <_fwalk_sglue+0x22>
 8006312:	6824      	ldr	r4, [r4, #0]
 8006314:	2c00      	cmp	r4, #0
 8006316:	d1f7      	bne.n	8006308 <_fwalk_sglue+0xc>
 8006318:	4630      	mov	r0, r6
 800631a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800631e:	89ab      	ldrh	r3, [r5, #12]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d907      	bls.n	8006334 <_fwalk_sglue+0x38>
 8006324:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006328:	3301      	adds	r3, #1
 800632a:	d003      	beq.n	8006334 <_fwalk_sglue+0x38>
 800632c:	4629      	mov	r1, r5
 800632e:	4638      	mov	r0, r7
 8006330:	47c0      	blx	r8
 8006332:	4306      	orrs	r6, r0
 8006334:	3568      	adds	r5, #104	@ 0x68
 8006336:	e7e9      	b.n	800630c <_fwalk_sglue+0x10>

08006338 <iprintf>:
 8006338:	b40f      	push	{r0, r1, r2, r3}
 800633a:	b507      	push	{r0, r1, r2, lr}
 800633c:	4906      	ldr	r1, [pc, #24]	@ (8006358 <iprintf+0x20>)
 800633e:	ab04      	add	r3, sp, #16
 8006340:	6808      	ldr	r0, [r1, #0]
 8006342:	f853 2b04 	ldr.w	r2, [r3], #4
 8006346:	6881      	ldr	r1, [r0, #8]
 8006348:	9301      	str	r3, [sp, #4]
 800634a:	f000 fa6b 	bl	8006824 <_vfiprintf_r>
 800634e:	b003      	add	sp, #12
 8006350:	f85d eb04 	ldr.w	lr, [sp], #4
 8006354:	b004      	add	sp, #16
 8006356:	4770      	bx	lr
 8006358:	20000020 	.word	0x20000020

0800635c <__sread>:
 800635c:	b510      	push	{r4, lr}
 800635e:	460c      	mov	r4, r1
 8006360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006364:	f000 f8c4 	bl	80064f0 <_read_r>
 8006368:	2800      	cmp	r0, #0
 800636a:	bfab      	itete	ge
 800636c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800636e:	89a3      	ldrhlt	r3, [r4, #12]
 8006370:	181b      	addge	r3, r3, r0
 8006372:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006376:	bfac      	ite	ge
 8006378:	6563      	strge	r3, [r4, #84]	@ 0x54
 800637a:	81a3      	strhlt	r3, [r4, #12]
 800637c:	bd10      	pop	{r4, pc}

0800637e <__swrite>:
 800637e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006382:	461f      	mov	r7, r3
 8006384:	898b      	ldrh	r3, [r1, #12]
 8006386:	05db      	lsls	r3, r3, #23
 8006388:	4605      	mov	r5, r0
 800638a:	460c      	mov	r4, r1
 800638c:	4616      	mov	r6, r2
 800638e:	d505      	bpl.n	800639c <__swrite+0x1e>
 8006390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006394:	2302      	movs	r3, #2
 8006396:	2200      	movs	r2, #0
 8006398:	f000 f898 	bl	80064cc <_lseek_r>
 800639c:	89a3      	ldrh	r3, [r4, #12]
 800639e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063a6:	81a3      	strh	r3, [r4, #12]
 80063a8:	4632      	mov	r2, r6
 80063aa:	463b      	mov	r3, r7
 80063ac:	4628      	mov	r0, r5
 80063ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063b2:	f000 b8af 	b.w	8006514 <_write_r>

080063b6 <__sseek>:
 80063b6:	b510      	push	{r4, lr}
 80063b8:	460c      	mov	r4, r1
 80063ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063be:	f000 f885 	bl	80064cc <_lseek_r>
 80063c2:	1c43      	adds	r3, r0, #1
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	bf15      	itete	ne
 80063c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80063ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80063ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80063d2:	81a3      	strheq	r3, [r4, #12]
 80063d4:	bf18      	it	ne
 80063d6:	81a3      	strhne	r3, [r4, #12]
 80063d8:	bd10      	pop	{r4, pc}

080063da <__sclose>:
 80063da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063de:	f000 b865 	b.w	80064ac <_close_r>

080063e2 <memset>:
 80063e2:	4402      	add	r2, r0
 80063e4:	4603      	mov	r3, r0
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d100      	bne.n	80063ec <memset+0xa>
 80063ea:	4770      	bx	lr
 80063ec:	f803 1b01 	strb.w	r1, [r3], #1
 80063f0:	e7f9      	b.n	80063e6 <memset+0x4>
	...

080063f4 <strtok>:
 80063f4:	4b16      	ldr	r3, [pc, #88]	@ (8006450 <strtok+0x5c>)
 80063f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063fa:	681f      	ldr	r7, [r3, #0]
 80063fc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80063fe:	4605      	mov	r5, r0
 8006400:	460e      	mov	r6, r1
 8006402:	b9ec      	cbnz	r4, 8006440 <strtok+0x4c>
 8006404:	2050      	movs	r0, #80	@ 0x50
 8006406:	f000 f92d 	bl	8006664 <malloc>
 800640a:	4602      	mov	r2, r0
 800640c:	6478      	str	r0, [r7, #68]	@ 0x44
 800640e:	b920      	cbnz	r0, 800641a <strtok+0x26>
 8006410:	4b10      	ldr	r3, [pc, #64]	@ (8006454 <strtok+0x60>)
 8006412:	4811      	ldr	r0, [pc, #68]	@ (8006458 <strtok+0x64>)
 8006414:	215b      	movs	r1, #91	@ 0x5b
 8006416:	f000 f8bd 	bl	8006594 <__assert_func>
 800641a:	e9c0 4400 	strd	r4, r4, [r0]
 800641e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006422:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006426:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800642a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800642e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006432:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006436:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800643a:	6184      	str	r4, [r0, #24]
 800643c:	7704      	strb	r4, [r0, #28]
 800643e:	6244      	str	r4, [r0, #36]	@ 0x24
 8006440:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006442:	4631      	mov	r1, r6
 8006444:	4628      	mov	r0, r5
 8006446:	2301      	movs	r3, #1
 8006448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800644c:	f000 b806 	b.w	800645c <__strtok_r>
 8006450:	20000020 	.word	0x20000020
 8006454:	08007345 	.word	0x08007345
 8006458:	0800735c 	.word	0x0800735c

0800645c <__strtok_r>:
 800645c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800645e:	4604      	mov	r4, r0
 8006460:	b908      	cbnz	r0, 8006466 <__strtok_r+0xa>
 8006462:	6814      	ldr	r4, [r2, #0]
 8006464:	b144      	cbz	r4, 8006478 <__strtok_r+0x1c>
 8006466:	4620      	mov	r0, r4
 8006468:	f814 5b01 	ldrb.w	r5, [r4], #1
 800646c:	460f      	mov	r7, r1
 800646e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006472:	b91e      	cbnz	r6, 800647c <__strtok_r+0x20>
 8006474:	b965      	cbnz	r5, 8006490 <__strtok_r+0x34>
 8006476:	6015      	str	r5, [r2, #0]
 8006478:	2000      	movs	r0, #0
 800647a:	e005      	b.n	8006488 <__strtok_r+0x2c>
 800647c:	42b5      	cmp	r5, r6
 800647e:	d1f6      	bne.n	800646e <__strtok_r+0x12>
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1f0      	bne.n	8006466 <__strtok_r+0xa>
 8006484:	6014      	str	r4, [r2, #0]
 8006486:	7003      	strb	r3, [r0, #0]
 8006488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800648a:	461c      	mov	r4, r3
 800648c:	e00c      	b.n	80064a8 <__strtok_r+0x4c>
 800648e:	b91d      	cbnz	r5, 8006498 <__strtok_r+0x3c>
 8006490:	4627      	mov	r7, r4
 8006492:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006496:	460e      	mov	r6, r1
 8006498:	f816 5b01 	ldrb.w	r5, [r6], #1
 800649c:	42ab      	cmp	r3, r5
 800649e:	d1f6      	bne.n	800648e <__strtok_r+0x32>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0f2      	beq.n	800648a <__strtok_r+0x2e>
 80064a4:	2300      	movs	r3, #0
 80064a6:	703b      	strb	r3, [r7, #0]
 80064a8:	6014      	str	r4, [r2, #0]
 80064aa:	e7ed      	b.n	8006488 <__strtok_r+0x2c>

080064ac <_close_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	4d06      	ldr	r5, [pc, #24]	@ (80064c8 <_close_r+0x1c>)
 80064b0:	2300      	movs	r3, #0
 80064b2:	4604      	mov	r4, r0
 80064b4:	4608      	mov	r0, r1
 80064b6:	602b      	str	r3, [r5, #0]
 80064b8:	f7fb fa0a 	bl	80018d0 <_close>
 80064bc:	1c43      	adds	r3, r0, #1
 80064be:	d102      	bne.n	80064c6 <_close_r+0x1a>
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	b103      	cbz	r3, 80064c6 <_close_r+0x1a>
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	bd38      	pop	{r3, r4, r5, pc}
 80064c8:	2000045c 	.word	0x2000045c

080064cc <_lseek_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	4d07      	ldr	r5, [pc, #28]	@ (80064ec <_lseek_r+0x20>)
 80064d0:	4604      	mov	r4, r0
 80064d2:	4608      	mov	r0, r1
 80064d4:	4611      	mov	r1, r2
 80064d6:	2200      	movs	r2, #0
 80064d8:	602a      	str	r2, [r5, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	f7fb fa1f 	bl	800191e <_lseek>
 80064e0:	1c43      	adds	r3, r0, #1
 80064e2:	d102      	bne.n	80064ea <_lseek_r+0x1e>
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	b103      	cbz	r3, 80064ea <_lseek_r+0x1e>
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
 80064ec:	2000045c 	.word	0x2000045c

080064f0 <_read_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4d07      	ldr	r5, [pc, #28]	@ (8006510 <_read_r+0x20>)
 80064f4:	4604      	mov	r4, r0
 80064f6:	4608      	mov	r0, r1
 80064f8:	4611      	mov	r1, r2
 80064fa:	2200      	movs	r2, #0
 80064fc:	602a      	str	r2, [r5, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	f7fb f9ad 	bl	800185e <_read>
 8006504:	1c43      	adds	r3, r0, #1
 8006506:	d102      	bne.n	800650e <_read_r+0x1e>
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	b103      	cbz	r3, 800650e <_read_r+0x1e>
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	bd38      	pop	{r3, r4, r5, pc}
 8006510:	2000045c 	.word	0x2000045c

08006514 <_write_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	4d07      	ldr	r5, [pc, #28]	@ (8006534 <_write_r+0x20>)
 8006518:	4604      	mov	r4, r0
 800651a:	4608      	mov	r0, r1
 800651c:	4611      	mov	r1, r2
 800651e:	2200      	movs	r2, #0
 8006520:	602a      	str	r2, [r5, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	f7fb f9b8 	bl	8001898 <_write>
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	d102      	bne.n	8006532 <_write_r+0x1e>
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	b103      	cbz	r3, 8006532 <_write_r+0x1e>
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	2000045c 	.word	0x2000045c

08006538 <__errno>:
 8006538:	4b01      	ldr	r3, [pc, #4]	@ (8006540 <__errno+0x8>)
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20000020 	.word	0x20000020

08006544 <__libc_init_array>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	4d0d      	ldr	r5, [pc, #52]	@ (800657c <__libc_init_array+0x38>)
 8006548:	4c0d      	ldr	r4, [pc, #52]	@ (8006580 <__libc_init_array+0x3c>)
 800654a:	1b64      	subs	r4, r4, r5
 800654c:	10a4      	asrs	r4, r4, #2
 800654e:	2600      	movs	r6, #0
 8006550:	42a6      	cmp	r6, r4
 8006552:	d109      	bne.n	8006568 <__libc_init_array+0x24>
 8006554:	4d0b      	ldr	r5, [pc, #44]	@ (8006584 <__libc_init_array+0x40>)
 8006556:	4c0c      	ldr	r4, [pc, #48]	@ (8006588 <__libc_init_array+0x44>)
 8006558:	f000 fe3a 	bl	80071d0 <_init>
 800655c:	1b64      	subs	r4, r4, r5
 800655e:	10a4      	asrs	r4, r4, #2
 8006560:	2600      	movs	r6, #0
 8006562:	42a6      	cmp	r6, r4
 8006564:	d105      	bne.n	8006572 <__libc_init_array+0x2e>
 8006566:	bd70      	pop	{r4, r5, r6, pc}
 8006568:	f855 3b04 	ldr.w	r3, [r5], #4
 800656c:	4798      	blx	r3
 800656e:	3601      	adds	r6, #1
 8006570:	e7ee      	b.n	8006550 <__libc_init_array+0xc>
 8006572:	f855 3b04 	ldr.w	r3, [r5], #4
 8006576:	4798      	blx	r3
 8006578:	3601      	adds	r6, #1
 800657a:	e7f2      	b.n	8006562 <__libc_init_array+0x1e>
 800657c:	08007430 	.word	0x08007430
 8006580:	08007430 	.word	0x08007430
 8006584:	08007430 	.word	0x08007430
 8006588:	08007434 	.word	0x08007434

0800658c <__retarget_lock_init_recursive>:
 800658c:	4770      	bx	lr

0800658e <__retarget_lock_acquire_recursive>:
 800658e:	4770      	bx	lr

08006590 <__retarget_lock_release_recursive>:
 8006590:	4770      	bx	lr
	...

08006594 <__assert_func>:
 8006594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006596:	4614      	mov	r4, r2
 8006598:	461a      	mov	r2, r3
 800659a:	4b09      	ldr	r3, [pc, #36]	@ (80065c0 <__assert_func+0x2c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4605      	mov	r5, r0
 80065a0:	68d8      	ldr	r0, [r3, #12]
 80065a2:	b14c      	cbz	r4, 80065b8 <__assert_func+0x24>
 80065a4:	4b07      	ldr	r3, [pc, #28]	@ (80065c4 <__assert_func+0x30>)
 80065a6:	9100      	str	r1, [sp, #0]
 80065a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065ac:	4906      	ldr	r1, [pc, #24]	@ (80065c8 <__assert_func+0x34>)
 80065ae:	462b      	mov	r3, r5
 80065b0:	f000 fc88 	bl	8006ec4 <fiprintf>
 80065b4:	f000 fd3c 	bl	8007030 <abort>
 80065b8:	4b04      	ldr	r3, [pc, #16]	@ (80065cc <__assert_func+0x38>)
 80065ba:	461c      	mov	r4, r3
 80065bc:	e7f3      	b.n	80065a6 <__assert_func+0x12>
 80065be:	bf00      	nop
 80065c0:	20000020 	.word	0x20000020
 80065c4:	080073b6 	.word	0x080073b6
 80065c8:	080073c3 	.word	0x080073c3
 80065cc:	080073f1 	.word	0x080073f1

080065d0 <_free_r>:
 80065d0:	b538      	push	{r3, r4, r5, lr}
 80065d2:	4605      	mov	r5, r0
 80065d4:	2900      	cmp	r1, #0
 80065d6:	d041      	beq.n	800665c <_free_r+0x8c>
 80065d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065dc:	1f0c      	subs	r4, r1, #4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	bfb8      	it	lt
 80065e2:	18e4      	addlt	r4, r4, r3
 80065e4:	f000 f8e8 	bl	80067b8 <__malloc_lock>
 80065e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006660 <_free_r+0x90>)
 80065ea:	6813      	ldr	r3, [r2, #0]
 80065ec:	b933      	cbnz	r3, 80065fc <_free_r+0x2c>
 80065ee:	6063      	str	r3, [r4, #4]
 80065f0:	6014      	str	r4, [r2, #0]
 80065f2:	4628      	mov	r0, r5
 80065f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065f8:	f000 b8e4 	b.w	80067c4 <__malloc_unlock>
 80065fc:	42a3      	cmp	r3, r4
 80065fe:	d908      	bls.n	8006612 <_free_r+0x42>
 8006600:	6820      	ldr	r0, [r4, #0]
 8006602:	1821      	adds	r1, r4, r0
 8006604:	428b      	cmp	r3, r1
 8006606:	bf01      	itttt	eq
 8006608:	6819      	ldreq	r1, [r3, #0]
 800660a:	685b      	ldreq	r3, [r3, #4]
 800660c:	1809      	addeq	r1, r1, r0
 800660e:	6021      	streq	r1, [r4, #0]
 8006610:	e7ed      	b.n	80065ee <_free_r+0x1e>
 8006612:	461a      	mov	r2, r3
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	b10b      	cbz	r3, 800661c <_free_r+0x4c>
 8006618:	42a3      	cmp	r3, r4
 800661a:	d9fa      	bls.n	8006612 <_free_r+0x42>
 800661c:	6811      	ldr	r1, [r2, #0]
 800661e:	1850      	adds	r0, r2, r1
 8006620:	42a0      	cmp	r0, r4
 8006622:	d10b      	bne.n	800663c <_free_r+0x6c>
 8006624:	6820      	ldr	r0, [r4, #0]
 8006626:	4401      	add	r1, r0
 8006628:	1850      	adds	r0, r2, r1
 800662a:	4283      	cmp	r3, r0
 800662c:	6011      	str	r1, [r2, #0]
 800662e:	d1e0      	bne.n	80065f2 <_free_r+0x22>
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	6053      	str	r3, [r2, #4]
 8006636:	4408      	add	r0, r1
 8006638:	6010      	str	r0, [r2, #0]
 800663a:	e7da      	b.n	80065f2 <_free_r+0x22>
 800663c:	d902      	bls.n	8006644 <_free_r+0x74>
 800663e:	230c      	movs	r3, #12
 8006640:	602b      	str	r3, [r5, #0]
 8006642:	e7d6      	b.n	80065f2 <_free_r+0x22>
 8006644:	6820      	ldr	r0, [r4, #0]
 8006646:	1821      	adds	r1, r4, r0
 8006648:	428b      	cmp	r3, r1
 800664a:	bf04      	itt	eq
 800664c:	6819      	ldreq	r1, [r3, #0]
 800664e:	685b      	ldreq	r3, [r3, #4]
 8006650:	6063      	str	r3, [r4, #4]
 8006652:	bf04      	itt	eq
 8006654:	1809      	addeq	r1, r1, r0
 8006656:	6021      	streq	r1, [r4, #0]
 8006658:	6054      	str	r4, [r2, #4]
 800665a:	e7ca      	b.n	80065f2 <_free_r+0x22>
 800665c:	bd38      	pop	{r3, r4, r5, pc}
 800665e:	bf00      	nop
 8006660:	20000468 	.word	0x20000468

08006664 <malloc>:
 8006664:	4b02      	ldr	r3, [pc, #8]	@ (8006670 <malloc+0xc>)
 8006666:	4601      	mov	r1, r0
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	f000 b825 	b.w	80066b8 <_malloc_r>
 800666e:	bf00      	nop
 8006670:	20000020 	.word	0x20000020

08006674 <sbrk_aligned>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	4e0f      	ldr	r6, [pc, #60]	@ (80066b4 <sbrk_aligned+0x40>)
 8006678:	460c      	mov	r4, r1
 800667a:	6831      	ldr	r1, [r6, #0]
 800667c:	4605      	mov	r5, r0
 800667e:	b911      	cbnz	r1, 8006686 <sbrk_aligned+0x12>
 8006680:	f000 fcc6 	bl	8007010 <_sbrk_r>
 8006684:	6030      	str	r0, [r6, #0]
 8006686:	4621      	mov	r1, r4
 8006688:	4628      	mov	r0, r5
 800668a:	f000 fcc1 	bl	8007010 <_sbrk_r>
 800668e:	1c43      	adds	r3, r0, #1
 8006690:	d103      	bne.n	800669a <sbrk_aligned+0x26>
 8006692:	f04f 34ff 	mov.w	r4, #4294967295
 8006696:	4620      	mov	r0, r4
 8006698:	bd70      	pop	{r4, r5, r6, pc}
 800669a:	1cc4      	adds	r4, r0, #3
 800669c:	f024 0403 	bic.w	r4, r4, #3
 80066a0:	42a0      	cmp	r0, r4
 80066a2:	d0f8      	beq.n	8006696 <sbrk_aligned+0x22>
 80066a4:	1a21      	subs	r1, r4, r0
 80066a6:	4628      	mov	r0, r5
 80066a8:	f000 fcb2 	bl	8007010 <_sbrk_r>
 80066ac:	3001      	adds	r0, #1
 80066ae:	d1f2      	bne.n	8006696 <sbrk_aligned+0x22>
 80066b0:	e7ef      	b.n	8006692 <sbrk_aligned+0x1e>
 80066b2:	bf00      	nop
 80066b4:	20000464 	.word	0x20000464

080066b8 <_malloc_r>:
 80066b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066bc:	1ccd      	adds	r5, r1, #3
 80066be:	f025 0503 	bic.w	r5, r5, #3
 80066c2:	3508      	adds	r5, #8
 80066c4:	2d0c      	cmp	r5, #12
 80066c6:	bf38      	it	cc
 80066c8:	250c      	movcc	r5, #12
 80066ca:	2d00      	cmp	r5, #0
 80066cc:	4606      	mov	r6, r0
 80066ce:	db01      	blt.n	80066d4 <_malloc_r+0x1c>
 80066d0:	42a9      	cmp	r1, r5
 80066d2:	d904      	bls.n	80066de <_malloc_r+0x26>
 80066d4:	230c      	movs	r3, #12
 80066d6:	6033      	str	r3, [r6, #0]
 80066d8:	2000      	movs	r0, #0
 80066da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067b4 <_malloc_r+0xfc>
 80066e2:	f000 f869 	bl	80067b8 <__malloc_lock>
 80066e6:	f8d8 3000 	ldr.w	r3, [r8]
 80066ea:	461c      	mov	r4, r3
 80066ec:	bb44      	cbnz	r4, 8006740 <_malloc_r+0x88>
 80066ee:	4629      	mov	r1, r5
 80066f0:	4630      	mov	r0, r6
 80066f2:	f7ff ffbf 	bl	8006674 <sbrk_aligned>
 80066f6:	1c43      	adds	r3, r0, #1
 80066f8:	4604      	mov	r4, r0
 80066fa:	d158      	bne.n	80067ae <_malloc_r+0xf6>
 80066fc:	f8d8 4000 	ldr.w	r4, [r8]
 8006700:	4627      	mov	r7, r4
 8006702:	2f00      	cmp	r7, #0
 8006704:	d143      	bne.n	800678e <_malloc_r+0xd6>
 8006706:	2c00      	cmp	r4, #0
 8006708:	d04b      	beq.n	80067a2 <_malloc_r+0xea>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	4639      	mov	r1, r7
 800670e:	4630      	mov	r0, r6
 8006710:	eb04 0903 	add.w	r9, r4, r3
 8006714:	f000 fc7c 	bl	8007010 <_sbrk_r>
 8006718:	4581      	cmp	r9, r0
 800671a:	d142      	bne.n	80067a2 <_malloc_r+0xea>
 800671c:	6821      	ldr	r1, [r4, #0]
 800671e:	1a6d      	subs	r5, r5, r1
 8006720:	4629      	mov	r1, r5
 8006722:	4630      	mov	r0, r6
 8006724:	f7ff ffa6 	bl	8006674 <sbrk_aligned>
 8006728:	3001      	adds	r0, #1
 800672a:	d03a      	beq.n	80067a2 <_malloc_r+0xea>
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	442b      	add	r3, r5
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	f8d8 3000 	ldr.w	r3, [r8]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	bb62      	cbnz	r2, 8006794 <_malloc_r+0xdc>
 800673a:	f8c8 7000 	str.w	r7, [r8]
 800673e:	e00f      	b.n	8006760 <_malloc_r+0xa8>
 8006740:	6822      	ldr	r2, [r4, #0]
 8006742:	1b52      	subs	r2, r2, r5
 8006744:	d420      	bmi.n	8006788 <_malloc_r+0xd0>
 8006746:	2a0b      	cmp	r2, #11
 8006748:	d917      	bls.n	800677a <_malloc_r+0xc2>
 800674a:	1961      	adds	r1, r4, r5
 800674c:	42a3      	cmp	r3, r4
 800674e:	6025      	str	r5, [r4, #0]
 8006750:	bf18      	it	ne
 8006752:	6059      	strne	r1, [r3, #4]
 8006754:	6863      	ldr	r3, [r4, #4]
 8006756:	bf08      	it	eq
 8006758:	f8c8 1000 	streq.w	r1, [r8]
 800675c:	5162      	str	r2, [r4, r5]
 800675e:	604b      	str	r3, [r1, #4]
 8006760:	4630      	mov	r0, r6
 8006762:	f000 f82f 	bl	80067c4 <__malloc_unlock>
 8006766:	f104 000b 	add.w	r0, r4, #11
 800676a:	1d23      	adds	r3, r4, #4
 800676c:	f020 0007 	bic.w	r0, r0, #7
 8006770:	1ac2      	subs	r2, r0, r3
 8006772:	bf1c      	itt	ne
 8006774:	1a1b      	subne	r3, r3, r0
 8006776:	50a3      	strne	r3, [r4, r2]
 8006778:	e7af      	b.n	80066da <_malloc_r+0x22>
 800677a:	6862      	ldr	r2, [r4, #4]
 800677c:	42a3      	cmp	r3, r4
 800677e:	bf0c      	ite	eq
 8006780:	f8c8 2000 	streq.w	r2, [r8]
 8006784:	605a      	strne	r2, [r3, #4]
 8006786:	e7eb      	b.n	8006760 <_malloc_r+0xa8>
 8006788:	4623      	mov	r3, r4
 800678a:	6864      	ldr	r4, [r4, #4]
 800678c:	e7ae      	b.n	80066ec <_malloc_r+0x34>
 800678e:	463c      	mov	r4, r7
 8006790:	687f      	ldr	r7, [r7, #4]
 8006792:	e7b6      	b.n	8006702 <_malloc_r+0x4a>
 8006794:	461a      	mov	r2, r3
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	42a3      	cmp	r3, r4
 800679a:	d1fb      	bne.n	8006794 <_malloc_r+0xdc>
 800679c:	2300      	movs	r3, #0
 800679e:	6053      	str	r3, [r2, #4]
 80067a0:	e7de      	b.n	8006760 <_malloc_r+0xa8>
 80067a2:	230c      	movs	r3, #12
 80067a4:	6033      	str	r3, [r6, #0]
 80067a6:	4630      	mov	r0, r6
 80067a8:	f000 f80c 	bl	80067c4 <__malloc_unlock>
 80067ac:	e794      	b.n	80066d8 <_malloc_r+0x20>
 80067ae:	6005      	str	r5, [r0, #0]
 80067b0:	e7d6      	b.n	8006760 <_malloc_r+0xa8>
 80067b2:	bf00      	nop
 80067b4:	20000468 	.word	0x20000468

080067b8 <__malloc_lock>:
 80067b8:	4801      	ldr	r0, [pc, #4]	@ (80067c0 <__malloc_lock+0x8>)
 80067ba:	f7ff bee8 	b.w	800658e <__retarget_lock_acquire_recursive>
 80067be:	bf00      	nop
 80067c0:	20000460 	.word	0x20000460

080067c4 <__malloc_unlock>:
 80067c4:	4801      	ldr	r0, [pc, #4]	@ (80067cc <__malloc_unlock+0x8>)
 80067c6:	f7ff bee3 	b.w	8006590 <__retarget_lock_release_recursive>
 80067ca:	bf00      	nop
 80067cc:	20000460 	.word	0x20000460

080067d0 <__sfputc_r>:
 80067d0:	6893      	ldr	r3, [r2, #8]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	b410      	push	{r4}
 80067d8:	6093      	str	r3, [r2, #8]
 80067da:	da08      	bge.n	80067ee <__sfputc_r+0x1e>
 80067dc:	6994      	ldr	r4, [r2, #24]
 80067de:	42a3      	cmp	r3, r4
 80067e0:	db01      	blt.n	80067e6 <__sfputc_r+0x16>
 80067e2:	290a      	cmp	r1, #10
 80067e4:	d103      	bne.n	80067ee <__sfputc_r+0x1e>
 80067e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ea:	f000 bb7d 	b.w	8006ee8 <__swbuf_r>
 80067ee:	6813      	ldr	r3, [r2, #0]
 80067f0:	1c58      	adds	r0, r3, #1
 80067f2:	6010      	str	r0, [r2, #0]
 80067f4:	7019      	strb	r1, [r3, #0]
 80067f6:	4608      	mov	r0, r1
 80067f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <__sfputs_r>:
 80067fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006800:	4606      	mov	r6, r0
 8006802:	460f      	mov	r7, r1
 8006804:	4614      	mov	r4, r2
 8006806:	18d5      	adds	r5, r2, r3
 8006808:	42ac      	cmp	r4, r5
 800680a:	d101      	bne.n	8006810 <__sfputs_r+0x12>
 800680c:	2000      	movs	r0, #0
 800680e:	e007      	b.n	8006820 <__sfputs_r+0x22>
 8006810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006814:	463a      	mov	r2, r7
 8006816:	4630      	mov	r0, r6
 8006818:	f7ff ffda 	bl	80067d0 <__sfputc_r>
 800681c:	1c43      	adds	r3, r0, #1
 800681e:	d1f3      	bne.n	8006808 <__sfputs_r+0xa>
 8006820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006824 <_vfiprintf_r>:
 8006824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006828:	460d      	mov	r5, r1
 800682a:	b09d      	sub	sp, #116	@ 0x74
 800682c:	4614      	mov	r4, r2
 800682e:	4698      	mov	r8, r3
 8006830:	4606      	mov	r6, r0
 8006832:	b118      	cbz	r0, 800683c <_vfiprintf_r+0x18>
 8006834:	6a03      	ldr	r3, [r0, #32]
 8006836:	b90b      	cbnz	r3, 800683c <_vfiprintf_r+0x18>
 8006838:	f7ff fd48 	bl	80062cc <__sinit>
 800683c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800683e:	07d9      	lsls	r1, r3, #31
 8006840:	d405      	bmi.n	800684e <_vfiprintf_r+0x2a>
 8006842:	89ab      	ldrh	r3, [r5, #12]
 8006844:	059a      	lsls	r2, r3, #22
 8006846:	d402      	bmi.n	800684e <_vfiprintf_r+0x2a>
 8006848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800684a:	f7ff fea0 	bl	800658e <__retarget_lock_acquire_recursive>
 800684e:	89ab      	ldrh	r3, [r5, #12]
 8006850:	071b      	lsls	r3, r3, #28
 8006852:	d501      	bpl.n	8006858 <_vfiprintf_r+0x34>
 8006854:	692b      	ldr	r3, [r5, #16]
 8006856:	b99b      	cbnz	r3, 8006880 <_vfiprintf_r+0x5c>
 8006858:	4629      	mov	r1, r5
 800685a:	4630      	mov	r0, r6
 800685c:	f000 fb82 	bl	8006f64 <__swsetup_r>
 8006860:	b170      	cbz	r0, 8006880 <_vfiprintf_r+0x5c>
 8006862:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006864:	07dc      	lsls	r4, r3, #31
 8006866:	d504      	bpl.n	8006872 <_vfiprintf_r+0x4e>
 8006868:	f04f 30ff 	mov.w	r0, #4294967295
 800686c:	b01d      	add	sp, #116	@ 0x74
 800686e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006872:	89ab      	ldrh	r3, [r5, #12]
 8006874:	0598      	lsls	r0, r3, #22
 8006876:	d4f7      	bmi.n	8006868 <_vfiprintf_r+0x44>
 8006878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800687a:	f7ff fe89 	bl	8006590 <__retarget_lock_release_recursive>
 800687e:	e7f3      	b.n	8006868 <_vfiprintf_r+0x44>
 8006880:	2300      	movs	r3, #0
 8006882:	9309      	str	r3, [sp, #36]	@ 0x24
 8006884:	2320      	movs	r3, #32
 8006886:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800688a:	f8cd 800c 	str.w	r8, [sp, #12]
 800688e:	2330      	movs	r3, #48	@ 0x30
 8006890:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006a40 <_vfiprintf_r+0x21c>
 8006894:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006898:	f04f 0901 	mov.w	r9, #1
 800689c:	4623      	mov	r3, r4
 800689e:	469a      	mov	sl, r3
 80068a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068a4:	b10a      	cbz	r2, 80068aa <_vfiprintf_r+0x86>
 80068a6:	2a25      	cmp	r2, #37	@ 0x25
 80068a8:	d1f9      	bne.n	800689e <_vfiprintf_r+0x7a>
 80068aa:	ebba 0b04 	subs.w	fp, sl, r4
 80068ae:	d00b      	beq.n	80068c8 <_vfiprintf_r+0xa4>
 80068b0:	465b      	mov	r3, fp
 80068b2:	4622      	mov	r2, r4
 80068b4:	4629      	mov	r1, r5
 80068b6:	4630      	mov	r0, r6
 80068b8:	f7ff ffa1 	bl	80067fe <__sfputs_r>
 80068bc:	3001      	adds	r0, #1
 80068be:	f000 80a7 	beq.w	8006a10 <_vfiprintf_r+0x1ec>
 80068c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068c4:	445a      	add	r2, fp
 80068c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80068c8:	f89a 3000 	ldrb.w	r3, [sl]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 809f 	beq.w	8006a10 <_vfiprintf_r+0x1ec>
 80068d2:	2300      	movs	r3, #0
 80068d4:	f04f 32ff 	mov.w	r2, #4294967295
 80068d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068dc:	f10a 0a01 	add.w	sl, sl, #1
 80068e0:	9304      	str	r3, [sp, #16]
 80068e2:	9307      	str	r3, [sp, #28]
 80068e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80068ea:	4654      	mov	r4, sl
 80068ec:	2205      	movs	r2, #5
 80068ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f2:	4853      	ldr	r0, [pc, #332]	@ (8006a40 <_vfiprintf_r+0x21c>)
 80068f4:	f7f9 fc74 	bl	80001e0 <memchr>
 80068f8:	9a04      	ldr	r2, [sp, #16]
 80068fa:	b9d8      	cbnz	r0, 8006934 <_vfiprintf_r+0x110>
 80068fc:	06d1      	lsls	r1, r2, #27
 80068fe:	bf44      	itt	mi
 8006900:	2320      	movmi	r3, #32
 8006902:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006906:	0713      	lsls	r3, r2, #28
 8006908:	bf44      	itt	mi
 800690a:	232b      	movmi	r3, #43	@ 0x2b
 800690c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006910:	f89a 3000 	ldrb.w	r3, [sl]
 8006914:	2b2a      	cmp	r3, #42	@ 0x2a
 8006916:	d015      	beq.n	8006944 <_vfiprintf_r+0x120>
 8006918:	9a07      	ldr	r2, [sp, #28]
 800691a:	4654      	mov	r4, sl
 800691c:	2000      	movs	r0, #0
 800691e:	f04f 0c0a 	mov.w	ip, #10
 8006922:	4621      	mov	r1, r4
 8006924:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006928:	3b30      	subs	r3, #48	@ 0x30
 800692a:	2b09      	cmp	r3, #9
 800692c:	d94b      	bls.n	80069c6 <_vfiprintf_r+0x1a2>
 800692e:	b1b0      	cbz	r0, 800695e <_vfiprintf_r+0x13a>
 8006930:	9207      	str	r2, [sp, #28]
 8006932:	e014      	b.n	800695e <_vfiprintf_r+0x13a>
 8006934:	eba0 0308 	sub.w	r3, r0, r8
 8006938:	fa09 f303 	lsl.w	r3, r9, r3
 800693c:	4313      	orrs	r3, r2
 800693e:	9304      	str	r3, [sp, #16]
 8006940:	46a2      	mov	sl, r4
 8006942:	e7d2      	b.n	80068ea <_vfiprintf_r+0xc6>
 8006944:	9b03      	ldr	r3, [sp, #12]
 8006946:	1d19      	adds	r1, r3, #4
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	9103      	str	r1, [sp, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	bfbb      	ittet	lt
 8006950:	425b      	neglt	r3, r3
 8006952:	f042 0202 	orrlt.w	r2, r2, #2
 8006956:	9307      	strge	r3, [sp, #28]
 8006958:	9307      	strlt	r3, [sp, #28]
 800695a:	bfb8      	it	lt
 800695c:	9204      	strlt	r2, [sp, #16]
 800695e:	7823      	ldrb	r3, [r4, #0]
 8006960:	2b2e      	cmp	r3, #46	@ 0x2e
 8006962:	d10a      	bne.n	800697a <_vfiprintf_r+0x156>
 8006964:	7863      	ldrb	r3, [r4, #1]
 8006966:	2b2a      	cmp	r3, #42	@ 0x2a
 8006968:	d132      	bne.n	80069d0 <_vfiprintf_r+0x1ac>
 800696a:	9b03      	ldr	r3, [sp, #12]
 800696c:	1d1a      	adds	r2, r3, #4
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	9203      	str	r2, [sp, #12]
 8006972:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006976:	3402      	adds	r4, #2
 8006978:	9305      	str	r3, [sp, #20]
 800697a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006a50 <_vfiprintf_r+0x22c>
 800697e:	7821      	ldrb	r1, [r4, #0]
 8006980:	2203      	movs	r2, #3
 8006982:	4650      	mov	r0, sl
 8006984:	f7f9 fc2c 	bl	80001e0 <memchr>
 8006988:	b138      	cbz	r0, 800699a <_vfiprintf_r+0x176>
 800698a:	9b04      	ldr	r3, [sp, #16]
 800698c:	eba0 000a 	sub.w	r0, r0, sl
 8006990:	2240      	movs	r2, #64	@ 0x40
 8006992:	4082      	lsls	r2, r0
 8006994:	4313      	orrs	r3, r2
 8006996:	3401      	adds	r4, #1
 8006998:	9304      	str	r3, [sp, #16]
 800699a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800699e:	4829      	ldr	r0, [pc, #164]	@ (8006a44 <_vfiprintf_r+0x220>)
 80069a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069a4:	2206      	movs	r2, #6
 80069a6:	f7f9 fc1b 	bl	80001e0 <memchr>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d03f      	beq.n	8006a2e <_vfiprintf_r+0x20a>
 80069ae:	4b26      	ldr	r3, [pc, #152]	@ (8006a48 <_vfiprintf_r+0x224>)
 80069b0:	bb1b      	cbnz	r3, 80069fa <_vfiprintf_r+0x1d6>
 80069b2:	9b03      	ldr	r3, [sp, #12]
 80069b4:	3307      	adds	r3, #7
 80069b6:	f023 0307 	bic.w	r3, r3, #7
 80069ba:	3308      	adds	r3, #8
 80069bc:	9303      	str	r3, [sp, #12]
 80069be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069c0:	443b      	add	r3, r7
 80069c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80069c4:	e76a      	b.n	800689c <_vfiprintf_r+0x78>
 80069c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80069ca:	460c      	mov	r4, r1
 80069cc:	2001      	movs	r0, #1
 80069ce:	e7a8      	b.n	8006922 <_vfiprintf_r+0xfe>
 80069d0:	2300      	movs	r3, #0
 80069d2:	3401      	adds	r4, #1
 80069d4:	9305      	str	r3, [sp, #20]
 80069d6:	4619      	mov	r1, r3
 80069d8:	f04f 0c0a 	mov.w	ip, #10
 80069dc:	4620      	mov	r0, r4
 80069de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069e2:	3a30      	subs	r2, #48	@ 0x30
 80069e4:	2a09      	cmp	r2, #9
 80069e6:	d903      	bls.n	80069f0 <_vfiprintf_r+0x1cc>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d0c6      	beq.n	800697a <_vfiprintf_r+0x156>
 80069ec:	9105      	str	r1, [sp, #20]
 80069ee:	e7c4      	b.n	800697a <_vfiprintf_r+0x156>
 80069f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80069f4:	4604      	mov	r4, r0
 80069f6:	2301      	movs	r3, #1
 80069f8:	e7f0      	b.n	80069dc <_vfiprintf_r+0x1b8>
 80069fa:	ab03      	add	r3, sp, #12
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	462a      	mov	r2, r5
 8006a00:	4b12      	ldr	r3, [pc, #72]	@ (8006a4c <_vfiprintf_r+0x228>)
 8006a02:	a904      	add	r1, sp, #16
 8006a04:	4630      	mov	r0, r6
 8006a06:	f3af 8000 	nop.w
 8006a0a:	4607      	mov	r7, r0
 8006a0c:	1c78      	adds	r0, r7, #1
 8006a0e:	d1d6      	bne.n	80069be <_vfiprintf_r+0x19a>
 8006a10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a12:	07d9      	lsls	r1, r3, #31
 8006a14:	d405      	bmi.n	8006a22 <_vfiprintf_r+0x1fe>
 8006a16:	89ab      	ldrh	r3, [r5, #12]
 8006a18:	059a      	lsls	r2, r3, #22
 8006a1a:	d402      	bmi.n	8006a22 <_vfiprintf_r+0x1fe>
 8006a1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a1e:	f7ff fdb7 	bl	8006590 <__retarget_lock_release_recursive>
 8006a22:	89ab      	ldrh	r3, [r5, #12]
 8006a24:	065b      	lsls	r3, r3, #25
 8006a26:	f53f af1f 	bmi.w	8006868 <_vfiprintf_r+0x44>
 8006a2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a2c:	e71e      	b.n	800686c <_vfiprintf_r+0x48>
 8006a2e:	ab03      	add	r3, sp, #12
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	462a      	mov	r2, r5
 8006a34:	4b05      	ldr	r3, [pc, #20]	@ (8006a4c <_vfiprintf_r+0x228>)
 8006a36:	a904      	add	r1, sp, #16
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f000 f879 	bl	8006b30 <_printf_i>
 8006a3e:	e7e4      	b.n	8006a0a <_vfiprintf_r+0x1e6>
 8006a40:	080073f2 	.word	0x080073f2
 8006a44:	080073fc 	.word	0x080073fc
 8006a48:	00000000 	.word	0x00000000
 8006a4c:	080067ff 	.word	0x080067ff
 8006a50:	080073f8 	.word	0x080073f8

08006a54 <_printf_common>:
 8006a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a58:	4616      	mov	r6, r2
 8006a5a:	4698      	mov	r8, r3
 8006a5c:	688a      	ldr	r2, [r1, #8]
 8006a5e:	690b      	ldr	r3, [r1, #16]
 8006a60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a64:	4293      	cmp	r3, r2
 8006a66:	bfb8      	it	lt
 8006a68:	4613      	movlt	r3, r2
 8006a6a:	6033      	str	r3, [r6, #0]
 8006a6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a70:	4607      	mov	r7, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	b10a      	cbz	r2, 8006a7a <_printf_common+0x26>
 8006a76:	3301      	adds	r3, #1
 8006a78:	6033      	str	r3, [r6, #0]
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	0699      	lsls	r1, r3, #26
 8006a7e:	bf42      	ittt	mi
 8006a80:	6833      	ldrmi	r3, [r6, #0]
 8006a82:	3302      	addmi	r3, #2
 8006a84:	6033      	strmi	r3, [r6, #0]
 8006a86:	6825      	ldr	r5, [r4, #0]
 8006a88:	f015 0506 	ands.w	r5, r5, #6
 8006a8c:	d106      	bne.n	8006a9c <_printf_common+0x48>
 8006a8e:	f104 0a19 	add.w	sl, r4, #25
 8006a92:	68e3      	ldr	r3, [r4, #12]
 8006a94:	6832      	ldr	r2, [r6, #0]
 8006a96:	1a9b      	subs	r3, r3, r2
 8006a98:	42ab      	cmp	r3, r5
 8006a9a:	dc26      	bgt.n	8006aea <_printf_common+0x96>
 8006a9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006aa0:	6822      	ldr	r2, [r4, #0]
 8006aa2:	3b00      	subs	r3, #0
 8006aa4:	bf18      	it	ne
 8006aa6:	2301      	movne	r3, #1
 8006aa8:	0692      	lsls	r2, r2, #26
 8006aaa:	d42b      	bmi.n	8006b04 <_printf_common+0xb0>
 8006aac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ab0:	4641      	mov	r1, r8
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	47c8      	blx	r9
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d01e      	beq.n	8006af8 <_printf_common+0xa4>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	6922      	ldr	r2, [r4, #16]
 8006abe:	f003 0306 	and.w	r3, r3, #6
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	bf02      	ittt	eq
 8006ac6:	68e5      	ldreq	r5, [r4, #12]
 8006ac8:	6833      	ldreq	r3, [r6, #0]
 8006aca:	1aed      	subeq	r5, r5, r3
 8006acc:	68a3      	ldr	r3, [r4, #8]
 8006ace:	bf0c      	ite	eq
 8006ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ad4:	2500      	movne	r5, #0
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	bfc4      	itt	gt
 8006ada:	1a9b      	subgt	r3, r3, r2
 8006adc:	18ed      	addgt	r5, r5, r3
 8006ade:	2600      	movs	r6, #0
 8006ae0:	341a      	adds	r4, #26
 8006ae2:	42b5      	cmp	r5, r6
 8006ae4:	d11a      	bne.n	8006b1c <_printf_common+0xc8>
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	e008      	b.n	8006afc <_printf_common+0xa8>
 8006aea:	2301      	movs	r3, #1
 8006aec:	4652      	mov	r2, sl
 8006aee:	4641      	mov	r1, r8
 8006af0:	4638      	mov	r0, r7
 8006af2:	47c8      	blx	r9
 8006af4:	3001      	adds	r0, #1
 8006af6:	d103      	bne.n	8006b00 <_printf_common+0xac>
 8006af8:	f04f 30ff 	mov.w	r0, #4294967295
 8006afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b00:	3501      	adds	r5, #1
 8006b02:	e7c6      	b.n	8006a92 <_printf_common+0x3e>
 8006b04:	18e1      	adds	r1, r4, r3
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	2030      	movs	r0, #48	@ 0x30
 8006b0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b0e:	4422      	add	r2, r4
 8006b10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b18:	3302      	adds	r3, #2
 8006b1a:	e7c7      	b.n	8006aac <_printf_common+0x58>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	4622      	mov	r2, r4
 8006b20:	4641      	mov	r1, r8
 8006b22:	4638      	mov	r0, r7
 8006b24:	47c8      	blx	r9
 8006b26:	3001      	adds	r0, #1
 8006b28:	d0e6      	beq.n	8006af8 <_printf_common+0xa4>
 8006b2a:	3601      	adds	r6, #1
 8006b2c:	e7d9      	b.n	8006ae2 <_printf_common+0x8e>
	...

08006b30 <_printf_i>:
 8006b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b34:	7e0f      	ldrb	r7, [r1, #24]
 8006b36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b38:	2f78      	cmp	r7, #120	@ 0x78
 8006b3a:	4691      	mov	r9, r2
 8006b3c:	4680      	mov	r8, r0
 8006b3e:	460c      	mov	r4, r1
 8006b40:	469a      	mov	sl, r3
 8006b42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b46:	d807      	bhi.n	8006b58 <_printf_i+0x28>
 8006b48:	2f62      	cmp	r7, #98	@ 0x62
 8006b4a:	d80a      	bhi.n	8006b62 <_printf_i+0x32>
 8006b4c:	2f00      	cmp	r7, #0
 8006b4e:	f000 80d1 	beq.w	8006cf4 <_printf_i+0x1c4>
 8006b52:	2f58      	cmp	r7, #88	@ 0x58
 8006b54:	f000 80b8 	beq.w	8006cc8 <_printf_i+0x198>
 8006b58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b60:	e03a      	b.n	8006bd8 <_printf_i+0xa8>
 8006b62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b66:	2b15      	cmp	r3, #21
 8006b68:	d8f6      	bhi.n	8006b58 <_printf_i+0x28>
 8006b6a:	a101      	add	r1, pc, #4	@ (adr r1, 8006b70 <_printf_i+0x40>)
 8006b6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b70:	08006bc9 	.word	0x08006bc9
 8006b74:	08006bdd 	.word	0x08006bdd
 8006b78:	08006b59 	.word	0x08006b59
 8006b7c:	08006b59 	.word	0x08006b59
 8006b80:	08006b59 	.word	0x08006b59
 8006b84:	08006b59 	.word	0x08006b59
 8006b88:	08006bdd 	.word	0x08006bdd
 8006b8c:	08006b59 	.word	0x08006b59
 8006b90:	08006b59 	.word	0x08006b59
 8006b94:	08006b59 	.word	0x08006b59
 8006b98:	08006b59 	.word	0x08006b59
 8006b9c:	08006cdb 	.word	0x08006cdb
 8006ba0:	08006c07 	.word	0x08006c07
 8006ba4:	08006c95 	.word	0x08006c95
 8006ba8:	08006b59 	.word	0x08006b59
 8006bac:	08006b59 	.word	0x08006b59
 8006bb0:	08006cfd 	.word	0x08006cfd
 8006bb4:	08006b59 	.word	0x08006b59
 8006bb8:	08006c07 	.word	0x08006c07
 8006bbc:	08006b59 	.word	0x08006b59
 8006bc0:	08006b59 	.word	0x08006b59
 8006bc4:	08006c9d 	.word	0x08006c9d
 8006bc8:	6833      	ldr	r3, [r6, #0]
 8006bca:	1d1a      	adds	r2, r3, #4
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6032      	str	r2, [r6, #0]
 8006bd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e09c      	b.n	8006d16 <_printf_i+0x1e6>
 8006bdc:	6833      	ldr	r3, [r6, #0]
 8006bde:	6820      	ldr	r0, [r4, #0]
 8006be0:	1d19      	adds	r1, r3, #4
 8006be2:	6031      	str	r1, [r6, #0]
 8006be4:	0606      	lsls	r6, r0, #24
 8006be6:	d501      	bpl.n	8006bec <_printf_i+0xbc>
 8006be8:	681d      	ldr	r5, [r3, #0]
 8006bea:	e003      	b.n	8006bf4 <_printf_i+0xc4>
 8006bec:	0645      	lsls	r5, r0, #25
 8006bee:	d5fb      	bpl.n	8006be8 <_printf_i+0xb8>
 8006bf0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bf4:	2d00      	cmp	r5, #0
 8006bf6:	da03      	bge.n	8006c00 <_printf_i+0xd0>
 8006bf8:	232d      	movs	r3, #45	@ 0x2d
 8006bfa:	426d      	negs	r5, r5
 8006bfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c00:	4858      	ldr	r0, [pc, #352]	@ (8006d64 <_printf_i+0x234>)
 8006c02:	230a      	movs	r3, #10
 8006c04:	e011      	b.n	8006c2a <_printf_i+0xfa>
 8006c06:	6821      	ldr	r1, [r4, #0]
 8006c08:	6833      	ldr	r3, [r6, #0]
 8006c0a:	0608      	lsls	r0, r1, #24
 8006c0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c10:	d402      	bmi.n	8006c18 <_printf_i+0xe8>
 8006c12:	0649      	lsls	r1, r1, #25
 8006c14:	bf48      	it	mi
 8006c16:	b2ad      	uxthmi	r5, r5
 8006c18:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c1a:	4852      	ldr	r0, [pc, #328]	@ (8006d64 <_printf_i+0x234>)
 8006c1c:	6033      	str	r3, [r6, #0]
 8006c1e:	bf14      	ite	ne
 8006c20:	230a      	movne	r3, #10
 8006c22:	2308      	moveq	r3, #8
 8006c24:	2100      	movs	r1, #0
 8006c26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c2a:	6866      	ldr	r6, [r4, #4]
 8006c2c:	60a6      	str	r6, [r4, #8]
 8006c2e:	2e00      	cmp	r6, #0
 8006c30:	db05      	blt.n	8006c3e <_printf_i+0x10e>
 8006c32:	6821      	ldr	r1, [r4, #0]
 8006c34:	432e      	orrs	r6, r5
 8006c36:	f021 0104 	bic.w	r1, r1, #4
 8006c3a:	6021      	str	r1, [r4, #0]
 8006c3c:	d04b      	beq.n	8006cd6 <_printf_i+0x1a6>
 8006c3e:	4616      	mov	r6, r2
 8006c40:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c44:	fb03 5711 	mls	r7, r3, r1, r5
 8006c48:	5dc7      	ldrb	r7, [r0, r7]
 8006c4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c4e:	462f      	mov	r7, r5
 8006c50:	42bb      	cmp	r3, r7
 8006c52:	460d      	mov	r5, r1
 8006c54:	d9f4      	bls.n	8006c40 <_printf_i+0x110>
 8006c56:	2b08      	cmp	r3, #8
 8006c58:	d10b      	bne.n	8006c72 <_printf_i+0x142>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	07df      	lsls	r7, r3, #31
 8006c5e:	d508      	bpl.n	8006c72 <_printf_i+0x142>
 8006c60:	6923      	ldr	r3, [r4, #16]
 8006c62:	6861      	ldr	r1, [r4, #4]
 8006c64:	4299      	cmp	r1, r3
 8006c66:	bfde      	ittt	le
 8006c68:	2330      	movle	r3, #48	@ 0x30
 8006c6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c72:	1b92      	subs	r2, r2, r6
 8006c74:	6122      	str	r2, [r4, #16]
 8006c76:	f8cd a000 	str.w	sl, [sp]
 8006c7a:	464b      	mov	r3, r9
 8006c7c:	aa03      	add	r2, sp, #12
 8006c7e:	4621      	mov	r1, r4
 8006c80:	4640      	mov	r0, r8
 8006c82:	f7ff fee7 	bl	8006a54 <_printf_common>
 8006c86:	3001      	adds	r0, #1
 8006c88:	d14a      	bne.n	8006d20 <_printf_i+0x1f0>
 8006c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8e:	b004      	add	sp, #16
 8006c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	f043 0320 	orr.w	r3, r3, #32
 8006c9a:	6023      	str	r3, [r4, #0]
 8006c9c:	4832      	ldr	r0, [pc, #200]	@ (8006d68 <_printf_i+0x238>)
 8006c9e:	2778      	movs	r7, #120	@ 0x78
 8006ca0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	6831      	ldr	r1, [r6, #0]
 8006ca8:	061f      	lsls	r7, r3, #24
 8006caa:	f851 5b04 	ldr.w	r5, [r1], #4
 8006cae:	d402      	bmi.n	8006cb6 <_printf_i+0x186>
 8006cb0:	065f      	lsls	r7, r3, #25
 8006cb2:	bf48      	it	mi
 8006cb4:	b2ad      	uxthmi	r5, r5
 8006cb6:	6031      	str	r1, [r6, #0]
 8006cb8:	07d9      	lsls	r1, r3, #31
 8006cba:	bf44      	itt	mi
 8006cbc:	f043 0320 	orrmi.w	r3, r3, #32
 8006cc0:	6023      	strmi	r3, [r4, #0]
 8006cc2:	b11d      	cbz	r5, 8006ccc <_printf_i+0x19c>
 8006cc4:	2310      	movs	r3, #16
 8006cc6:	e7ad      	b.n	8006c24 <_printf_i+0xf4>
 8006cc8:	4826      	ldr	r0, [pc, #152]	@ (8006d64 <_printf_i+0x234>)
 8006cca:	e7e9      	b.n	8006ca0 <_printf_i+0x170>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	f023 0320 	bic.w	r3, r3, #32
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	e7f6      	b.n	8006cc4 <_printf_i+0x194>
 8006cd6:	4616      	mov	r6, r2
 8006cd8:	e7bd      	b.n	8006c56 <_printf_i+0x126>
 8006cda:	6833      	ldr	r3, [r6, #0]
 8006cdc:	6825      	ldr	r5, [r4, #0]
 8006cde:	6961      	ldr	r1, [r4, #20]
 8006ce0:	1d18      	adds	r0, r3, #4
 8006ce2:	6030      	str	r0, [r6, #0]
 8006ce4:	062e      	lsls	r6, r5, #24
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	d501      	bpl.n	8006cee <_printf_i+0x1be>
 8006cea:	6019      	str	r1, [r3, #0]
 8006cec:	e002      	b.n	8006cf4 <_printf_i+0x1c4>
 8006cee:	0668      	lsls	r0, r5, #25
 8006cf0:	d5fb      	bpl.n	8006cea <_printf_i+0x1ba>
 8006cf2:	8019      	strh	r1, [r3, #0]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	6123      	str	r3, [r4, #16]
 8006cf8:	4616      	mov	r6, r2
 8006cfa:	e7bc      	b.n	8006c76 <_printf_i+0x146>
 8006cfc:	6833      	ldr	r3, [r6, #0]
 8006cfe:	1d1a      	adds	r2, r3, #4
 8006d00:	6032      	str	r2, [r6, #0]
 8006d02:	681e      	ldr	r6, [r3, #0]
 8006d04:	6862      	ldr	r2, [r4, #4]
 8006d06:	2100      	movs	r1, #0
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f7f9 fa69 	bl	80001e0 <memchr>
 8006d0e:	b108      	cbz	r0, 8006d14 <_printf_i+0x1e4>
 8006d10:	1b80      	subs	r0, r0, r6
 8006d12:	6060      	str	r0, [r4, #4]
 8006d14:	6863      	ldr	r3, [r4, #4]
 8006d16:	6123      	str	r3, [r4, #16]
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d1e:	e7aa      	b.n	8006c76 <_printf_i+0x146>
 8006d20:	6923      	ldr	r3, [r4, #16]
 8006d22:	4632      	mov	r2, r6
 8006d24:	4649      	mov	r1, r9
 8006d26:	4640      	mov	r0, r8
 8006d28:	47d0      	blx	sl
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	d0ad      	beq.n	8006c8a <_printf_i+0x15a>
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	079b      	lsls	r3, r3, #30
 8006d32:	d413      	bmi.n	8006d5c <_printf_i+0x22c>
 8006d34:	68e0      	ldr	r0, [r4, #12]
 8006d36:	9b03      	ldr	r3, [sp, #12]
 8006d38:	4298      	cmp	r0, r3
 8006d3a:	bfb8      	it	lt
 8006d3c:	4618      	movlt	r0, r3
 8006d3e:	e7a6      	b.n	8006c8e <_printf_i+0x15e>
 8006d40:	2301      	movs	r3, #1
 8006d42:	4632      	mov	r2, r6
 8006d44:	4649      	mov	r1, r9
 8006d46:	4640      	mov	r0, r8
 8006d48:	47d0      	blx	sl
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	d09d      	beq.n	8006c8a <_printf_i+0x15a>
 8006d4e:	3501      	adds	r5, #1
 8006d50:	68e3      	ldr	r3, [r4, #12]
 8006d52:	9903      	ldr	r1, [sp, #12]
 8006d54:	1a5b      	subs	r3, r3, r1
 8006d56:	42ab      	cmp	r3, r5
 8006d58:	dcf2      	bgt.n	8006d40 <_printf_i+0x210>
 8006d5a:	e7eb      	b.n	8006d34 <_printf_i+0x204>
 8006d5c:	2500      	movs	r5, #0
 8006d5e:	f104 0619 	add.w	r6, r4, #25
 8006d62:	e7f5      	b.n	8006d50 <_printf_i+0x220>
 8006d64:	08007403 	.word	0x08007403
 8006d68:	08007414 	.word	0x08007414

08006d6c <__sflush_r>:
 8006d6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d74:	0716      	lsls	r6, r2, #28
 8006d76:	4605      	mov	r5, r0
 8006d78:	460c      	mov	r4, r1
 8006d7a:	d454      	bmi.n	8006e26 <__sflush_r+0xba>
 8006d7c:	684b      	ldr	r3, [r1, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	dc02      	bgt.n	8006d88 <__sflush_r+0x1c>
 8006d82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	dd48      	ble.n	8006e1a <__sflush_r+0xae>
 8006d88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d8a:	2e00      	cmp	r6, #0
 8006d8c:	d045      	beq.n	8006e1a <__sflush_r+0xae>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d94:	682f      	ldr	r7, [r5, #0]
 8006d96:	6a21      	ldr	r1, [r4, #32]
 8006d98:	602b      	str	r3, [r5, #0]
 8006d9a:	d030      	beq.n	8006dfe <__sflush_r+0x92>
 8006d9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d9e:	89a3      	ldrh	r3, [r4, #12]
 8006da0:	0759      	lsls	r1, r3, #29
 8006da2:	d505      	bpl.n	8006db0 <__sflush_r+0x44>
 8006da4:	6863      	ldr	r3, [r4, #4]
 8006da6:	1ad2      	subs	r2, r2, r3
 8006da8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006daa:	b10b      	cbz	r3, 8006db0 <__sflush_r+0x44>
 8006dac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006dae:	1ad2      	subs	r2, r2, r3
 8006db0:	2300      	movs	r3, #0
 8006db2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006db4:	6a21      	ldr	r1, [r4, #32]
 8006db6:	4628      	mov	r0, r5
 8006db8:	47b0      	blx	r6
 8006dba:	1c43      	adds	r3, r0, #1
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	d106      	bne.n	8006dce <__sflush_r+0x62>
 8006dc0:	6829      	ldr	r1, [r5, #0]
 8006dc2:	291d      	cmp	r1, #29
 8006dc4:	d82b      	bhi.n	8006e1e <__sflush_r+0xb2>
 8006dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8006e70 <__sflush_r+0x104>)
 8006dc8:	40ca      	lsrs	r2, r1
 8006dca:	07d6      	lsls	r6, r2, #31
 8006dcc:	d527      	bpl.n	8006e1e <__sflush_r+0xb2>
 8006dce:	2200      	movs	r2, #0
 8006dd0:	6062      	str	r2, [r4, #4]
 8006dd2:	04d9      	lsls	r1, r3, #19
 8006dd4:	6922      	ldr	r2, [r4, #16]
 8006dd6:	6022      	str	r2, [r4, #0]
 8006dd8:	d504      	bpl.n	8006de4 <__sflush_r+0x78>
 8006dda:	1c42      	adds	r2, r0, #1
 8006ddc:	d101      	bne.n	8006de2 <__sflush_r+0x76>
 8006dde:	682b      	ldr	r3, [r5, #0]
 8006de0:	b903      	cbnz	r3, 8006de4 <__sflush_r+0x78>
 8006de2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006de4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006de6:	602f      	str	r7, [r5, #0]
 8006de8:	b1b9      	cbz	r1, 8006e1a <__sflush_r+0xae>
 8006dea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dee:	4299      	cmp	r1, r3
 8006df0:	d002      	beq.n	8006df8 <__sflush_r+0x8c>
 8006df2:	4628      	mov	r0, r5
 8006df4:	f7ff fbec 	bl	80065d0 <_free_r>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dfc:	e00d      	b.n	8006e1a <__sflush_r+0xae>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4628      	mov	r0, r5
 8006e02:	47b0      	blx	r6
 8006e04:	4602      	mov	r2, r0
 8006e06:	1c50      	adds	r0, r2, #1
 8006e08:	d1c9      	bne.n	8006d9e <__sflush_r+0x32>
 8006e0a:	682b      	ldr	r3, [r5, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0c6      	beq.n	8006d9e <__sflush_r+0x32>
 8006e10:	2b1d      	cmp	r3, #29
 8006e12:	d001      	beq.n	8006e18 <__sflush_r+0xac>
 8006e14:	2b16      	cmp	r3, #22
 8006e16:	d11e      	bne.n	8006e56 <__sflush_r+0xea>
 8006e18:	602f      	str	r7, [r5, #0]
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	e022      	b.n	8006e64 <__sflush_r+0xf8>
 8006e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e22:	b21b      	sxth	r3, r3
 8006e24:	e01b      	b.n	8006e5e <__sflush_r+0xf2>
 8006e26:	690f      	ldr	r7, [r1, #16]
 8006e28:	2f00      	cmp	r7, #0
 8006e2a:	d0f6      	beq.n	8006e1a <__sflush_r+0xae>
 8006e2c:	0793      	lsls	r3, r2, #30
 8006e2e:	680e      	ldr	r6, [r1, #0]
 8006e30:	bf08      	it	eq
 8006e32:	694b      	ldreq	r3, [r1, #20]
 8006e34:	600f      	str	r7, [r1, #0]
 8006e36:	bf18      	it	ne
 8006e38:	2300      	movne	r3, #0
 8006e3a:	eba6 0807 	sub.w	r8, r6, r7
 8006e3e:	608b      	str	r3, [r1, #8]
 8006e40:	f1b8 0f00 	cmp.w	r8, #0
 8006e44:	dde9      	ble.n	8006e1a <__sflush_r+0xae>
 8006e46:	6a21      	ldr	r1, [r4, #32]
 8006e48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e4a:	4643      	mov	r3, r8
 8006e4c:	463a      	mov	r2, r7
 8006e4e:	4628      	mov	r0, r5
 8006e50:	47b0      	blx	r6
 8006e52:	2800      	cmp	r0, #0
 8006e54:	dc08      	bgt.n	8006e68 <__sflush_r+0xfc>
 8006e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e5e:	81a3      	strh	r3, [r4, #12]
 8006e60:	f04f 30ff 	mov.w	r0, #4294967295
 8006e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e68:	4407      	add	r7, r0
 8006e6a:	eba8 0800 	sub.w	r8, r8, r0
 8006e6e:	e7e7      	b.n	8006e40 <__sflush_r+0xd4>
 8006e70:	20400001 	.word	0x20400001

08006e74 <_fflush_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	690b      	ldr	r3, [r1, #16]
 8006e78:	4605      	mov	r5, r0
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	b913      	cbnz	r3, 8006e84 <_fflush_r+0x10>
 8006e7e:	2500      	movs	r5, #0
 8006e80:	4628      	mov	r0, r5
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	b118      	cbz	r0, 8006e8e <_fflush_r+0x1a>
 8006e86:	6a03      	ldr	r3, [r0, #32]
 8006e88:	b90b      	cbnz	r3, 8006e8e <_fflush_r+0x1a>
 8006e8a:	f7ff fa1f 	bl	80062cc <__sinit>
 8006e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0f3      	beq.n	8006e7e <_fflush_r+0xa>
 8006e96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e98:	07d0      	lsls	r0, r2, #31
 8006e9a:	d404      	bmi.n	8006ea6 <_fflush_r+0x32>
 8006e9c:	0599      	lsls	r1, r3, #22
 8006e9e:	d402      	bmi.n	8006ea6 <_fflush_r+0x32>
 8006ea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ea2:	f7ff fb74 	bl	800658e <__retarget_lock_acquire_recursive>
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	f7ff ff5f 	bl	8006d6c <__sflush_r>
 8006eae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006eb0:	07da      	lsls	r2, r3, #31
 8006eb2:	4605      	mov	r5, r0
 8006eb4:	d4e4      	bmi.n	8006e80 <_fflush_r+0xc>
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	059b      	lsls	r3, r3, #22
 8006eba:	d4e1      	bmi.n	8006e80 <_fflush_r+0xc>
 8006ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ebe:	f7ff fb67 	bl	8006590 <__retarget_lock_release_recursive>
 8006ec2:	e7dd      	b.n	8006e80 <_fflush_r+0xc>

08006ec4 <fiprintf>:
 8006ec4:	b40e      	push	{r1, r2, r3}
 8006ec6:	b503      	push	{r0, r1, lr}
 8006ec8:	4601      	mov	r1, r0
 8006eca:	ab03      	add	r3, sp, #12
 8006ecc:	4805      	ldr	r0, [pc, #20]	@ (8006ee4 <fiprintf+0x20>)
 8006ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ed2:	6800      	ldr	r0, [r0, #0]
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	f7ff fca5 	bl	8006824 <_vfiprintf_r>
 8006eda:	b002      	add	sp, #8
 8006edc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ee0:	b003      	add	sp, #12
 8006ee2:	4770      	bx	lr
 8006ee4:	20000020 	.word	0x20000020

08006ee8 <__swbuf_r>:
 8006ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eea:	460e      	mov	r6, r1
 8006eec:	4614      	mov	r4, r2
 8006eee:	4605      	mov	r5, r0
 8006ef0:	b118      	cbz	r0, 8006efa <__swbuf_r+0x12>
 8006ef2:	6a03      	ldr	r3, [r0, #32]
 8006ef4:	b90b      	cbnz	r3, 8006efa <__swbuf_r+0x12>
 8006ef6:	f7ff f9e9 	bl	80062cc <__sinit>
 8006efa:	69a3      	ldr	r3, [r4, #24]
 8006efc:	60a3      	str	r3, [r4, #8]
 8006efe:	89a3      	ldrh	r3, [r4, #12]
 8006f00:	071a      	lsls	r2, r3, #28
 8006f02:	d501      	bpl.n	8006f08 <__swbuf_r+0x20>
 8006f04:	6923      	ldr	r3, [r4, #16]
 8006f06:	b943      	cbnz	r3, 8006f1a <__swbuf_r+0x32>
 8006f08:	4621      	mov	r1, r4
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f000 f82a 	bl	8006f64 <__swsetup_r>
 8006f10:	b118      	cbz	r0, 8006f1a <__swbuf_r+0x32>
 8006f12:	f04f 37ff 	mov.w	r7, #4294967295
 8006f16:	4638      	mov	r0, r7
 8006f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	6922      	ldr	r2, [r4, #16]
 8006f1e:	1a98      	subs	r0, r3, r2
 8006f20:	6963      	ldr	r3, [r4, #20]
 8006f22:	b2f6      	uxtb	r6, r6
 8006f24:	4283      	cmp	r3, r0
 8006f26:	4637      	mov	r7, r6
 8006f28:	dc05      	bgt.n	8006f36 <__swbuf_r+0x4e>
 8006f2a:	4621      	mov	r1, r4
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	f7ff ffa1 	bl	8006e74 <_fflush_r>
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d1ed      	bne.n	8006f12 <__swbuf_r+0x2a>
 8006f36:	68a3      	ldr	r3, [r4, #8]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	60a3      	str	r3, [r4, #8]
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	6022      	str	r2, [r4, #0]
 8006f42:	701e      	strb	r6, [r3, #0]
 8006f44:	6962      	ldr	r2, [r4, #20]
 8006f46:	1c43      	adds	r3, r0, #1
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d004      	beq.n	8006f56 <__swbuf_r+0x6e>
 8006f4c:	89a3      	ldrh	r3, [r4, #12]
 8006f4e:	07db      	lsls	r3, r3, #31
 8006f50:	d5e1      	bpl.n	8006f16 <__swbuf_r+0x2e>
 8006f52:	2e0a      	cmp	r6, #10
 8006f54:	d1df      	bne.n	8006f16 <__swbuf_r+0x2e>
 8006f56:	4621      	mov	r1, r4
 8006f58:	4628      	mov	r0, r5
 8006f5a:	f7ff ff8b 	bl	8006e74 <_fflush_r>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	d0d9      	beq.n	8006f16 <__swbuf_r+0x2e>
 8006f62:	e7d6      	b.n	8006f12 <__swbuf_r+0x2a>

08006f64 <__swsetup_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	4b29      	ldr	r3, [pc, #164]	@ (800700c <__swsetup_r+0xa8>)
 8006f68:	4605      	mov	r5, r0
 8006f6a:	6818      	ldr	r0, [r3, #0]
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	b118      	cbz	r0, 8006f78 <__swsetup_r+0x14>
 8006f70:	6a03      	ldr	r3, [r0, #32]
 8006f72:	b90b      	cbnz	r3, 8006f78 <__swsetup_r+0x14>
 8006f74:	f7ff f9aa 	bl	80062cc <__sinit>
 8006f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f7c:	0719      	lsls	r1, r3, #28
 8006f7e:	d422      	bmi.n	8006fc6 <__swsetup_r+0x62>
 8006f80:	06da      	lsls	r2, r3, #27
 8006f82:	d407      	bmi.n	8006f94 <__swsetup_r+0x30>
 8006f84:	2209      	movs	r2, #9
 8006f86:	602a      	str	r2, [r5, #0]
 8006f88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f8c:	81a3      	strh	r3, [r4, #12]
 8006f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f92:	e033      	b.n	8006ffc <__swsetup_r+0x98>
 8006f94:	0758      	lsls	r0, r3, #29
 8006f96:	d512      	bpl.n	8006fbe <__swsetup_r+0x5a>
 8006f98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f9a:	b141      	cbz	r1, 8006fae <__swsetup_r+0x4a>
 8006f9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fa0:	4299      	cmp	r1, r3
 8006fa2:	d002      	beq.n	8006faa <__swsetup_r+0x46>
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f7ff fb13 	bl	80065d0 <_free_r>
 8006faa:	2300      	movs	r3, #0
 8006fac:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fae:	89a3      	ldrh	r3, [r4, #12]
 8006fb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006fb4:	81a3      	strh	r3, [r4, #12]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	6063      	str	r3, [r4, #4]
 8006fba:	6923      	ldr	r3, [r4, #16]
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	f043 0308 	orr.w	r3, r3, #8
 8006fc4:	81a3      	strh	r3, [r4, #12]
 8006fc6:	6923      	ldr	r3, [r4, #16]
 8006fc8:	b94b      	cbnz	r3, 8006fde <__swsetup_r+0x7a>
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fd4:	d003      	beq.n	8006fde <__swsetup_r+0x7a>
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f000 f856 	bl	800708a <__smakebuf_r>
 8006fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fe2:	f013 0201 	ands.w	r2, r3, #1
 8006fe6:	d00a      	beq.n	8006ffe <__swsetup_r+0x9a>
 8006fe8:	2200      	movs	r2, #0
 8006fea:	60a2      	str	r2, [r4, #8]
 8006fec:	6962      	ldr	r2, [r4, #20]
 8006fee:	4252      	negs	r2, r2
 8006ff0:	61a2      	str	r2, [r4, #24]
 8006ff2:	6922      	ldr	r2, [r4, #16]
 8006ff4:	b942      	cbnz	r2, 8007008 <__swsetup_r+0xa4>
 8006ff6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006ffa:	d1c5      	bne.n	8006f88 <__swsetup_r+0x24>
 8006ffc:	bd38      	pop	{r3, r4, r5, pc}
 8006ffe:	0799      	lsls	r1, r3, #30
 8007000:	bf58      	it	pl
 8007002:	6962      	ldrpl	r2, [r4, #20]
 8007004:	60a2      	str	r2, [r4, #8]
 8007006:	e7f4      	b.n	8006ff2 <__swsetup_r+0x8e>
 8007008:	2000      	movs	r0, #0
 800700a:	e7f7      	b.n	8006ffc <__swsetup_r+0x98>
 800700c:	20000020 	.word	0x20000020

08007010 <_sbrk_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	4d06      	ldr	r5, [pc, #24]	@ (800702c <_sbrk_r+0x1c>)
 8007014:	2300      	movs	r3, #0
 8007016:	4604      	mov	r4, r0
 8007018:	4608      	mov	r0, r1
 800701a:	602b      	str	r3, [r5, #0]
 800701c:	f7fa fc8c 	bl	8001938 <_sbrk>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d102      	bne.n	800702a <_sbrk_r+0x1a>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	b103      	cbz	r3, 800702a <_sbrk_r+0x1a>
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	2000045c 	.word	0x2000045c

08007030 <abort>:
 8007030:	b508      	push	{r3, lr}
 8007032:	2006      	movs	r0, #6
 8007034:	f000 f88e 	bl	8007154 <raise>
 8007038:	2001      	movs	r0, #1
 800703a:	f7fa fc05 	bl	8001848 <_exit>

0800703e <__swhatbuf_r>:
 800703e:	b570      	push	{r4, r5, r6, lr}
 8007040:	460c      	mov	r4, r1
 8007042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007046:	2900      	cmp	r1, #0
 8007048:	b096      	sub	sp, #88	@ 0x58
 800704a:	4615      	mov	r5, r2
 800704c:	461e      	mov	r6, r3
 800704e:	da0d      	bge.n	800706c <__swhatbuf_r+0x2e>
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007056:	f04f 0100 	mov.w	r1, #0
 800705a:	bf14      	ite	ne
 800705c:	2340      	movne	r3, #64	@ 0x40
 800705e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007062:	2000      	movs	r0, #0
 8007064:	6031      	str	r1, [r6, #0]
 8007066:	602b      	str	r3, [r5, #0]
 8007068:	b016      	add	sp, #88	@ 0x58
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	466a      	mov	r2, sp
 800706e:	f000 f879 	bl	8007164 <_fstat_r>
 8007072:	2800      	cmp	r0, #0
 8007074:	dbec      	blt.n	8007050 <__swhatbuf_r+0x12>
 8007076:	9901      	ldr	r1, [sp, #4]
 8007078:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800707c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007080:	4259      	negs	r1, r3
 8007082:	4159      	adcs	r1, r3
 8007084:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007088:	e7eb      	b.n	8007062 <__swhatbuf_r+0x24>

0800708a <__smakebuf_r>:
 800708a:	898b      	ldrh	r3, [r1, #12]
 800708c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800708e:	079d      	lsls	r5, r3, #30
 8007090:	4606      	mov	r6, r0
 8007092:	460c      	mov	r4, r1
 8007094:	d507      	bpl.n	80070a6 <__smakebuf_r+0x1c>
 8007096:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800709a:	6023      	str	r3, [r4, #0]
 800709c:	6123      	str	r3, [r4, #16]
 800709e:	2301      	movs	r3, #1
 80070a0:	6163      	str	r3, [r4, #20]
 80070a2:	b003      	add	sp, #12
 80070a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070a6:	ab01      	add	r3, sp, #4
 80070a8:	466a      	mov	r2, sp
 80070aa:	f7ff ffc8 	bl	800703e <__swhatbuf_r>
 80070ae:	9f00      	ldr	r7, [sp, #0]
 80070b0:	4605      	mov	r5, r0
 80070b2:	4639      	mov	r1, r7
 80070b4:	4630      	mov	r0, r6
 80070b6:	f7ff faff 	bl	80066b8 <_malloc_r>
 80070ba:	b948      	cbnz	r0, 80070d0 <__smakebuf_r+0x46>
 80070bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070c0:	059a      	lsls	r2, r3, #22
 80070c2:	d4ee      	bmi.n	80070a2 <__smakebuf_r+0x18>
 80070c4:	f023 0303 	bic.w	r3, r3, #3
 80070c8:	f043 0302 	orr.w	r3, r3, #2
 80070cc:	81a3      	strh	r3, [r4, #12]
 80070ce:	e7e2      	b.n	8007096 <__smakebuf_r+0xc>
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	6020      	str	r0, [r4, #0]
 80070d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070d8:	81a3      	strh	r3, [r4, #12]
 80070da:	9b01      	ldr	r3, [sp, #4]
 80070dc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80070e0:	b15b      	cbz	r3, 80070fa <__smakebuf_r+0x70>
 80070e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070e6:	4630      	mov	r0, r6
 80070e8:	f000 f84e 	bl	8007188 <_isatty_r>
 80070ec:	b128      	cbz	r0, 80070fa <__smakebuf_r+0x70>
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	f023 0303 	bic.w	r3, r3, #3
 80070f4:	f043 0301 	orr.w	r3, r3, #1
 80070f8:	81a3      	strh	r3, [r4, #12]
 80070fa:	89a3      	ldrh	r3, [r4, #12]
 80070fc:	431d      	orrs	r5, r3
 80070fe:	81a5      	strh	r5, [r4, #12]
 8007100:	e7cf      	b.n	80070a2 <__smakebuf_r+0x18>

08007102 <_raise_r>:
 8007102:	291f      	cmp	r1, #31
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4605      	mov	r5, r0
 8007108:	460c      	mov	r4, r1
 800710a:	d904      	bls.n	8007116 <_raise_r+0x14>
 800710c:	2316      	movs	r3, #22
 800710e:	6003      	str	r3, [r0, #0]
 8007110:	f04f 30ff 	mov.w	r0, #4294967295
 8007114:	bd38      	pop	{r3, r4, r5, pc}
 8007116:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007118:	b112      	cbz	r2, 8007120 <_raise_r+0x1e>
 800711a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800711e:	b94b      	cbnz	r3, 8007134 <_raise_r+0x32>
 8007120:	4628      	mov	r0, r5
 8007122:	f000 f853 	bl	80071cc <_getpid_r>
 8007126:	4622      	mov	r2, r4
 8007128:	4601      	mov	r1, r0
 800712a:	4628      	mov	r0, r5
 800712c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007130:	f000 b83a 	b.w	80071a8 <_kill_r>
 8007134:	2b01      	cmp	r3, #1
 8007136:	d00a      	beq.n	800714e <_raise_r+0x4c>
 8007138:	1c59      	adds	r1, r3, #1
 800713a:	d103      	bne.n	8007144 <_raise_r+0x42>
 800713c:	2316      	movs	r3, #22
 800713e:	6003      	str	r3, [r0, #0]
 8007140:	2001      	movs	r0, #1
 8007142:	e7e7      	b.n	8007114 <_raise_r+0x12>
 8007144:	2100      	movs	r1, #0
 8007146:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800714a:	4620      	mov	r0, r4
 800714c:	4798      	blx	r3
 800714e:	2000      	movs	r0, #0
 8007150:	e7e0      	b.n	8007114 <_raise_r+0x12>
	...

08007154 <raise>:
 8007154:	4b02      	ldr	r3, [pc, #8]	@ (8007160 <raise+0xc>)
 8007156:	4601      	mov	r1, r0
 8007158:	6818      	ldr	r0, [r3, #0]
 800715a:	f7ff bfd2 	b.w	8007102 <_raise_r>
 800715e:	bf00      	nop
 8007160:	20000020 	.word	0x20000020

08007164 <_fstat_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	4d07      	ldr	r5, [pc, #28]	@ (8007184 <_fstat_r+0x20>)
 8007168:	2300      	movs	r3, #0
 800716a:	4604      	mov	r4, r0
 800716c:	4608      	mov	r0, r1
 800716e:	4611      	mov	r1, r2
 8007170:	602b      	str	r3, [r5, #0]
 8007172:	f7fa fbb9 	bl	80018e8 <_fstat>
 8007176:	1c43      	adds	r3, r0, #1
 8007178:	d102      	bne.n	8007180 <_fstat_r+0x1c>
 800717a:	682b      	ldr	r3, [r5, #0]
 800717c:	b103      	cbz	r3, 8007180 <_fstat_r+0x1c>
 800717e:	6023      	str	r3, [r4, #0]
 8007180:	bd38      	pop	{r3, r4, r5, pc}
 8007182:	bf00      	nop
 8007184:	2000045c 	.word	0x2000045c

08007188 <_isatty_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	4d06      	ldr	r5, [pc, #24]	@ (80071a4 <_isatty_r+0x1c>)
 800718c:	2300      	movs	r3, #0
 800718e:	4604      	mov	r4, r0
 8007190:	4608      	mov	r0, r1
 8007192:	602b      	str	r3, [r5, #0]
 8007194:	f7fa fbb8 	bl	8001908 <_isatty>
 8007198:	1c43      	adds	r3, r0, #1
 800719a:	d102      	bne.n	80071a2 <_isatty_r+0x1a>
 800719c:	682b      	ldr	r3, [r5, #0]
 800719e:	b103      	cbz	r3, 80071a2 <_isatty_r+0x1a>
 80071a0:	6023      	str	r3, [r4, #0]
 80071a2:	bd38      	pop	{r3, r4, r5, pc}
 80071a4:	2000045c 	.word	0x2000045c

080071a8 <_kill_r>:
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	4d07      	ldr	r5, [pc, #28]	@ (80071c8 <_kill_r+0x20>)
 80071ac:	2300      	movs	r3, #0
 80071ae:	4604      	mov	r4, r0
 80071b0:	4608      	mov	r0, r1
 80071b2:	4611      	mov	r1, r2
 80071b4:	602b      	str	r3, [r5, #0]
 80071b6:	f7fa fb37 	bl	8001828 <_kill>
 80071ba:	1c43      	adds	r3, r0, #1
 80071bc:	d102      	bne.n	80071c4 <_kill_r+0x1c>
 80071be:	682b      	ldr	r3, [r5, #0]
 80071c0:	b103      	cbz	r3, 80071c4 <_kill_r+0x1c>
 80071c2:	6023      	str	r3, [r4, #0]
 80071c4:	bd38      	pop	{r3, r4, r5, pc}
 80071c6:	bf00      	nop
 80071c8:	2000045c 	.word	0x2000045c

080071cc <_getpid_r>:
 80071cc:	f7fa bb24 	b.w	8001818 <_getpid>

080071d0 <_init>:
 80071d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d2:	bf00      	nop
 80071d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071d6:	bc08      	pop	{r3}
 80071d8:	469e      	mov	lr, r3
 80071da:	4770      	bx	lr

080071dc <_fini>:
 80071dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071de:	bf00      	nop
 80071e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071e2:	bc08      	pop	{r3}
 80071e4:	469e      	mov	lr, r3
 80071e6:	4770      	bx	lr
