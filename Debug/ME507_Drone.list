
ME507_Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c24  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08007dc4  08007dc4  00008dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008020  08008020  0000a070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008020  08008020  00009020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008028  08008028  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008028  08008028  00009028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800802c  0800802c  0000902c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008030  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000070  080080a0  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  080080a0  0000a4c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012573  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002891  00000000  00000000  0001c613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0001eea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da8  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c10  00000000  00000000  00020da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015439  00000000  00000000  0003a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f994  00000000  00000000  0004fdf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef785  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054d0  00000000  00000000  000ef7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f4c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007dac 	.word	0x08007dac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08007dac 	.word	0x08007dac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b988 	b.w	8000bc4 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	468e      	mov	lr, r1
 80008d4:	4604      	mov	r4, r0
 80008d6:	4688      	mov	r8, r1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d14a      	bne.n	8000972 <__udivmoddi4+0xa6>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4617      	mov	r7, r2
 80008e0:	d962      	bls.n	80009a8 <__udivmoddi4+0xdc>
 80008e2:	fab2 f682 	clz	r6, r2
 80008e6:	b14e      	cbz	r6, 80008fc <__udivmoddi4+0x30>
 80008e8:	f1c6 0320 	rsb	r3, r6, #32
 80008ec:	fa01 f806 	lsl.w	r8, r1, r6
 80008f0:	fa20 f303 	lsr.w	r3, r0, r3
 80008f4:	40b7      	lsls	r7, r6
 80008f6:	ea43 0808 	orr.w	r8, r3, r8
 80008fa:	40b4      	lsls	r4, r6
 80008fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000900:	fa1f fc87 	uxth.w	ip, r7
 8000904:	fbb8 f1fe 	udiv	r1, r8, lr
 8000908:	0c23      	lsrs	r3, r4, #16
 800090a:	fb0e 8811 	mls	r8, lr, r1, r8
 800090e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000912:	fb01 f20c 	mul.w	r2, r1, ip
 8000916:	429a      	cmp	r2, r3
 8000918:	d909      	bls.n	800092e <__udivmoddi4+0x62>
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000920:	f080 80ea 	bcs.w	8000af8 <__udivmoddi4+0x22c>
 8000924:	429a      	cmp	r2, r3
 8000926:	f240 80e7 	bls.w	8000af8 <__udivmoddi4+0x22c>
 800092a:	3902      	subs	r1, #2
 800092c:	443b      	add	r3, r7
 800092e:	1a9a      	subs	r2, r3, r2
 8000930:	b2a3      	uxth	r3, r4
 8000932:	fbb2 f0fe 	udiv	r0, r2, lr
 8000936:	fb0e 2210 	mls	r2, lr, r0, r2
 800093a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800093e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000942:	459c      	cmp	ip, r3
 8000944:	d909      	bls.n	800095a <__udivmoddi4+0x8e>
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	f100 32ff 	add.w	r2, r0, #4294967295
 800094c:	f080 80d6 	bcs.w	8000afc <__udivmoddi4+0x230>
 8000950:	459c      	cmp	ip, r3
 8000952:	f240 80d3 	bls.w	8000afc <__udivmoddi4+0x230>
 8000956:	443b      	add	r3, r7
 8000958:	3802      	subs	r0, #2
 800095a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800095e:	eba3 030c 	sub.w	r3, r3, ip
 8000962:	2100      	movs	r1, #0
 8000964:	b11d      	cbz	r5, 800096e <__udivmoddi4+0xa2>
 8000966:	40f3      	lsrs	r3, r6
 8000968:	2200      	movs	r2, #0
 800096a:	e9c5 3200 	strd	r3, r2, [r5]
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	428b      	cmp	r3, r1
 8000974:	d905      	bls.n	8000982 <__udivmoddi4+0xb6>
 8000976:	b10d      	cbz	r5, 800097c <__udivmoddi4+0xb0>
 8000978:	e9c5 0100 	strd	r0, r1, [r5]
 800097c:	2100      	movs	r1, #0
 800097e:	4608      	mov	r0, r1
 8000980:	e7f5      	b.n	800096e <__udivmoddi4+0xa2>
 8000982:	fab3 f183 	clz	r1, r3
 8000986:	2900      	cmp	r1, #0
 8000988:	d146      	bne.n	8000a18 <__udivmoddi4+0x14c>
 800098a:	4573      	cmp	r3, lr
 800098c:	d302      	bcc.n	8000994 <__udivmoddi4+0xc8>
 800098e:	4282      	cmp	r2, r0
 8000990:	f200 8105 	bhi.w	8000b9e <__udivmoddi4+0x2d2>
 8000994:	1a84      	subs	r4, r0, r2
 8000996:	eb6e 0203 	sbc.w	r2, lr, r3
 800099a:	2001      	movs	r0, #1
 800099c:	4690      	mov	r8, r2
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d0e5      	beq.n	800096e <__udivmoddi4+0xa2>
 80009a2:	e9c5 4800 	strd	r4, r8, [r5]
 80009a6:	e7e2      	b.n	800096e <__udivmoddi4+0xa2>
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	f000 8090 	beq.w	8000ace <__udivmoddi4+0x202>
 80009ae:	fab2 f682 	clz	r6, r2
 80009b2:	2e00      	cmp	r6, #0
 80009b4:	f040 80a4 	bne.w	8000b00 <__udivmoddi4+0x234>
 80009b8:	1a8a      	subs	r2, r1, r2
 80009ba:	0c03      	lsrs	r3, r0, #16
 80009bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009c0:	b280      	uxth	r0, r0
 80009c2:	b2bc      	uxth	r4, r7
 80009c4:	2101      	movs	r1, #1
 80009c6:	fbb2 fcfe 	udiv	ip, r2, lr
 80009ca:	fb0e 221c 	mls	r2, lr, ip, r2
 80009ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009d2:	fb04 f20c 	mul.w	r2, r4, ip
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d907      	bls.n	80009ea <__udivmoddi4+0x11e>
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009e0:	d202      	bcs.n	80009e8 <__udivmoddi4+0x11c>
 80009e2:	429a      	cmp	r2, r3
 80009e4:	f200 80e0 	bhi.w	8000ba8 <__udivmoddi4+0x2dc>
 80009e8:	46c4      	mov	ip, r8
 80009ea:	1a9b      	subs	r3, r3, r2
 80009ec:	fbb3 f2fe 	udiv	r2, r3, lr
 80009f0:	fb0e 3312 	mls	r3, lr, r2, r3
 80009f4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009f8:	fb02 f404 	mul.w	r4, r2, r4
 80009fc:	429c      	cmp	r4, r3
 80009fe:	d907      	bls.n	8000a10 <__udivmoddi4+0x144>
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a06:	d202      	bcs.n	8000a0e <__udivmoddi4+0x142>
 8000a08:	429c      	cmp	r4, r3
 8000a0a:	f200 80ca 	bhi.w	8000ba2 <__udivmoddi4+0x2d6>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	1b1b      	subs	r3, r3, r4
 8000a12:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a16:	e7a5      	b.n	8000964 <__udivmoddi4+0x98>
 8000a18:	f1c1 0620 	rsb	r6, r1, #32
 8000a1c:	408b      	lsls	r3, r1
 8000a1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a22:	431f      	orrs	r7, r3
 8000a24:	fa0e f401 	lsl.w	r4, lr, r1
 8000a28:	fa20 f306 	lsr.w	r3, r0, r6
 8000a2c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a30:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a34:	4323      	orrs	r3, r4
 8000a36:	fa00 f801 	lsl.w	r8, r0, r1
 8000a3a:	fa1f fc87 	uxth.w	ip, r7
 8000a3e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a42:	0c1c      	lsrs	r4, r3, #16
 8000a44:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a48:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a4c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a50:	45a6      	cmp	lr, r4
 8000a52:	fa02 f201 	lsl.w	r2, r2, r1
 8000a56:	d909      	bls.n	8000a6c <__udivmoddi4+0x1a0>
 8000a58:	193c      	adds	r4, r7, r4
 8000a5a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a5e:	f080 809c 	bcs.w	8000b9a <__udivmoddi4+0x2ce>
 8000a62:	45a6      	cmp	lr, r4
 8000a64:	f240 8099 	bls.w	8000b9a <__udivmoddi4+0x2ce>
 8000a68:	3802      	subs	r0, #2
 8000a6a:	443c      	add	r4, r7
 8000a6c:	eba4 040e 	sub.w	r4, r4, lr
 8000a70:	fa1f fe83 	uxth.w	lr, r3
 8000a74:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a78:	fb09 4413 	mls	r4, r9, r3, r4
 8000a7c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a80:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a84:	45a4      	cmp	ip, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x1ce>
 8000a88:	193c      	adds	r4, r7, r4
 8000a8a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a8e:	f080 8082 	bcs.w	8000b96 <__udivmoddi4+0x2ca>
 8000a92:	45a4      	cmp	ip, r4
 8000a94:	d97f      	bls.n	8000b96 <__udivmoddi4+0x2ca>
 8000a96:	3b02      	subs	r3, #2
 8000a98:	443c      	add	r4, r7
 8000a9a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a9e:	eba4 040c 	sub.w	r4, r4, ip
 8000aa2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000aa6:	4564      	cmp	r4, ip
 8000aa8:	4673      	mov	r3, lr
 8000aaa:	46e1      	mov	r9, ip
 8000aac:	d362      	bcc.n	8000b74 <__udivmoddi4+0x2a8>
 8000aae:	d05f      	beq.n	8000b70 <__udivmoddi4+0x2a4>
 8000ab0:	b15d      	cbz	r5, 8000aca <__udivmoddi4+0x1fe>
 8000ab2:	ebb8 0203 	subs.w	r2, r8, r3
 8000ab6:	eb64 0409 	sbc.w	r4, r4, r9
 8000aba:	fa04 f606 	lsl.w	r6, r4, r6
 8000abe:	fa22 f301 	lsr.w	r3, r2, r1
 8000ac2:	431e      	orrs	r6, r3
 8000ac4:	40cc      	lsrs	r4, r1
 8000ac6:	e9c5 6400 	strd	r6, r4, [r5]
 8000aca:	2100      	movs	r1, #0
 8000acc:	e74f      	b.n	800096e <__udivmoddi4+0xa2>
 8000ace:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ad2:	0c01      	lsrs	r1, r0, #16
 8000ad4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ad8:	b280      	uxth	r0, r0
 8000ada:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4638      	mov	r0, r7
 8000ae2:	463c      	mov	r4, r7
 8000ae4:	46b8      	mov	r8, r7
 8000ae6:	46be      	mov	lr, r7
 8000ae8:	2620      	movs	r6, #32
 8000aea:	fbb1 f1f7 	udiv	r1, r1, r7
 8000aee:	eba2 0208 	sub.w	r2, r2, r8
 8000af2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000af6:	e766      	b.n	80009c6 <__udivmoddi4+0xfa>
 8000af8:	4601      	mov	r1, r0
 8000afa:	e718      	b.n	800092e <__udivmoddi4+0x62>
 8000afc:	4610      	mov	r0, r2
 8000afe:	e72c      	b.n	800095a <__udivmoddi4+0x8e>
 8000b00:	f1c6 0220 	rsb	r2, r6, #32
 8000b04:	fa2e f302 	lsr.w	r3, lr, r2
 8000b08:	40b7      	lsls	r7, r6
 8000b0a:	40b1      	lsls	r1, r6
 8000b0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b14:	430a      	orrs	r2, r1
 8000b16:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b1a:	b2bc      	uxth	r4, r7
 8000b1c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b20:	0c11      	lsrs	r1, r2, #16
 8000b22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b26:	fb08 f904 	mul.w	r9, r8, r4
 8000b2a:	40b0      	lsls	r0, r6
 8000b2c:	4589      	cmp	r9, r1
 8000b2e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b32:	b280      	uxth	r0, r0
 8000b34:	d93e      	bls.n	8000bb4 <__udivmoddi4+0x2e8>
 8000b36:	1879      	adds	r1, r7, r1
 8000b38:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b3c:	d201      	bcs.n	8000b42 <__udivmoddi4+0x276>
 8000b3e:	4589      	cmp	r9, r1
 8000b40:	d81f      	bhi.n	8000b82 <__udivmoddi4+0x2b6>
 8000b42:	eba1 0109 	sub.w	r1, r1, r9
 8000b46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b4a:	fb09 f804 	mul.w	r8, r9, r4
 8000b4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b52:	b292      	uxth	r2, r2
 8000b54:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b58:	4542      	cmp	r2, r8
 8000b5a:	d229      	bcs.n	8000bb0 <__udivmoddi4+0x2e4>
 8000b5c:	18ba      	adds	r2, r7, r2
 8000b5e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b62:	d2c4      	bcs.n	8000aee <__udivmoddi4+0x222>
 8000b64:	4542      	cmp	r2, r8
 8000b66:	d2c2      	bcs.n	8000aee <__udivmoddi4+0x222>
 8000b68:	f1a9 0102 	sub.w	r1, r9, #2
 8000b6c:	443a      	add	r2, r7
 8000b6e:	e7be      	b.n	8000aee <__udivmoddi4+0x222>
 8000b70:	45f0      	cmp	r8, lr
 8000b72:	d29d      	bcs.n	8000ab0 <__udivmoddi4+0x1e4>
 8000b74:	ebbe 0302 	subs.w	r3, lr, r2
 8000b78:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b7c:	3801      	subs	r0, #1
 8000b7e:	46e1      	mov	r9, ip
 8000b80:	e796      	b.n	8000ab0 <__udivmoddi4+0x1e4>
 8000b82:	eba7 0909 	sub.w	r9, r7, r9
 8000b86:	4449      	add	r1, r9
 8000b88:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b8c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b90:	fb09 f804 	mul.w	r8, r9, r4
 8000b94:	e7db      	b.n	8000b4e <__udivmoddi4+0x282>
 8000b96:	4673      	mov	r3, lr
 8000b98:	e77f      	b.n	8000a9a <__udivmoddi4+0x1ce>
 8000b9a:	4650      	mov	r0, sl
 8000b9c:	e766      	b.n	8000a6c <__udivmoddi4+0x1a0>
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	e6fd      	b.n	800099e <__udivmoddi4+0xd2>
 8000ba2:	443b      	add	r3, r7
 8000ba4:	3a02      	subs	r2, #2
 8000ba6:	e733      	b.n	8000a10 <__udivmoddi4+0x144>
 8000ba8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bac:	443b      	add	r3, r7
 8000bae:	e71c      	b.n	80009ea <__udivmoddi4+0x11e>
 8000bb0:	4649      	mov	r1, r9
 8000bb2:	e79c      	b.n	8000aee <__udivmoddi4+0x222>
 8000bb4:	eba1 0109 	sub.w	r1, r1, r9
 8000bb8:	46c4      	mov	ip, r8
 8000bba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bbe:	fb09 f804 	mul.w	r8, r9, r4
 8000bc2:	e7c4      	b.n	8000b4e <__udivmoddi4+0x282>

08000bc4 <__aeabi_idiv0>:
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <BNO_Init>:

extern I2C_HandleTypeDef hi2c1;
static uint8_t calibData;


void BNO_Init(){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af04      	add	r7, sp, #16
	uint8_t ndof_mode = 0x0C;
 8000bce:	230c      	movs	r3, #12
 8000bd0:	71fb      	strb	r3, [r7, #7]
	uint8_t config_mode = 0x00;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	71bb      	strb	r3, [r7, #6]
	uint8_t successfulRead = false;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	73fb      	strb	r3, [r7, #15]
	uint8_t sampleData = 0x00;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	717b      	strb	r3, [r7, #5]
	int calibrated = false;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]

	while(successfulRead == false){ //WAIT to verify IMU connection
 8000be2:	e01c      	b.n	8000c1e <BNO_Init+0x56>
	HAL_I2C_DeInit(&hi2c1);
 8000be4:	482e      	ldr	r0, [pc, #184]	@ (8000ca0 <BNO_Init+0xd8>)
 8000be6:	f002 fe91 	bl	800390c <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c1);
 8000bea:	482d      	ldr	r0, [pc, #180]	@ (8000ca0 <BNO_Init+0xd8>)
 8000bec:	f002 fd4a 	bl	8003684 <HAL_I2C_Init>
	if (hi2c1.State == HAL_I2C_STATE_READY) {
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca0 <BNO_Init+0xd8>)
 8000bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b20      	cmp	r3, #32
 8000bfa:	d10b      	bne.n	8000c14 <BNO_Init+0x4c>
		HAL_I2C_Mem_Read(&hi2c1, BNO055_I2C_ADDR, 0x00, 1, &sampleData, 1, 100); // 0xaA0 should be returned if receiving from IMU
 8000bfc:	2364      	movs	r3, #100	@ 0x64
 8000bfe:	9302      	str	r3, [sp, #8]
 8000c00:	2301      	movs	r3, #1
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	1d7b      	adds	r3, r7, #5
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2301      	movs	r3, #1
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2150      	movs	r1, #80	@ 0x50
 8000c0e:	4824      	ldr	r0, [pc, #144]	@ (8000ca0 <BNO_Init+0xd8>)
 8000c10:	f002 ffa6 	bl	8003b60 <HAL_I2C_Mem_Read>
	}
	if (sampleData == 0xa0){
 8000c14:	797b      	ldrb	r3, [r7, #5]
 8000c16:	2ba0      	cmp	r3, #160	@ 0xa0
 8000c18:	d101      	bne.n	8000c1e <BNO_Init+0x56>
		successfulRead = true;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	73fb      	strb	r3, [r7, #15]
	while(successfulRead == false){ //WAIT to verify IMU connection
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0df      	beq.n	8000be4 <BNO_Init+0x1c>
	}
	}
	// Set to CONFIG mode
    HAL_I2C_Mem_Write(&hi2c1, BNO055_I2C_ADDR, BNO055_OPR_MODE_ADDR,
 8000c24:	2364      	movs	r3, #100	@ 0x64
 8000c26:	9302      	str	r3, [sp, #8]
 8000c28:	2301      	movs	r3, #1
 8000c2a:	9301      	str	r3, [sp, #4]
 8000c2c:	1dbb      	adds	r3, r7, #6
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	2301      	movs	r3, #1
 8000c32:	223d      	movs	r2, #61	@ 0x3d
 8000c34:	2150      	movs	r1, #80	@ 0x50
 8000c36:	481a      	ldr	r0, [pc, #104]	@ (8000ca0 <BNO_Init+0xd8>)
 8000c38:	f002 fe98 	bl	800396c <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, &config_mode, 1, 100);
    HAL_Delay(25);
 8000c3c:	2019      	movs	r0, #25
 8000c3e:	f001 faf5 	bl	800222c <HAL_Delay>

    //Set to NDOF mode
    HAL_I2C_Mem_Write(&hi2c1, BNO055_I2C_ADDR, BNO055_OPR_MODE_ADDR,
 8000c42:	2364      	movs	r3, #100	@ 0x64
 8000c44:	9302      	str	r3, [sp, #8]
 8000c46:	2301      	movs	r3, #1
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	223d      	movs	r2, #61	@ 0x3d
 8000c52:	2150      	movs	r1, #80	@ 0x50
 8000c54:	4812      	ldr	r0, [pc, #72]	@ (8000ca0 <BNO_Init+0xd8>)
 8000c56:	f002 fe89 	bl	800396c <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, &ndof_mode, 1, 100);
    HAL_Delay(25);
 8000c5a:	2019      	movs	r0, #25
 8000c5c:	f001 fae6 	bl	800222c <HAL_Delay>


	//WAIT until IMU is callibrated
	while(calibrated == false){ //wait for imu to calibrate
 8000c60:	e015      	b.n	8000c8e <BNO_Init+0xc6>
		HAL_I2C_Mem_Read(&hi2c1, BNO055_I2C_ADDR, BNO055_CALIB_STAT, 1, &calibData, 1, 100);
 8000c62:	2364      	movs	r3, #100	@ 0x64
 8000c64:	9302      	str	r3, [sp, #8]
 8000c66:	2301      	movs	r3, #1
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <BNO_Init+0xdc>)
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	2235      	movs	r2, #53	@ 0x35
 8000c72:	2150      	movs	r1, #80	@ 0x50
 8000c74:	480a      	ldr	r0, [pc, #40]	@ (8000ca0 <BNO_Init+0xd8>)
 8000c76:	f002 ff73 	bl	8003b60 <HAL_I2C_Mem_Read>
		if (((calibData >> 6) & 0x03) == 0x03){
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <BNO_Init+0xdc>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	099b      	lsrs	r3, r3, #6
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f003 0303 	and.w	r3, r3, #3
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	d101      	bne.n	8000c8e <BNO_Init+0xc6>
			calibrated = true;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	60bb      	str	r3, [r7, #8]
	while(calibrated == false){ //wait for imu to calibrate
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d0e6      	beq.n	8000c62 <BNO_Init+0x9a>
	}
}
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200000f0 	.word	0x200000f0
 8000ca4:	2000008c 	.word	0x2000008c

08000ca8 <BNO_Read>:


void BNO_Read(int32_t *roll, int32_t *pitch, int32_t *yaw){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	@ 0x38
 8000cac:	af04      	add	r7, sp, #16
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
	uint8_t eulerData[6];
	int32_t rawYaw16;
	int32_t rawPitch16;
	int32_t rawRoll16;
	HAL_I2C_Mem_Read(&hi2c1, BNO055_I2C_ADDR, BNO055_EULER_LSB, I2C_MEMADD_SIZE_8BIT, eulerData, 6, 100);
 8000cb4:	2364      	movs	r3, #100	@ 0x64
 8000cb6:	9302      	str	r3, [sp, #8]
 8000cb8:	2306      	movs	r3, #6
 8000cba:	9301      	str	r3, [sp, #4]
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	221a      	movs	r2, #26
 8000cc6:	2150      	movs	r1, #80	@ 0x50
 8000cc8:	481e      	ldr	r0, [pc, #120]	@ (8000d44 <BNO_Read+0x9c>)
 8000cca:	f002 ff49 	bl	8003b60 <HAL_I2C_Mem_Read>

    rawYaw16   = (int16_t)((eulerData[1] << 8) | eulerData[0]);
 8000cce:	7d7b      	ldrb	r3, [r7, #21]
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	021b      	lsls	r3, r3, #8
 8000cd4:	b21a      	sxth	r2, r3
 8000cd6:	7d3b      	ldrb	r3, [r7, #20]
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	b21b      	sxth	r3, r3
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
    rawRoll16  = (int16_t)((eulerData[3] << 8) | eulerData[2]);
 8000ce0:	7dfb      	ldrb	r3, [r7, #23]
 8000ce2:	b21b      	sxth	r3, r3
 8000ce4:	021b      	lsls	r3, r3, #8
 8000ce6:	b21a      	sxth	r2, r3
 8000ce8:	7dbb      	ldrb	r3, [r7, #22]
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b21b      	sxth	r3, r3
 8000cf0:	623b      	str	r3, [r7, #32]
    rawPitch16 = (int16_t)((eulerData[5] << 8) | eulerData[4]);
 8000cf2:	7e7b      	ldrb	r3, [r7, #25]
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	021b      	lsls	r3, r3, #8
 8000cf8:	b21a      	sxth	r2, r3
 8000cfa:	7e3b      	ldrb	r3, [r7, #24]
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	61fb      	str	r3, [r7, #28]


    *yaw   =
    *roll  = ((int32_t)rawRoll16 * 1000) / 16;
 8000d04:	6a3b      	ldr	r3, [r7, #32]
 8000d06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d0a:	fb02 f303 	mul.w	r3, r2, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	da00      	bge.n	8000d14 <BNO_Read+0x6c>
 8000d12:	330f      	adds	r3, #15
 8000d14:	111b      	asrs	r3, r3, #4
 8000d16:	461a      	mov	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681a      	ldr	r2, [r3, #0]
    *yaw   =
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	601a      	str	r2, [r3, #0]
    *pitch = ((int32_t)rawPitch16 * 1000) / 16;
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d2a:	fb02 f303 	mul.w	r3, r2, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	da00      	bge.n	8000d34 <BNO_Read+0x8c>
 8000d32:	330f      	adds	r3, #15
 8000d34:	111b      	asrs	r3, r3, #4
 8000d36:	461a      	mov	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	601a      	str	r2, [r3, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	3728      	adds	r7, #40	@ 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200000f0 	.word	0x200000f0

08000d48 <armESC>:
extern TIM_HandleTypeDef htim3;
extern int effort_set;
int A, B, C, D = 0;
int armCompare;

void armESC(){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	481e      	ldr	r0, [pc, #120]	@ (8000dc8 <armESC+0x80>)
 8000d50:	f004 f994 	bl	800507c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000d54:	2104      	movs	r1, #4
 8000d56:	481c      	ldr	r0, [pc, #112]	@ (8000dc8 <armESC+0x80>)
 8000d58:	f004 f990 	bl	800507c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	481a      	ldr	r0, [pc, #104]	@ (8000dc8 <armESC+0x80>)
 8000d60:	f004 f98c 	bl	800507c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000d64:	210c      	movs	r1, #12
 8000d66:	4818      	ldr	r0, [pc, #96]	@ (8000dc8 <armESC+0x80>)
 8000d68:	f004 f988 	bl	800507c <HAL_TIM_PWM_Start>

	armCompare =  effort_set + 1000;
 8000d6c:	4b17      	ldr	r3, [pc, #92]	@ (8000dcc <armESC+0x84>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000d74:	4a16      	ldr	r2, [pc, #88]	@ (8000dd0 <armESC+0x88>)
 8000d76:	6013      	str	r3, [r2, #0]
	    // Clamp between 3200 and 5000
	    if (armCompare < 960) armCompare = 960;
 8000d78:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <armESC+0x88>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8000d80:	da03      	bge.n	8000d8a <armESC+0x42>
 8000d82:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <armESC+0x88>)
 8000d84:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000d88:	601a      	str	r2, [r3, #0]
	    if (armCompare > 2000) armCompare = 20000;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <armESC+0x88>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000d92:	dd03      	ble.n	8000d9c <armESC+0x54>
 8000d94:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <armESC+0x88>)
 8000d96:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000d9a:	601a      	str	r2, [r3, #0]


		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, armCompare);
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <armESC+0x88>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <armESC+0x80>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, armCompare);
 8000da6:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <armESC+0x88>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <armESC+0x80>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, armCompare);
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <armESC+0x88>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b04      	ldr	r3, [pc, #16]	@ (8000dc8 <armESC+0x80>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, armCompare);
 8000dba:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <armESC+0x88>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4b02      	ldr	r3, [pc, #8]	@ (8000dc8 <armESC+0x80>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	641a      	str	r2, [r3, #64]	@ 0x40
	}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000198 	.word	0x20000198
 8000dcc:	200002e4 	.word	0x200002e4
 8000dd0:	200000a0 	.word	0x200000a0
 8000dd4:	00000000 	.word	0x00000000

08000dd8 <update_Motors>:



void update_Motors(int32_t roll_effort, int32_t pitch_effort, int32_t yaw_effort, int32_t effort_set){ //Compare 3200 = 1ms (0%)    Compare 6400 = 2ms (100%)
 8000dd8:	b5b0      	push	{r4, r5, r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
	A =  pitch_effort  -roll_effort  +yaw_effort*0  +effort_set*0.3 + 1200;
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fcc3 	bl	8000778 <__aeabi_i2d>
 8000df2:	4604      	mov	r4, r0
 8000df4:	460d      	mov	r5, r1
 8000df6:	6838      	ldr	r0, [r7, #0]
 8000df8:	f7ff fcbe 	bl	8000778 <__aeabi_i2d>
 8000dfc:	a37c      	add	r3, pc, #496	@ (adr r3, 8000ff0 <update_Motors+0x218>)
 8000dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e02:	f7ff fa3d 	bl	8000280 <__aeabi_dmul>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	4629      	mov	r1, r5
 8000e0e:	f7ff fb67 	bl	80004e0 <__adddf3>
 8000e12:	4602      	mov	r2, r0
 8000e14:	460b      	mov	r3, r1
 8000e16:	4610      	mov	r0, r2
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f04f 0200 	mov.w	r2, #0
 8000e1e:	4b76      	ldr	r3, [pc, #472]	@ (8000ff8 <update_Motors+0x220>)
 8000e20:	f7ff fb5e 	bl	80004e0 <__adddf3>
 8000e24:	4602      	mov	r2, r0
 8000e26:	460b      	mov	r3, r1
 8000e28:	4610      	mov	r0, r2
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f7ff fd0e 	bl	800084c <__aeabi_d2iz>
 8000e30:	4603      	mov	r3, r0
 8000e32:	4a72      	ldr	r2, [pc, #456]	@ (8000ffc <update_Motors+0x224>)
 8000e34:	6013      	str	r3, [r2, #0]
	B = pitch_effort  +roll_effort  -yaw_effort*0  +effort_set*0.3 + 1200;
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fc9b 	bl	8000778 <__aeabi_i2d>
 8000e42:	4604      	mov	r4, r0
 8000e44:	460d      	mov	r5, r1
 8000e46:	6838      	ldr	r0, [r7, #0]
 8000e48:	f7ff fc96 	bl	8000778 <__aeabi_i2d>
 8000e4c:	a368      	add	r3, pc, #416	@ (adr r3, 8000ff0 <update_Motors+0x218>)
 8000e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e52:	f7ff fa15 	bl	8000280 <__aeabi_dmul>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	4629      	mov	r1, r5
 8000e5e:	f7ff fb3f 	bl	80004e0 <__adddf3>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	4610      	mov	r0, r2
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	4b62      	ldr	r3, [pc, #392]	@ (8000ff8 <update_Motors+0x220>)
 8000e70:	f7ff fb36 	bl	80004e0 <__adddf3>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4610      	mov	r0, r2
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f7ff fce6 	bl	800084c <__aeabi_d2iz>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4a5f      	ldr	r2, [pc, #380]	@ (8001000 <update_Motors+0x228>)
 8000e84:	6013      	str	r3, [r2, #0]
	C =  -pitch_effort  +roll_effort  +yaw_effort*0  +effort_set*0.3 + 1200;
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fc73 	bl	8000778 <__aeabi_i2d>
 8000e92:	4604      	mov	r4, r0
 8000e94:	460d      	mov	r5, r1
 8000e96:	6838      	ldr	r0, [r7, #0]
 8000e98:	f7ff fc6e 	bl	8000778 <__aeabi_i2d>
 8000e9c:	a354      	add	r3, pc, #336	@ (adr r3, 8000ff0 <update_Motors+0x218>)
 8000e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea2:	f7ff f9ed 	bl	8000280 <__aeabi_dmul>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	4620      	mov	r0, r4
 8000eac:	4629      	mov	r1, r5
 8000eae:	f7ff fb17 	bl	80004e0 <__adddf3>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f04f 0200 	mov.w	r2, #0
 8000ebe:	4b4e      	ldr	r3, [pc, #312]	@ (8000ff8 <update_Motors+0x220>)
 8000ec0:	f7ff fb0e 	bl	80004e0 <__adddf3>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f7ff fcbe 	bl	800084c <__aeabi_d2iz>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4a4c      	ldr	r2, [pc, #304]	@ (8001004 <update_Motors+0x22c>)
 8000ed4:	6013      	str	r3, [r2, #0]
	D =  -pitch_effort  -roll_effort  -yaw_effort*0  +effort_set*0.3 + 1200;
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	425a      	negs	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fc4a 	bl	8000778 <__aeabi_i2d>
 8000ee4:	4604      	mov	r4, r0
 8000ee6:	460d      	mov	r5, r1
 8000ee8:	6838      	ldr	r0, [r7, #0]
 8000eea:	f7ff fc45 	bl	8000778 <__aeabi_i2d>
 8000eee:	a340      	add	r3, pc, #256	@ (adr r3, 8000ff0 <update_Motors+0x218>)
 8000ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef4:	f7ff f9c4 	bl	8000280 <__aeabi_dmul>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4620      	mov	r0, r4
 8000efe:	4629      	mov	r1, r5
 8000f00:	f7ff faee 	bl	80004e0 <__adddf3>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	4b39      	ldr	r3, [pc, #228]	@ (8000ff8 <update_Motors+0x220>)
 8000f12:	f7ff fae5 	bl	80004e0 <__adddf3>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f7ff fc95 	bl	800084c <__aeabi_d2iz>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a38      	ldr	r2, [pc, #224]	@ (8001008 <update_Motors+0x230>)
 8000f26:	6013      	str	r3, [r2, #0]


    // Clamp between 3200 and 5000
    if (A < 960) A = 960;
 8000f28:	4b34      	ldr	r3, [pc, #208]	@ (8000ffc <update_Motors+0x224>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8000f30:	da03      	bge.n	8000f3a <update_Motors+0x162>
 8000f32:	4b32      	ldr	r3, [pc, #200]	@ (8000ffc <update_Motors+0x224>)
 8000f34:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000f38:	601a      	str	r2, [r3, #0]
    if (A > 1500) A = 1500;
 8000f3a:	4b30      	ldr	r3, [pc, #192]	@ (8000ffc <update_Motors+0x224>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000f42:	4293      	cmp	r3, r2
 8000f44:	dd03      	ble.n	8000f4e <update_Motors+0x176>
 8000f46:	4b2d      	ldr	r3, [pc, #180]	@ (8000ffc <update_Motors+0x224>)
 8000f48:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000f4c:	601a      	str	r2, [r3, #0]

    if (B < 960) B = 960;
 8000f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001000 <update_Motors+0x228>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8000f56:	da03      	bge.n	8000f60 <update_Motors+0x188>
 8000f58:	4b29      	ldr	r3, [pc, #164]	@ (8001000 <update_Motors+0x228>)
 8000f5a:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000f5e:	601a      	str	r2, [r3, #0]
    if (B > 1500) B = 1500;
 8000f60:	4b27      	ldr	r3, [pc, #156]	@ (8001000 <update_Motors+0x228>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	dd03      	ble.n	8000f74 <update_Motors+0x19c>
 8000f6c:	4b24      	ldr	r3, [pc, #144]	@ (8001000 <update_Motors+0x228>)
 8000f6e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000f72:	601a      	str	r2, [r3, #0]

    if (C < 960) C = 960;
 8000f74:	4b23      	ldr	r3, [pc, #140]	@ (8001004 <update_Motors+0x22c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8000f7c:	da03      	bge.n	8000f86 <update_Motors+0x1ae>
 8000f7e:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <update_Motors+0x22c>)
 8000f80:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000f84:	601a      	str	r2, [r3, #0]
    if (C > 1500) C = 1500;
 8000f86:	4b1f      	ldr	r3, [pc, #124]	@ (8001004 <update_Motors+0x22c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	dd03      	ble.n	8000f9a <update_Motors+0x1c2>
 8000f92:	4b1c      	ldr	r3, [pc, #112]	@ (8001004 <update_Motors+0x22c>)
 8000f94:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000f98:	601a      	str	r2, [r3, #0]

    if (D < 960) D = 960;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001008 <update_Motors+0x230>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8000fa2:	da03      	bge.n	8000fac <update_Motors+0x1d4>
 8000fa4:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <update_Motors+0x230>)
 8000fa6:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000faa:	601a      	str	r2, [r3, #0]
    if (D > 1500) D = 1500;
 8000fac:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <update_Motors+0x230>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	dd03      	ble.n	8000fc0 <update_Motors+0x1e8>
 8000fb8:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <update_Motors+0x230>)
 8000fba:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000fbe:	601a      	str	r2, [r3, #0]


	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, A);
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <update_Motors+0x224>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b11      	ldr	r3, [pc, #68]	@ (800100c <update_Motors+0x234>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, B);
 8000fca:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <update_Motors+0x228>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <update_Motors+0x234>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, C);
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <update_Motors+0x22c>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <update_Motors+0x234>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, D);
 8000fde:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <update_Motors+0x230>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <update_Motors+0x234>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff0:	33333333 	.word	0x33333333
 8000ff4:	3fd33333 	.word	0x3fd33333
 8000ff8:	4092c000 	.word	0x4092c000
 8000ffc:	20000090 	.word	0x20000090
 8001000:	20000094 	.word	0x20000094
 8001004:	20000098 	.word	0x20000098
 8001008:	2000009c 	.word	0x2000009c
 800100c:	20000198 	.word	0x20000198

08001010 <processInput>:

void InitializeBT(void){
	//send message from HC05. Receive message from PC. Confirm and continue.
}

void processInput(char *charBuf, int32_t *roll, int32_t *pitch, int32_t *yaw, int32_t *effort){
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	@ 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	603b      	str	r3, [r7, #0]
	   int32_t LjoyX, LjoyY, RjoyX, LT, RT;

	   // Skip pound sign if present
	       if (charBuf[0] == '#') {
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b23      	cmp	r3, #35	@ 0x23
 8001024:	d10b      	bne.n	800103e <processInput+0x2e>
	           charBuf++;  // move pointer to the next character
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	3301      	adds	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
	    	   badBTcount++;
	    	   printf("Bad BT input (did not process): %d\r\n", badBTcount);
	    	   return;
	       }

	    char *token = strtok(charBuf, ",");
 800102c:	4935      	ldr	r1, [pc, #212]	@ (8001104 <processInput+0xf4>)
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f006 f862 	bl	80070f8 <strtok>
 8001034:	6178      	str	r0, [r7, #20]
	    if (token) LjoyX = (int32_t)strtol(token, NULL, 10);
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d012      	beq.n	8001062 <processInput+0x52>
 800103c:	e00b      	b.n	8001056 <processInput+0x46>
	    	   badBTcount++;
 800103e:	4b32      	ldr	r3, [pc, #200]	@ (8001108 <processInput+0xf8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a30      	ldr	r2, [pc, #192]	@ (8001108 <processInput+0xf8>)
 8001046:	6013      	str	r3, [r2, #0]
	    	   printf("Bad BT input (did not process): %d\r\n", badBTcount);
 8001048:	4b2f      	ldr	r3, [pc, #188]	@ (8001108 <processInput+0xf8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	482f      	ldr	r0, [pc, #188]	@ (800110c <processInput+0xfc>)
 8001050:	f005 ff60 	bl	8006f14 <iprintf>
	    	   return;
 8001054:	e052      	b.n	80010fc <processInput+0xec>
	    if (token) LjoyX = (int32_t)strtol(token, NULL, 10);
 8001056:	220a      	movs	r2, #10
 8001058:	2100      	movs	r1, #0
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f005 fe8e 	bl	8006d7c <strtol>
 8001060:	6278      	str	r0, [r7, #36]	@ 0x24

	    token = strtok(NULL, ",");
 8001062:	4928      	ldr	r1, [pc, #160]	@ (8001104 <processInput+0xf4>)
 8001064:	2000      	movs	r0, #0
 8001066:	f006 f847 	bl	80070f8 <strtok>
 800106a:	6178      	str	r0, [r7, #20]
	    if (token) LjoyY = (int32_t)strtol(token, NULL, 10);
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d005      	beq.n	800107e <processInput+0x6e>
 8001072:	220a      	movs	r2, #10
 8001074:	2100      	movs	r1, #0
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f005 fe80 	bl	8006d7c <strtol>
 800107c:	6238      	str	r0, [r7, #32]

	    token = strtok(NULL, ",");
 800107e:	4921      	ldr	r1, [pc, #132]	@ (8001104 <processInput+0xf4>)
 8001080:	2000      	movs	r0, #0
 8001082:	f006 f839 	bl	80070f8 <strtok>
 8001086:	6178      	str	r0, [r7, #20]
	    if (token) RjoyX = (int32_t)strtol(token, NULL, 10);
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <processInput+0x8a>
 800108e:	220a      	movs	r2, #10
 8001090:	2100      	movs	r1, #0
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f005 fe72 	bl	8006d7c <strtol>
 8001098:	61f8      	str	r0, [r7, #28]

	    token = strtok(NULL, ",");
 800109a:	491a      	ldr	r1, [pc, #104]	@ (8001104 <processInput+0xf4>)
 800109c:	2000      	movs	r0, #0
 800109e:	f006 f82b 	bl	80070f8 <strtok>
 80010a2:	6178      	str	r0, [r7, #20]
	    if (token) LT = (int32_t)strtol(token, NULL, 10);
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d005      	beq.n	80010b6 <processInput+0xa6>
 80010aa:	220a      	movs	r2, #10
 80010ac:	2100      	movs	r1, #0
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f005 fe64 	bl	8006d7c <strtol>
 80010b4:	6138      	str	r0, [r7, #16]

	    token = strtok(NULL, ",");
 80010b6:	4913      	ldr	r1, [pc, #76]	@ (8001104 <processInput+0xf4>)
 80010b8:	2000      	movs	r0, #0
 80010ba:	f006 f81d 	bl	80070f8 <strtok>
 80010be:	6178      	str	r0, [r7, #20]
	    if (token) RT = (int32_t)strtol(token, NULL, 10);
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d005      	beq.n	80010d2 <processInput+0xc2>
 80010c6:	220a      	movs	r2, #10
 80010c8:	2100      	movs	r1, #0
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f005 fe56 	bl	8006d7c <strtol>
 80010d0:	61b8      	str	r0, [r7, #24]

	    // Assign parsed values to output pointers
	    *roll   = LjoyX*180;
 80010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d4:	22b4      	movs	r2, #180	@ 0xb4
 80010d6:	fb03 f202 	mul.w	r2, r3, r2
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	601a      	str	r2, [r3, #0]
	    *pitch  = LjoyY*180;
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	22b4      	movs	r2, #180	@ 0xb4
 80010e2:	fb03 f202 	mul.w	r2, r3, r2
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	601a      	str	r2, [r3, #0]
	    *yaw    = RjoyX*180;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	22b4      	movs	r2, #180	@ 0xb4
 80010ee:	fb03 f202 	mul.w	r2, r3, r2
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	601a      	str	r2, [r3, #0]
	    *effort = RT;
 80010f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	601a      	str	r2, [r3, #0]
	   }
 80010fc:	3728      	adds	r7, #40	@ 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	08007dec 	.word	0x08007dec
 8001108:	200000a4 	.word	0x200000a4
 800110c:	08007dc4 	.word	0x08007dc4

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001114:	f001 f818 	bl	8002148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001118:	f000 f87a 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111c:	f000 fa80 	bl	8001620 <MX_GPIO_Init>
  MX_DMA_Init();
 8001120:	f000 fa5e 	bl	80015e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001124:	f000 f8dc 	bl	80012e0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001128:	f000 f92c 	bl	8001384 <MX_I2C1_Init>
  MX_TIM3_Init();
 800112c:	f000 f986 	bl	800143c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001130:	f000 fa02 	bl	8001538 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001134:	f000 fa2a 	bl	800158c <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8001138:	f000 f952 	bl	80013e0 <MX_I2C3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { //potential to use HAL tim int flag if control loop needs to run at percise intervals to avoid spike in derivative/integral calculation
	 if (state == 0){
 800113c:	4b25      	ldr	r3, [pc, #148]	@ (80011d4 <main+0xc4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d105      	bne.n	8001150 <main+0x40>

		 BNO_Init();
 8001144:	f7ff fd40 	bl	8000bc8 <BNO_Init>
		 state = 1;
 8001148:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <main+0xc4>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	e7f5      	b.n	800113c <main+0x2c>
	 }else if (state == 1){
 8001150:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <main+0xc4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d11b      	bne.n	8001190 <main+0x80>
		 HAL_UART_Receive_DMA(&huart2, BT_RxBuf, BT_MSG_LEN-1);
 8001158:	221e      	movs	r2, #30
 800115a:	491f      	ldr	r1, [pc, #124]	@ (80011d8 <main+0xc8>)
 800115c:	481f      	ldr	r0, [pc, #124]	@ (80011dc <main+0xcc>)
 800115e:	f004 fc86 	bl	8005a6e <HAL_UART_Receive_DMA>
		 if (roll_set > 150000){
 8001162:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <main+0xd0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a1f      	ldr	r2, [pc, #124]	@ (80011e4 <main+0xd4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	dd02      	ble.n	8001172 <main+0x62>
		 		 state =2;
 800116c:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <main+0xc4>)
 800116e:	2202      	movs	r2, #2
 8001170:	601a      	str	r2, [r3, #0]
		 		  }
		 if (roll_set<-150000){
 8001172:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <main+0xd0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1c      	ldr	r2, [pc, #112]	@ (80011e8 <main+0xd8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	da02      	bge.n	8001182 <main+0x72>
			 arming = true;
 800117c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <main+0xdc>)
 800117e:	2201      	movs	r2, #1
 8001180:	601a      	str	r2, [r3, #0]
		 }
		 if (arming == true){
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <main+0xdc>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d1d8      	bne.n	800113c <main+0x2c>
			 armESC();
 800118a:	f7ff fddd 	bl	8000d48 <armESC>
 800118e:	e7d5      	b.n	800113c <main+0x2c>

		 }

		 //imu_request = true;
		 }else if(state == 2){
 8001190:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <main+0xc4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d1d1      	bne.n	800113c <main+0x2c>
		 HAL_UART_Receive_DMA(&huart2, BT_RxBuf, BT_MSG_LEN-1); //set up this function to run on next BT input
 8001198:	221e      	movs	r2, #30
 800119a:	490f      	ldr	r1, [pc, #60]	@ (80011d8 <main+0xc8>)
 800119c:	480f      	ldr	r0, [pc, #60]	@ (80011dc <main+0xcc>)
 800119e:	f004 fc66 	bl	8005a6e <HAL_UART_Receive_DMA>
		  if (imu_request) {
 80011a2:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <main+0xe0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0c8      	beq.n	800113c <main+0x2c>
			  imu_request = false;
 80011aa:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <main+0xe0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
		      //imu_request = false;
		      BNO_Read(&roll_true, &pitch_true, &yaw_true);
 80011b0:	4a10      	ldr	r2, [pc, #64]	@ (80011f4 <main+0xe4>)
 80011b2:	4911      	ldr	r1, [pc, #68]	@ (80011f8 <main+0xe8>)
 80011b4:	4811      	ldr	r0, [pc, #68]	@ (80011fc <main+0xec>)
 80011b6:	f7ff fd77 	bl	8000ca8 <BNO_Read>
			  PID();
 80011ba:	f000 facb 	bl	8001754 <PID>

			  update_Motors(roll_effort, pitch_effort, yaw_effort, effort_set);
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <main+0xf0>)
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <main+0xf4>)
 80011c4:	6819      	ldr	r1, [r3, #0]
 80011c6:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <main+0xf8>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <main+0xfc>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f7ff fe03 	bl	8000dd8 <update_Motors>
	 if (state == 0){
 80011d2:	e7b3      	b.n	800113c <main+0x2c>
 80011d4:	200002d0 	.word	0x200002d0
 80011d8:	2000034c 	.word	0x2000034c
 80011dc:	20000228 	.word	0x20000228
 80011e0:	200002d8 	.word	0x200002d8
 80011e4:	000249f0 	.word	0x000249f0
 80011e8:	fffdb610 	.word	0xfffdb610
 80011ec:	2000036c 	.word	0x2000036c
 80011f0:	200002d4 	.word	0x200002d4
 80011f4:	200002f0 	.word	0x200002f0
 80011f8:	200002ec 	.word	0x200002ec
 80011fc:	200002e8 	.word	0x200002e8
 8001200:	200002f4 	.word	0x200002f4
 8001204:	200002f8 	.word	0x200002f8
 8001208:	200002fc 	.word	0x200002fc
 800120c:	200002e4 	.word	0x200002e4

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b094      	sub	sp, #80	@ 0x50
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	2230      	movs	r2, #48	@ 0x30
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f005 ff62 	bl	80070e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	4b27      	ldr	r3, [pc, #156]	@ (80012d8 <SystemClock_Config+0xc8>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	4a26      	ldr	r2, [pc, #152]	@ (80012d8 <SystemClock_Config+0xc8>)
 800123e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001242:	6413      	str	r3, [r2, #64]	@ 0x40
 8001244:	4b24      	ldr	r3, [pc, #144]	@ (80012d8 <SystemClock_Config+0xc8>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <SystemClock_Config+0xcc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a20      	ldr	r2, [pc, #128]	@ (80012dc <SystemClock_Config+0xcc>)
 800125a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <SystemClock_Config+0xcc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126c:	2302      	movs	r3, #2
 800126e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001270:	2301      	movs	r3, #1
 8001272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001274:	2310      	movs	r3, #16
 8001276:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001278:	2302      	movs	r3, #2
 800127a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800127c:	2300      	movs	r3, #0
 800127e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001280:	2308      	movs	r3, #8
 8001282:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001284:	2332      	movs	r3, #50	@ 0x32
 8001286:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001288:	2302      	movs	r3, #2
 800128a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800128c:	2304      	movs	r3, #4
 800128e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	4618      	mov	r0, r3
 8001296:	f003 fa49 	bl	800472c <HAL_RCC_OscConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012a0:	f000 fb80 	bl	80019a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a4:	230f      	movs	r3, #15
 80012a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a8:	2302      	movs	r3, #2
 80012aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2101      	movs	r1, #1
 80012be:	4618      	mov	r0, r3
 80012c0:	f003 fcac 	bl	8004c1c <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80012ca:	f000 fb6b 	bl	80019a4 <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3750      	adds	r7, #80	@ 0x50
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40007000 	.word	0x40007000

080012e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012e6:	463b      	mov	r3, r7
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <MX_ADC1_Init+0x98>)
 80012f4:	4a21      	ldr	r2, [pc, #132]	@ (800137c <MX_ADC1_Init+0x9c>)
 80012f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <MX_ADC1_Init+0x98>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <MX_ADC1_Init+0x98>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001304:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <MX_ADC1_Init+0x98>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800130a:	4b1b      	ldr	r3, [pc, #108]	@ (8001378 <MX_ADC1_Init+0x98>)
 800130c:	2200      	movs	r2, #0
 800130e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001310:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <MX_ADC1_Init+0x98>)
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001318:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <MX_ADC1_Init+0x98>)
 800131a:	2200      	movs	r2, #0
 800131c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800131e:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <MX_ADC1_Init+0x98>)
 8001320:	4a17      	ldr	r2, [pc, #92]	@ (8001380 <MX_ADC1_Init+0xa0>)
 8001322:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001324:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <MX_ADC1_Init+0x98>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800132a:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <MX_ADC1_Init+0x98>)
 800132c:	2201      	movs	r2, #1
 800132e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001330:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <MX_ADC1_Init+0x98>)
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001338:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <MX_ADC1_Init+0x98>)
 800133a:	2201      	movs	r2, #1
 800133c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800133e:	480e      	ldr	r0, [pc, #56]	@ (8001378 <MX_ADC1_Init+0x98>)
 8001340:	f000 ff98 	bl	8002274 <HAL_ADC_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800134a:	f000 fb2b 	bl	80019a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800134e:	2301      	movs	r3, #1
 8001350:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001352:	2301      	movs	r3, #1
 8001354:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135a:	463b      	mov	r3, r7
 800135c:	4619      	mov	r1, r3
 800135e:	4806      	ldr	r0, [pc, #24]	@ (8001378 <MX_ADC1_Init+0x98>)
 8001360:	f000 ffcc 	bl	80022fc <HAL_ADC_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800136a:	f000 fb1b 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200000a8 	.word	0x200000a8
 800137c:	40012000 	.word	0x40012000
 8001380:	0f000001 	.word	0x0f000001

08001384 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001388:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <MX_I2C1_Init+0x50>)
 800138a:	4a13      	ldr	r2, [pc, #76]	@ (80013d8 <MX_I2C1_Init+0x54>)
 800138c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <MX_I2C1_Init+0x50>)
 8001390:	4a12      	ldr	r2, [pc, #72]	@ (80013dc <MX_I2C1_Init+0x58>)
 8001392:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_I2C1_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <MX_I2C1_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013c2:	f002 f95f 	bl	8003684 <HAL_I2C_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013cc:	f000 faea 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200000f0 	.word	0x200000f0
 80013d8:	40005400 	.word	0x40005400
 80013dc:	000186a0 	.word	0x000186a0

080013e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_I2C3_Init+0x50>)
 80013e6:	4a13      	ldr	r2, [pc, #76]	@ (8001434 <MX_I2C3_Init+0x54>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_I2C3_Init+0x50>)
 80013ec:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <MX_I2C3_Init+0x58>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_I2C3_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_I2C3_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_I2C3_Init+0x50>)
 80013fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001402:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <MX_I2C3_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_I2C3_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <MX_I2C3_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_I2C3_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_I2C3_Init+0x50>)
 800141e:	f002 f931 	bl	8003684 <HAL_I2C_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001428:	f000 fabc 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000144 	.word	0x20000144
 8001434:	40005c00 	.word	0x40005c00
 8001438:	000186a0 	.word	0x000186a0

0800143c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001442:	f107 0320 	add.w	r3, r7, #32
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
 800145a:	615a      	str	r2, [r3, #20]
 800145c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800145e:	4b34      	ldr	r3, [pc, #208]	@ (8001530 <MX_TIM3_Init+0xf4>)
 8001460:	4a34      	ldr	r2, [pc, #208]	@ (8001534 <MX_TIM3_Init+0xf8>)
 8001462:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 8001464:	4b32      	ldr	r3, [pc, #200]	@ (8001530 <MX_TIM3_Init+0xf4>)
 8001466:	2232      	movs	r2, #50	@ 0x32
 8001468:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b31      	ldr	r3, [pc, #196]	@ (8001530 <MX_TIM3_Init+0xf4>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001470:	4b2f      	ldr	r3, [pc, #188]	@ (8001530 <MX_TIM3_Init+0xf4>)
 8001472:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001476:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001478:	4b2d      	ldr	r3, [pc, #180]	@ (8001530 <MX_TIM3_Init+0xf4>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147e:	4b2c      	ldr	r3, [pc, #176]	@ (8001530 <MX_TIM3_Init+0xf4>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001484:	482a      	ldr	r0, [pc, #168]	@ (8001530 <MX_TIM3_Init+0xf4>)
 8001486:	f003 fda9 	bl	8004fdc <HAL_TIM_PWM_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001490:	f000 fa88 	bl	80019a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	4619      	mov	r1, r3
 80014a2:	4823      	ldr	r0, [pc, #140]	@ (8001530 <MX_TIM3_Init+0xf4>)
 80014a4:	f004 f99a 	bl	80057dc <HAL_TIMEx_MasterConfigSynchronization>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80014ae:	f000 fa79 	bl	80019a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b2:	2360      	movs	r3, #96	@ 0x60
 80014b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 400;
 80014b6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80014ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	4619      	mov	r1, r3
 80014ca:	4819      	ldr	r0, [pc, #100]	@ (8001530 <MX_TIM3_Init+0xf4>)
 80014cc:	f003 fe86 	bl	80051dc <HAL_TIM_PWM_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80014d6:	f000 fa65 	bl	80019a4 <Error_Handler>
  }
  sConfigOC.Pulse = 3200;
 80014da:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 80014de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2204      	movs	r2, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4812      	ldr	r0, [pc, #72]	@ (8001530 <MX_TIM3_Init+0xf4>)
 80014e8:	f003 fe78 	bl	80051dc <HAL_TIM_PWM_ConfigChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80014f2:	f000 fa57 	bl	80019a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2208      	movs	r2, #8
 80014fa:	4619      	mov	r1, r3
 80014fc:	480c      	ldr	r0, [pc, #48]	@ (8001530 <MX_TIM3_Init+0xf4>)
 80014fe:	f003 fe6d 	bl	80051dc <HAL_TIM_PWM_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001508:	f000 fa4c 	bl	80019a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	220c      	movs	r2, #12
 8001510:	4619      	mov	r1, r3
 8001512:	4807      	ldr	r0, [pc, #28]	@ (8001530 <MX_TIM3_Init+0xf4>)
 8001514:	f003 fe62 	bl	80051dc <HAL_TIM_PWM_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800151e:	f000 fa41 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001522:	4803      	ldr	r0, [pc, #12]	@ (8001530 <MX_TIM3_Init+0xf4>)
 8001524:	f000 fba8 	bl	8001c78 <HAL_TIM_MspPostInit>

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	@ 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000198 	.word	0x20000198
 8001534:	40000400 	.word	0x40000400

08001538 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800153c:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 800153e:	4a12      	ldr	r2, [pc, #72]	@ (8001588 <MX_USART1_UART_Init+0x50>)
 8001540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001542:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 8001544:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 8001570:	f004 f9a2 	bl	80058b8 <HAL_UART_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800157a:	f000 fa13 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200001e0 	.word	0x200001e0
 8001588:	40011000 	.word	0x40011000

0800158c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001592:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <MX_USART2_UART_Init+0x50>)
 8001594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015c4:	f004 f978 	bl	80058b8 <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ce:	f000 f9e9 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000228 	.word	0x20000228
 80015dc:	40004400 	.word	0x40004400

080015e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <MX_DMA_Init+0x3c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a0b      	ldr	r2, [pc, #44]	@ (800161c <MX_DMA_Init+0x3c>)
 80015f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b09      	ldr	r3, [pc, #36]	@ (800161c <MX_DMA_Init+0x3c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2010      	movs	r0, #16
 8001608:	f001 f981 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800160c:	2010      	movs	r0, #16
 800160e:	f001 f99a 	bl	8002946 <HAL_NVIC_EnableIRQ>

}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800

08001620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	@ 0x28
 8001624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b42      	ldr	r3, [pc, #264]	@ (8001744 <MX_GPIO_Init+0x124>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a41      	ldr	r2, [pc, #260]	@ (8001744 <MX_GPIO_Init+0x124>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b3f      	ldr	r3, [pc, #252]	@ (8001744 <MX_GPIO_Init+0x124>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b3b      	ldr	r3, [pc, #236]	@ (8001744 <MX_GPIO_Init+0x124>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a3a      	ldr	r2, [pc, #232]	@ (8001744 <MX_GPIO_Init+0x124>)
 800165c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b38      	ldr	r3, [pc, #224]	@ (8001744 <MX_GPIO_Init+0x124>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b34      	ldr	r3, [pc, #208]	@ (8001744 <MX_GPIO_Init+0x124>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a33      	ldr	r2, [pc, #204]	@ (8001744 <MX_GPIO_Init+0x124>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b31      	ldr	r3, [pc, #196]	@ (8001744 <MX_GPIO_Init+0x124>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b2d      	ldr	r3, [pc, #180]	@ (8001744 <MX_GPIO_Init+0x124>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a2c      	ldr	r2, [pc, #176]	@ (8001744 <MX_GPIO_Init+0x124>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b2a      	ldr	r3, [pc, #168]	@ (8001744 <MX_GPIO_Init+0x124>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80016ac:	4826      	ldr	r0, [pc, #152]	@ (8001748 <MX_GPIO_Init+0x128>)
 80016ae:	f001 ffcf 	bl	8003650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, US_ECHO_Pin|US_TRIG_Pin|GPIO_PIN_14|GPIO_PIN_15
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 4172 	mov.w	r1, #61952	@ 0xf200
 80016b8:	4824      	ldr	r0, [pc, #144]	@ (800174c <MX_GPIO_Init+0x12c>)
 80016ba:	f001 ffc9 	bl	8003650 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80016c4:	4822      	ldr	r0, [pc, #136]	@ (8001750 <MX_GPIO_Init+0x130>)
 80016c6:	f001 ffc3 	bl	8003650 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80016ca:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	4819      	ldr	r0, [pc, #100]	@ (8001748 <MX_GPIO_Init+0x128>)
 80016e4:	f001 fd4c 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016e8:	2310      	movs	r3, #16
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	4815      	ldr	r0, [pc, #84]	@ (8001750 <MX_GPIO_Init+0x130>)
 80016fc:	f001 fd40 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pins : US_ECHO_Pin US_TRIG_Pin PB14 PB15
                           PB9 */
  GPIO_InitStruct.Pin = US_ECHO_Pin|US_TRIG_Pin|GPIO_PIN_14|GPIO_PIN_15
 8001700:	f44f 4372 	mov.w	r3, #61952	@ 0xf200
 8001704:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	480c      	ldr	r0, [pc, #48]	@ (800174c <MX_GPIO_Init+0x12c>)
 800171a:	f001 fd31 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800171e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	@ (8001750 <MX_GPIO_Init+0x130>)
 8001738:	f001 fd22 	bl	8003180 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800173c:	bf00      	nop
 800173e:	3728      	adds	r7, #40	@ 0x28
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40023800 	.word	0x40023800
 8001748:	40020800 	.word	0x40020800
 800174c:	40020400 	.word	0x40020400
 8001750:	40020000 	.word	0x40020000

08001754 <PID>:

/* USER CODE BEGIN 4 */
static void PID(void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
    //  Roll
    roll_error = roll_set - roll_true;
 8001758:	4b54      	ldr	r3, [pc, #336]	@ (80018ac <PID+0x158>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b54      	ldr	r3, [pc, #336]	@ (80018b0 <PID+0x15c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	4a54      	ldr	r2, [pc, #336]	@ (80018b4 <PID+0x160>)
 8001764:	6013      	str	r3, [r2, #0]
    roll_integral += roll_error;
 8001766:	4b54      	ldr	r3, [pc, #336]	@ (80018b8 <PID+0x164>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4b52      	ldr	r3, [pc, #328]	@ (80018b4 <PID+0x160>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a51      	ldr	r2, [pc, #324]	@ (80018b8 <PID+0x164>)
 8001772:	6013      	str	r3, [r2, #0]
    roll_derivative = roll_error - last_roll_error;
 8001774:	4b4f      	ldr	r3, [pc, #316]	@ (80018b4 <PID+0x160>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b50      	ldr	r3, [pc, #320]	@ (80018bc <PID+0x168>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	4a50      	ldr	r2, [pc, #320]	@ (80018c0 <PID+0x16c>)
 8001780:	6013      	str	r3, [r2, #0]
    roll_effort = (Kp_roll * roll_error + Ki_roll * roll_integral + Kd_roll * roll_derivative) / PID_SCALE;
 8001782:	4b50      	ldr	r3, [pc, #320]	@ (80018c4 <PID+0x170>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a4b      	ldr	r2, [pc, #300]	@ (80018b4 <PID+0x160>)
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	fb03 f202 	mul.w	r2, r3, r2
 800178e:	4b4e      	ldr	r3, [pc, #312]	@ (80018c8 <PID+0x174>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4949      	ldr	r1, [pc, #292]	@ (80018b8 <PID+0x164>)
 8001794:	6809      	ldr	r1, [r1, #0]
 8001796:	fb01 f303 	mul.w	r3, r1, r3
 800179a:	441a      	add	r2, r3
 800179c:	4b4b      	ldr	r3, [pc, #300]	@ (80018cc <PID+0x178>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4947      	ldr	r1, [pc, #284]	@ (80018c0 <PID+0x16c>)
 80017a2:	6809      	ldr	r1, [r1, #0]
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	4a49      	ldr	r2, [pc, #292]	@ (80018d0 <PID+0x17c>)
 80017ac:	fb82 1203 	smull	r1, r2, r2, r3
 80017b0:	1352      	asrs	r2, r2, #13
 80017b2:	17db      	asrs	r3, r3, #31
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	4a47      	ldr	r2, [pc, #284]	@ (80018d4 <PID+0x180>)
 80017b8:	6013      	str	r3, [r2, #0]
    last_roll_error = roll_error;
 80017ba:	4b3e      	ldr	r3, [pc, #248]	@ (80018b4 <PID+0x160>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a3f      	ldr	r2, [pc, #252]	@ (80018bc <PID+0x168>)
 80017c0:	6013      	str	r3, [r2, #0]

    // Pitch
    pitch_error = pitch_set - pitch_true;
 80017c2:	4b45      	ldr	r3, [pc, #276]	@ (80018d8 <PID+0x184>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b45      	ldr	r3, [pc, #276]	@ (80018dc <PID+0x188>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	4a44      	ldr	r2, [pc, #272]	@ (80018e0 <PID+0x18c>)
 80017ce:	6013      	str	r3, [r2, #0]
    pitch_integral += pitch_error;
 80017d0:	4b44      	ldr	r3, [pc, #272]	@ (80018e4 <PID+0x190>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b42      	ldr	r3, [pc, #264]	@ (80018e0 <PID+0x18c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4413      	add	r3, r2
 80017da:	4a42      	ldr	r2, [pc, #264]	@ (80018e4 <PID+0x190>)
 80017dc:	6013      	str	r3, [r2, #0]
    pitch_derivative = pitch_error - last_pitch_error;
 80017de:	4b40      	ldr	r3, [pc, #256]	@ (80018e0 <PID+0x18c>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4b41      	ldr	r3, [pc, #260]	@ (80018e8 <PID+0x194>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	4a40      	ldr	r2, [pc, #256]	@ (80018ec <PID+0x198>)
 80017ea:	6013      	str	r3, [r2, #0]
    pitch_effort = (Kp_pitch * pitch_error + Ki_pitch * pitch_integral + Kd_pitch * pitch_derivative) / PID_SCALE;
 80017ec:	4b40      	ldr	r3, [pc, #256]	@ (80018f0 <PID+0x19c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a3b      	ldr	r2, [pc, #236]	@ (80018e0 <PID+0x18c>)
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	fb03 f202 	mul.w	r2, r3, r2
 80017f8:	4b3e      	ldr	r3, [pc, #248]	@ (80018f4 <PID+0x1a0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4939      	ldr	r1, [pc, #228]	@ (80018e4 <PID+0x190>)
 80017fe:	6809      	ldr	r1, [r1, #0]
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	441a      	add	r2, r3
 8001806:	4b3c      	ldr	r3, [pc, #240]	@ (80018f8 <PID+0x1a4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4938      	ldr	r1, [pc, #224]	@ (80018ec <PID+0x198>)
 800180c:	6809      	ldr	r1, [r1, #0]
 800180e:	fb01 f303 	mul.w	r3, r1, r3
 8001812:	4413      	add	r3, r2
 8001814:	4a2e      	ldr	r2, [pc, #184]	@ (80018d0 <PID+0x17c>)
 8001816:	fb82 1203 	smull	r1, r2, r2, r3
 800181a:	1352      	asrs	r2, r2, #13
 800181c:	17db      	asrs	r3, r3, #31
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	4a36      	ldr	r2, [pc, #216]	@ (80018fc <PID+0x1a8>)
 8001822:	6013      	str	r3, [r2, #0]
    last_pitch_error = pitch_error;
 8001824:	4b2e      	ldr	r3, [pc, #184]	@ (80018e0 <PID+0x18c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a2f      	ldr	r2, [pc, #188]	@ (80018e8 <PID+0x194>)
 800182a:	6013      	str	r3, [r2, #0]

    //  Yaw
    yaw_error = yaw_set - yaw_true;
 800182c:	4b34      	ldr	r3, [pc, #208]	@ (8001900 <PID+0x1ac>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b34      	ldr	r3, [pc, #208]	@ (8001904 <PID+0x1b0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	4a34      	ldr	r2, [pc, #208]	@ (8001908 <PID+0x1b4>)
 8001838:	6013      	str	r3, [r2, #0]
    yaw_integral += yaw_error;
 800183a:	4b34      	ldr	r3, [pc, #208]	@ (800190c <PID+0x1b8>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4b32      	ldr	r3, [pc, #200]	@ (8001908 <PID+0x1b4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a31      	ldr	r2, [pc, #196]	@ (800190c <PID+0x1b8>)
 8001846:	6013      	str	r3, [r2, #0]
    yaw_derivative = yaw_error - last_yaw_error;
 8001848:	4b2f      	ldr	r3, [pc, #188]	@ (8001908 <PID+0x1b4>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b30      	ldr	r3, [pc, #192]	@ (8001910 <PID+0x1bc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	4a30      	ldr	r2, [pc, #192]	@ (8001914 <PID+0x1c0>)
 8001854:	6013      	str	r3, [r2, #0]
    yaw_effort = (Kp_yaw * yaw_error + Ki_yaw * yaw_integral + Kd_yaw * yaw_derivative) / PID_SCALE;
 8001856:	4b30      	ldr	r3, [pc, #192]	@ (8001918 <PID+0x1c4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a2b      	ldr	r2, [pc, #172]	@ (8001908 <PID+0x1b4>)
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	fb03 f202 	mul.w	r2, r3, r2
 8001862:	4b2e      	ldr	r3, [pc, #184]	@ (800191c <PID+0x1c8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4929      	ldr	r1, [pc, #164]	@ (800190c <PID+0x1b8>)
 8001868:	6809      	ldr	r1, [r1, #0]
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	441a      	add	r2, r3
 8001870:	4b2b      	ldr	r3, [pc, #172]	@ (8001920 <PID+0x1cc>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4927      	ldr	r1, [pc, #156]	@ (8001914 <PID+0x1c0>)
 8001876:	6809      	ldr	r1, [r1, #0]
 8001878:	fb01 f303 	mul.w	r3, r1, r3
 800187c:	4413      	add	r3, r2
 800187e:	4a14      	ldr	r2, [pc, #80]	@ (80018d0 <PID+0x17c>)
 8001880:	fb82 1203 	smull	r1, r2, r2, r3
 8001884:	1352      	asrs	r2, r2, #13
 8001886:	17db      	asrs	r3, r3, #31
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	4a26      	ldr	r2, [pc, #152]	@ (8001924 <PID+0x1d0>)
 800188c:	6013      	str	r3, [r2, #0]
    last_yaw_error = yaw_error;
 800188e:	4b1e      	ldr	r3, [pc, #120]	@ (8001908 <PID+0x1b4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1f      	ldr	r2, [pc, #124]	@ (8001910 <PID+0x1bc>)
 8001894:	6013      	str	r3, [r2, #0]

    printf("Errors -> Roll, Pitch, Yaw,  %d,%d,%d \r\n", roll_error, pitch_error, yaw_error);
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <PID+0x160>)
 8001898:	6819      	ldr	r1, [r3, #0]
 800189a:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <PID+0x18c>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4b1a      	ldr	r3, [pc, #104]	@ (8001908 <PID+0x1b4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4821      	ldr	r0, [pc, #132]	@ (8001928 <PID+0x1d4>)
 80018a4:	f005 fb36 	bl	8006f14 <iprintf>
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	200002d8 	.word	0x200002d8
 80018b0:	200002e8 	.word	0x200002e8
 80018b4:	20000300 	.word	0x20000300
 80018b8:	2000030c 	.word	0x2000030c
 80018bc:	20000324 	.word	0x20000324
 80018c0:	20000318 	.word	0x20000318
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000330 	.word	0x20000330
 80018cc:	20000334 	.word	0x20000334
 80018d0:	14f8b589 	.word	0x14f8b589
 80018d4:	200002f4 	.word	0x200002f4
 80018d8:	200002dc 	.word	0x200002dc
 80018dc:	200002ec 	.word	0x200002ec
 80018e0:	20000304 	.word	0x20000304
 80018e4:	20000310 	.word	0x20000310
 80018e8:	20000328 	.word	0x20000328
 80018ec:	2000031c 	.word	0x2000031c
 80018f0:	20000004 	.word	0x20000004
 80018f4:	20000338 	.word	0x20000338
 80018f8:	2000033c 	.word	0x2000033c
 80018fc:	200002f8 	.word	0x200002f8
 8001900:	200002e0 	.word	0x200002e0
 8001904:	200002f0 	.word	0x200002f0
 8001908:	20000308 	.word	0x20000308
 800190c:	20000314 	.word	0x20000314
 8001910:	2000032c 	.word	0x2000032c
 8001914:	20000320 	.word	0x20000320
 8001918:	20000340 	.word	0x20000340
 800191c:	20000344 	.word	0x20000344
 8001920:	20000348 	.word	0x20000348
 8001924:	200002fc 	.word	0x200002fc
 8001928:	08007df0 	.word	0x08007df0

0800192c <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//should trigger when DMA reads complete message
{    if (huart->Instance == USART2) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af02      	add	r7, sp, #8
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <HAL_UART_RxCpltCallback+0x38>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10a      	bne.n	8001954 <HAL_UART_RxCpltCallback+0x28>
        // Null-terminate just in case you're using sscanf or string functions
        BT_RxBuf[BT_MSG_LEN - 1] = '\0';
 800193e:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <HAL_UART_RxCpltCallback+0x3c>)
 8001940:	2200      	movs	r2, #0
 8001942:	779a      	strb	r2, [r3, #30]

        // Process entire message

        processInput((char *)BT_RxBuf, &roll_set, &pitch_set, &yaw_set, &effort_set);
 8001944:	4b09      	ldr	r3, [pc, #36]	@ (800196c <HAL_UART_RxCpltCallback+0x40>)
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <HAL_UART_RxCpltCallback+0x44>)
 800194a:	4a0a      	ldr	r2, [pc, #40]	@ (8001974 <HAL_UART_RxCpltCallback+0x48>)
 800194c:	490a      	ldr	r1, [pc, #40]	@ (8001978 <HAL_UART_RxCpltCallback+0x4c>)
 800194e:	4806      	ldr	r0, [pc, #24]	@ (8001968 <HAL_UART_RxCpltCallback+0x3c>)
 8001950:	f7ff fb5e 	bl	8001010 <processInput>
        }
        // Restart DMA to receive next message
        //HAL_UART_Receive_DMA(&huart2, BT_RxBuf, BT_MSG_LEN); //set up this function to run on next BT input
        imu_request = true; //set up IMU to run when interupt exits
 8001954:	4b09      	ldr	r3, [pc, #36]	@ (800197c <HAL_UART_RxCpltCallback+0x50>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40004400 	.word	0x40004400
 8001968:	2000034c 	.word	0x2000034c
 800196c:	200002e4 	.word	0x200002e4
 8001970:	200002e0 	.word	0x200002e0
 8001974:	200002dc 	.word	0x200002dc
 8001978:	200002d8 	.word	0x200002d8
 800197c:	200002d4 	.word	0x200002d4

08001980 <__io_putchar>:

int __io_putchar(int ch) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001988:	1d39      	adds	r1, r7, #4
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	2201      	movs	r2, #1
 8001990:	4803      	ldr	r0, [pc, #12]	@ (80019a0 <__io_putchar+0x20>)
 8001992:	f003 ffe1 	bl	8005958 <HAL_UART_Transmit>
    return ch;
 8001996:	687b      	ldr	r3, [r7, #4]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	200001e0 	.word	0x200001e0

080019a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
}
 80019aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <Error_Handler+0x8>

080019b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <HAL_MspInit+0x4c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	4a0f      	ldr	r2, [pc, #60]	@ (80019fc <HAL_MspInit+0x4c>)
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019c6:	4b0d      	ldr	r3, [pc, #52]	@ (80019fc <HAL_MspInit+0x4c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <HAL_MspInit+0x4c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	4a08      	ldr	r2, [pc, #32]	@ (80019fc <HAL_MspInit+0x4c>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_MspInit+0x4c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800

08001a00 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a17      	ldr	r2, [pc, #92]	@ (8001a7c <HAL_ADC_MspInit+0x7c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d127      	bne.n	8001a72 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <HAL_ADC_MspInit+0x80>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	4a15      	ldr	r2, [pc, #84]	@ (8001a80 <HAL_ADC_MspInit+0x80>)
 8001a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a32:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <HAL_ADC_MspInit+0x80>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <HAL_ADC_MspInit+0x80>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a0e      	ldr	r2, [pc, #56]	@ (8001a80 <HAL_ADC_MspInit+0x80>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <HAL_ADC_MspInit+0x80>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <HAL_ADC_MspInit+0x84>)
 8001a6e:	f001 fb87 	bl	8003180 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	@ 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40012000 	.word	0x40012000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000

08001a88 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08c      	sub	sp, #48	@ 0x30
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a41      	ldr	r2, [pc, #260]	@ (8001bac <HAL_I2C_MspInit+0x124>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d12c      	bne.n	8001b04 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	4b40      	ldr	r3, [pc, #256]	@ (8001bb0 <HAL_I2C_MspInit+0x128>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	4a3f      	ldr	r2, [pc, #252]	@ (8001bb0 <HAL_I2C_MspInit+0x128>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aba:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb0 <HAL_I2C_MspInit+0x128>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
 8001ac4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BNO_SCL_Pin|BNO_SDA_Pin;
 8001ac6:	23c0      	movs	r3, #192	@ 0xc0
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aca:	2312      	movs	r3, #18
 8001acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	f107 031c 	add.w	r3, r7, #28
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4834      	ldr	r0, [pc, #208]	@ (8001bb4 <HAL_I2C_MspInit+0x12c>)
 8001ae2:	f001 fb4d 	bl	8003180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	4b31      	ldr	r3, [pc, #196]	@ (8001bb0 <HAL_I2C_MspInit+0x128>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	4a30      	ldr	r2, [pc, #192]	@ (8001bb0 <HAL_I2C_MspInit+0x128>)
 8001af0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af6:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb0 <HAL_I2C_MspInit+0x128>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001b02:	e04f      	b.n	8001ba4 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a2b      	ldr	r2, [pc, #172]	@ (8001bb8 <HAL_I2C_MspInit+0x130>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d14a      	bne.n	8001ba4 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	4b27      	ldr	r3, [pc, #156]	@ (8001bb0 <HAL_I2C_MspInit+0x128>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	4a26      	ldr	r2, [pc, #152]	@ (8001bb0 <HAL_I2C_MspInit+0x128>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1e:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <HAL_I2C_MspInit+0x128>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <HAL_I2C_MspInit+0x128>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb0 <HAL_I2C_MspInit+0x128>)
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb0 <HAL_I2C_MspInit+0x128>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b4c:	2312      	movs	r3, #18
 8001b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b54:	2303      	movs	r3, #3
 8001b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b58:	2304      	movs	r3, #4
 8001b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	4619      	mov	r1, r3
 8001b62:	4816      	ldr	r0, [pc, #88]	@ (8001bbc <HAL_I2C_MspInit+0x134>)
 8001b64:	f001 fb0c 	bl	8003180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b68:	2310      	movs	r3, #16
 8001b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b6c:	2312      	movs	r3, #18
 8001b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001b78:	2309      	movs	r3, #9
 8001b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4619      	mov	r1, r3
 8001b82:	480c      	ldr	r0, [pc, #48]	@ (8001bb4 <HAL_I2C_MspInit+0x12c>)
 8001b84:	f001 fafc 	bl	8003180 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	4b08      	ldr	r3, [pc, #32]	@ (8001bb0 <HAL_I2C_MspInit+0x128>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b90:	4a07      	ldr	r2, [pc, #28]	@ (8001bb0 <HAL_I2C_MspInit+0x128>)
 8001b92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b98:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <HAL_I2C_MspInit+0x128>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
}
 8001ba4:	bf00      	nop
 8001ba6:	3730      	adds	r7, #48	@ 0x30
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40005400 	.word	0x40005400
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020400 	.word	0x40020400
 8001bb8:	40005c00 	.word	0x40005c00
 8001bbc:	40020000 	.word	0x40020000

08001bc0 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a14      	ldr	r2, [pc, #80]	@ (8001c20 <HAL_I2C_MspDeInit+0x60>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d10e      	bne.n	8001bf0 <HAL_I2C_MspDeInit+0x30>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001bd2:	4b14      	ldr	r3, [pc, #80]	@ (8001c24 <HAL_I2C_MspDeInit+0x64>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	4a13      	ldr	r2, [pc, #76]	@ (8001c24 <HAL_I2C_MspDeInit+0x64>)
 8001bd8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001bdc:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BNO_SCL_GPIO_Port, BNO_SCL_Pin);
 8001bde:	2140      	movs	r1, #64	@ 0x40
 8001be0:	4811      	ldr	r0, [pc, #68]	@ (8001c28 <HAL_I2C_MspDeInit+0x68>)
 8001be2:	f001 fc51 	bl	8003488 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BNO_SDA_GPIO_Port, BNO_SDA_Pin);
 8001be6:	2180      	movs	r1, #128	@ 0x80
 8001be8:	480f      	ldr	r0, [pc, #60]	@ (8001c28 <HAL_I2C_MspDeInit+0x68>)
 8001bea:	f001 fc4d 	bl	8003488 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001bee:	e013      	b.n	8001c18 <HAL_I2C_MspDeInit+0x58>
  else if(hi2c->Instance==I2C3)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c2c <HAL_I2C_MspDeInit+0x6c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d10e      	bne.n	8001c18 <HAL_I2C_MspDeInit+0x58>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <HAL_I2C_MspDeInit+0x64>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	4a09      	ldr	r2, [pc, #36]	@ (8001c24 <HAL_I2C_MspDeInit+0x64>)
 8001c00:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001c04:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8001c06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c0a:	4809      	ldr	r0, [pc, #36]	@ (8001c30 <HAL_I2C_MspDeInit+0x70>)
 8001c0c:	f001 fc3c 	bl	8003488 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8001c10:	2110      	movs	r1, #16
 8001c12:	4805      	ldr	r0, [pc, #20]	@ (8001c28 <HAL_I2C_MspDeInit+0x68>)
 8001c14:	f001 fc38 	bl	8003488 <HAL_GPIO_DeInit>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40005400 	.word	0x40005400
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	40005c00 	.word	0x40005c00
 8001c30:	40020000 	.word	0x40020000

08001c34 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0b      	ldr	r2, [pc, #44]	@ (8001c70 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d10d      	bne.n	8001c62 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_TIM_PWM_MspInit+0x40>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	4a09      	ldr	r2, [pc, #36]	@ (8001c74 <HAL_TIM_PWM_MspInit+0x40>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c56:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <HAL_TIM_PWM_MspInit+0x40>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40000400 	.word	0x40000400
 8001c74:	40023800 	.word	0x40023800

08001c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	@ 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a21      	ldr	r2, [pc, #132]	@ (8001d1c <HAL_TIM_MspPostInit+0xa4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d13b      	bne.n	8001d12 <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	4b20      	ldr	r3, [pc, #128]	@ (8001d20 <HAL_TIM_MspPostInit+0xa8>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d20 <HAL_TIM_MspPostInit+0xa8>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b1d      	ldr	r3, [pc, #116]	@ (8001d20 <HAL_TIM_MspPostInit+0xa8>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <HAL_TIM_MspPostInit+0xa8>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	4a18      	ldr	r2, [pc, #96]	@ (8001d20 <HAL_TIM_MspPostInit+0xa8>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc6:	4b16      	ldr	r3, [pc, #88]	@ (8001d20 <HAL_TIM_MspPostInit+0xa8>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cd2:	23c0      	movs	r3, #192	@ 0xc0
 8001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	480d      	ldr	r0, [pc, #52]	@ (8001d24 <HAL_TIM_MspPostInit+0xac>)
 8001cee:	f001 fa47 	bl	8003180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d02:	2302      	movs	r3, #2
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4806      	ldr	r0, [pc, #24]	@ (8001d28 <HAL_TIM_MspPostInit+0xb0>)
 8001d0e:	f001 fa37 	bl	8003180 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3728      	adds	r7, #40	@ 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40000400 	.word	0x40000400
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020000 	.word	0x40020000
 8001d28:	40020400 	.word	0x40020400

08001d2c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08c      	sub	sp, #48	@ 0x30
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 031c 	add.w	r3, r7, #28
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a51      	ldr	r2, [pc, #324]	@ (8001e90 <HAL_UART_MspInit+0x164>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d135      	bne.n	8001dba <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	4b50      	ldr	r3, [pc, #320]	@ (8001e94 <HAL_UART_MspInit+0x168>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	4a4f      	ldr	r2, [pc, #316]	@ (8001e94 <HAL_UART_MspInit+0x168>)
 8001d58:	f043 0310 	orr.w	r3, r3, #16
 8001d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001e94 <HAL_UART_MspInit+0x168>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	4b49      	ldr	r3, [pc, #292]	@ (8001e94 <HAL_UART_MspInit+0x168>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a48      	ldr	r2, [pc, #288]	@ (8001e94 <HAL_UART_MspInit+0x168>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b46      	ldr	r3, [pc, #280]	@ (8001e94 <HAL_UART_MspInit+0x168>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_TO_ST_Pin|RX_FROM_ST_Pin;
 8001d86:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d98:	2307      	movs	r3, #7
 8001d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4619      	mov	r1, r3
 8001da2:	483d      	ldr	r0, [pc, #244]	@ (8001e98 <HAL_UART_MspInit+0x16c>)
 8001da4:	f001 f9ec 	bl	8003180 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2100      	movs	r1, #0
 8001dac:	2025      	movs	r0, #37	@ 0x25
 8001dae:	f000 fdae 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001db2:	2025      	movs	r0, #37	@ 0x25
 8001db4:	f000 fdc7 	bl	8002946 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001db8:	e066      	b.n	8001e88 <HAL_UART_MspInit+0x15c>
  else if(huart->Instance==USART2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a37      	ldr	r2, [pc, #220]	@ (8001e9c <HAL_UART_MspInit+0x170>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d161      	bne.n	8001e88 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	4b32      	ldr	r3, [pc, #200]	@ (8001e94 <HAL_UART_MspInit+0x168>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dcc:	4a31      	ldr	r2, [pc, #196]	@ (8001e94 <HAL_UART_MspInit+0x168>)
 8001dce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001e94 <HAL_UART_MspInit+0x168>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e94 <HAL_UART_MspInit+0x168>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de8:	4a2a      	ldr	r2, [pc, #168]	@ (8001e94 <HAL_UART_MspInit+0x168>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df0:	4b28      	ldr	r3, [pc, #160]	@ (8001e94 <HAL_UART_MspInit+0x168>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_TX_TO_BT_Pin|UART_RX_FROM_BT_Pin;
 8001dfc:	230c      	movs	r3, #12
 8001dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e0c:	2307      	movs	r3, #7
 8001e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	4619      	mov	r1, r3
 8001e16:	4820      	ldr	r0, [pc, #128]	@ (8001e98 <HAL_UART_MspInit+0x16c>)
 8001e18:	f001 f9b2 	bl	8003180 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e1c:	4b20      	ldr	r3, [pc, #128]	@ (8001ea0 <HAL_UART_MspInit+0x174>)
 8001e1e:	4a21      	ldr	r2, [pc, #132]	@ (8001ea4 <HAL_UART_MspInit+0x178>)
 8001e20:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e22:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea0 <HAL_UART_MspInit+0x174>)
 8001e24:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e28:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea0 <HAL_UART_MspInit+0x174>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea0 <HAL_UART_MspInit+0x174>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <HAL_UART_MspInit+0x174>)
 8001e38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ea0 <HAL_UART_MspInit+0x174>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e44:	4b16      	ldr	r3, [pc, #88]	@ (8001ea0 <HAL_UART_MspInit+0x174>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <HAL_UART_MspInit+0x174>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e50:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <HAL_UART_MspInit+0x174>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e56:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <HAL_UART_MspInit+0x174>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e5c:	4810      	ldr	r0, [pc, #64]	@ (8001ea0 <HAL_UART_MspInit+0x174>)
 8001e5e:	f000 fd8d 	bl	800297c <HAL_DMA_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001e68:	f7ff fd9c 	bl	80019a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea0 <HAL_UART_MspInit+0x174>)
 8001e70:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e72:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea0 <HAL_UART_MspInit+0x174>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	2026      	movs	r0, #38	@ 0x26
 8001e7e:	f000 fd46 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e82:	2026      	movs	r0, #38	@ 0x26
 8001e84:	f000 fd5f 	bl	8002946 <HAL_NVIC_EnableIRQ>
}
 8001e88:	bf00      	nop
 8001e8a:	3730      	adds	r7, #48	@ 0x30
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40011000 	.word	0x40011000
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	40004400 	.word	0x40004400
 8001ea0:	20000270 	.word	0x20000270
 8001ea4:	40026088 	.word	0x40026088

08001ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <NMI_Handler+0x4>

08001eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <HardFault_Handler+0x4>

08001eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <MemManage_Handler+0x4>

08001ec0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <BusFault_Handler+0x4>

08001ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <UsageFault_Handler+0x4>

08001ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001efe:	f000 f975 	bl	80021ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f0c:	4802      	ldr	r0, [pc, #8]	@ (8001f18 <DMA1_Stream5_IRQHandler+0x10>)
 8001f0e:	f000 fecd 	bl	8002cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000270 	.word	0x20000270

08001f1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f20:	4802      	ldr	r0, [pc, #8]	@ (8001f2c <USART1_IRQHandler+0x10>)
 8001f22:	f003 fdc9 	bl	8005ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200001e0 	.word	0x200001e0

08001f30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f34:	4802      	ldr	r0, [pc, #8]	@ (8001f40 <USART2_IRQHandler+0x10>)
 8001f36:	f003 fdbf 	bl	8005ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000228 	.word	0x20000228

08001f44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return 1;
 8001f48:	2301      	movs	r3, #1
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <_kill>:

int _kill(int pid, int sig)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f5e:	f005 f96d 	bl	800723c <__errno>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2216      	movs	r2, #22
 8001f66:	601a      	str	r2, [r3, #0]
  return -1;
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <_exit>:

void _exit (int status)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ffe7 	bl	8001f54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f86:	bf00      	nop
 8001f88:	e7fd      	b.n	8001f86 <_exit+0x12>

08001f8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	e00a      	b.n	8001fb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f9c:	f3af 8000 	nop.w
 8001fa0:	4601      	mov	r1, r0
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	60ba      	str	r2, [r7, #8]
 8001fa8:	b2ca      	uxtb	r2, r1
 8001faa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	dbf0      	blt.n	8001f9c <_read+0x12>
  }

  return len;
 8001fba:	687b      	ldr	r3, [r7, #4]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	e009      	b.n	8001fea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	60ba      	str	r2, [r7, #8]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fcce 	bl	8001980 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	dbf1      	blt.n	8001fd6 <_write+0x12>
  }
  return len;
 8001ff2:	687b      	ldr	r3, [r7, #4]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_close>:

int _close(int file)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002024:	605a      	str	r2, [r3, #4]
  return 0;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <_isatty>:

int _isatty(int file)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800203c:	2301      	movs	r3, #1
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800204a:	b480      	push	{r7}
 800204c:	b085      	sub	sp, #20
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800206c:	4a14      	ldr	r2, [pc, #80]	@ (80020c0 <_sbrk+0x5c>)
 800206e:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <_sbrk+0x60>)
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002078:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d102      	bne.n	8002086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002080:	4b11      	ldr	r3, [pc, #68]	@ (80020c8 <_sbrk+0x64>)
 8002082:	4a12      	ldr	r2, [pc, #72]	@ (80020cc <_sbrk+0x68>)
 8002084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002086:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <_sbrk+0x64>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	429a      	cmp	r2, r3
 8002092:	d207      	bcs.n	80020a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002094:	f005 f8d2 	bl	800723c <__errno>
 8002098:	4603      	mov	r3, r0
 800209a:	220c      	movs	r2, #12
 800209c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800209e:	f04f 33ff 	mov.w	r3, #4294967295
 80020a2:	e009      	b.n	80020b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a4:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <_sbrk+0x64>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020aa:	4b07      	ldr	r3, [pc, #28]	@ (80020c8 <_sbrk+0x64>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	4a05      	ldr	r2, [pc, #20]	@ (80020c8 <_sbrk+0x64>)
 80020b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020b6:	68fb      	ldr	r3, [r7, #12]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20020000 	.word	0x20020000
 80020c4:	00000400 	.word	0x00000400
 80020c8:	20000370 	.word	0x20000370
 80020cc:	200004c8 	.word	0x200004c8

080020d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020d4:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <SystemInit+0x20>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020da:	4a05      	ldr	r2, [pc, #20]	@ (80020f0 <SystemInit+0x20>)
 80020dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800212c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020f8:	f7ff ffea 	bl	80020d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020fc:	480c      	ldr	r0, [pc, #48]	@ (8002130 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020fe:	490d      	ldr	r1, [pc, #52]	@ (8002134 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002100:	4a0d      	ldr	r2, [pc, #52]	@ (8002138 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002104:	e002      	b.n	800210c <LoopCopyDataInit>

08002106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210a:	3304      	adds	r3, #4

0800210c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800210c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002110:	d3f9      	bcc.n	8002106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002112:	4a0a      	ldr	r2, [pc, #40]	@ (800213c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002114:	4c0a      	ldr	r4, [pc, #40]	@ (8002140 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002118:	e001      	b.n	800211e <LoopFillZerobss>

0800211a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800211c:	3204      	adds	r2, #4

0800211e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002120:	d3fb      	bcc.n	800211a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002122:	f005 f891 	bl	8007248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002126:	f7fe fff3 	bl	8001110 <main>
  bx  lr    
 800212a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800212c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002134:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002138:	08008030 	.word	0x08008030
  ldr r2, =_sbss
 800213c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002140:	200004c4 	.word	0x200004c4

08002144 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002144:	e7fe      	b.n	8002144 <ADC_IRQHandler>
	...

08002148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800214c:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <HAL_Init+0x40>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0d      	ldr	r2, [pc, #52]	@ (8002188 <HAL_Init+0x40>)
 8002152:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002156:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002158:	4b0b      	ldr	r3, [pc, #44]	@ (8002188 <HAL_Init+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0a      	ldr	r2, [pc, #40]	@ (8002188 <HAL_Init+0x40>)
 800215e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002162:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002164:	4b08      	ldr	r3, [pc, #32]	@ (8002188 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a07      	ldr	r2, [pc, #28]	@ (8002188 <HAL_Init+0x40>)
 800216a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002170:	2003      	movs	r0, #3
 8002172:	f000 fbc1 	bl	80028f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002176:	200f      	movs	r0, #15
 8002178:	f000 f808 	bl	800218c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800217c:	f7ff fc18 	bl	80019b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023c00 	.word	0x40023c00

0800218c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002194:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <HAL_InitTick+0x54>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b12      	ldr	r3, [pc, #72]	@ (80021e4 <HAL_InitTick+0x58>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4619      	mov	r1, r3
 800219e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fbd9 	bl	8002962 <HAL_SYSTICK_Config>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e00e      	b.n	80021d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b0f      	cmp	r3, #15
 80021be:	d80a      	bhi.n	80021d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c0:	2200      	movs	r2, #0
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295
 80021c8:	f000 fba1 	bl	800290e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021cc:	4a06      	ldr	r2, [pc, #24]	@ (80021e8 <HAL_InitTick+0x5c>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	e000      	b.n	80021d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000008 	.word	0x20000008
 80021e4:	20000010 	.word	0x20000010
 80021e8:	2000000c 	.word	0x2000000c

080021ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f0:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_IncTick+0x20>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_IncTick+0x24>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	4a04      	ldr	r2, [pc, #16]	@ (8002210 <HAL_IncTick+0x24>)
 80021fe:	6013      	str	r3, [r2, #0]
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000010 	.word	0x20000010
 8002210:	20000374 	.word	0x20000374

08002214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return uwTick;
 8002218:	4b03      	ldr	r3, [pc, #12]	@ (8002228 <HAL_GetTick+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000374 	.word	0x20000374

0800222c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff ffee 	bl	8002214 <HAL_GetTick>
 8002238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d005      	beq.n	8002252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002246:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <HAL_Delay+0x44>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4413      	add	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002252:	bf00      	nop
 8002254:	f7ff ffde 	bl	8002214 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	429a      	cmp	r2, r3
 8002262:	d8f7      	bhi.n	8002254 <HAL_Delay+0x28>
  {
  }
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000010 	.word	0x20000010

08002274 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e033      	b.n	80022f2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff fbb4 	bl	8001a00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d118      	bne.n	80022e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022ba:	f023 0302 	bic.w	r3, r3, #2
 80022be:	f043 0202 	orr.w	r2, r3, #2
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f94a 	bl	8002560 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	f023 0303 	bic.w	r3, r3, #3
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80022e2:	e001      	b.n	80022e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x1c>
 8002314:	2302      	movs	r3, #2
 8002316:	e113      	b.n	8002540 <HAL_ADC_ConfigChannel+0x244>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b09      	cmp	r3, #9
 8002326:	d925      	bls.n	8002374 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68d9      	ldr	r1, [r3, #12]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	3b1e      	subs	r3, #30
 800233e:	2207      	movs	r2, #7
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43da      	mvns	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	400a      	ands	r2, r1
 800234c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68d9      	ldr	r1, [r3, #12]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	4603      	mov	r3, r0
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4403      	add	r3, r0
 8002366:	3b1e      	subs	r3, #30
 8002368:	409a      	lsls	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	e022      	b.n	80023ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6919      	ldr	r1, [r3, #16]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	4613      	mov	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	2207      	movs	r2, #7
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	400a      	ands	r2, r1
 8002396:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6919      	ldr	r1, [r3, #16]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4403      	add	r3, r0
 80023b0:	409a      	lsls	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d824      	bhi.n	800240c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	3b05      	subs	r3, #5
 80023d4:	221f      	movs	r2, #31
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	400a      	ands	r2, r1
 80023e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	4618      	mov	r0, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	3b05      	subs	r3, #5
 80023fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	635a      	str	r2, [r3, #52]	@ 0x34
 800240a:	e04c      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b0c      	cmp	r3, #12
 8002412:	d824      	bhi.n	800245e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	3b23      	subs	r3, #35	@ 0x23
 8002426:	221f      	movs	r2, #31
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43da      	mvns	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	400a      	ands	r2, r1
 8002434:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	b29b      	uxth	r3, r3
 8002442:	4618      	mov	r0, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	3b23      	subs	r3, #35	@ 0x23
 8002450:	fa00 f203 	lsl.w	r2, r0, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	631a      	str	r2, [r3, #48]	@ 0x30
 800245c:	e023      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	3b41      	subs	r3, #65	@ 0x41
 8002470:	221f      	movs	r2, #31
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	400a      	ands	r2, r1
 800247e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	4618      	mov	r0, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	3b41      	subs	r3, #65	@ 0x41
 800249a:	fa00 f203 	lsl.w	r2, r0, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024a6:	4b29      	ldr	r3, [pc, #164]	@ (800254c <HAL_ADC_ConfigChannel+0x250>)
 80024a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a28      	ldr	r2, [pc, #160]	@ (8002550 <HAL_ADC_ConfigChannel+0x254>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d10f      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x1d8>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b12      	cmp	r3, #18
 80024ba:	d10b      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002550 <HAL_ADC_ConfigChannel+0x254>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d12b      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x23a>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002554 <HAL_ADC_ConfigChannel+0x258>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d003      	beq.n	80024f0 <HAL_ADC_ConfigChannel+0x1f4>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b11      	cmp	r3, #17
 80024ee:	d122      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a11      	ldr	r2, [pc, #68]	@ (8002554 <HAL_ADC_ConfigChannel+0x258>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d111      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002512:	4b11      	ldr	r3, [pc, #68]	@ (8002558 <HAL_ADC_ConfigChannel+0x25c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a11      	ldr	r2, [pc, #68]	@ (800255c <HAL_ADC_ConfigChannel+0x260>)
 8002518:	fba2 2303 	umull	r2, r3, r2, r3
 800251c:	0c9a      	lsrs	r2, r3, #18
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002528:	e002      	b.n	8002530 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	3b01      	subs	r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f9      	bne.n	800252a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	40012300 	.word	0x40012300
 8002550:	40012000 	.word	0x40012000
 8002554:	10000012 	.word	0x10000012
 8002558:	20000008 	.word	0x20000008
 800255c:	431bde83 	.word	0x431bde83

08002560 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002568:	4b79      	ldr	r3, [pc, #484]	@ (8002750 <ADC_Init+0x1f0>)
 800256a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	431a      	orrs	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	021a      	lsls	r2, r3, #8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80025b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6899      	ldr	r1, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	4a58      	ldr	r2, [pc, #352]	@ (8002754 <ADC_Init+0x1f4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d022      	beq.n	800263e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002606:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6899      	ldr	r1, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6899      	ldr	r1, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	e00f      	b.n	800265e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800264c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800265c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0202 	bic.w	r2, r2, #2
 800266c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6899      	ldr	r1, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7e1b      	ldrb	r3, [r3, #24]
 8002678:	005a      	lsls	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01b      	beq.n	80026c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800269a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80026aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6859      	ldr	r1, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	3b01      	subs	r3, #1
 80026b8:	035a      	lsls	r2, r3, #13
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	e007      	b.n	80026d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	051a      	lsls	r2, r3, #20
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6899      	ldr	r1, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002716:	025a      	lsls	r2, r3, #9
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800272e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6899      	ldr	r1, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	029a      	lsls	r2, r3, #10
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	609a      	str	r2, [r3, #8]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40012300 	.word	0x40012300
 8002754:	0f000001 	.word	0x0f000001

08002758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002774:	4013      	ands	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278a:	4a04      	ldr	r2, [pc, #16]	@ (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	60d3      	str	r3, [r2, #12]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a4:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <__NVIC_GetPriorityGrouping+0x18>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	f003 0307 	and.w	r3, r3, #7
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	db0b      	blt.n	80027e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	4907      	ldr	r1, [pc, #28]	@ (80027f4 <__NVIC_EnableIRQ+0x38>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2001      	movs	r0, #1
 80027de:	fa00 f202 	lsl.w	r2, r0, r2
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	e000e100 	.word	0xe000e100

080027f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	2b00      	cmp	r3, #0
 800280a:	db0a      	blt.n	8002822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	b2da      	uxtb	r2, r3
 8002810:	490c      	ldr	r1, [pc, #48]	@ (8002844 <__NVIC_SetPriority+0x4c>)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	0112      	lsls	r2, r2, #4
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	440b      	add	r3, r1
 800281c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002820:	e00a      	b.n	8002838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4908      	ldr	r1, [pc, #32]	@ (8002848 <__NVIC_SetPriority+0x50>)
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	3b04      	subs	r3, #4
 8002830:	0112      	lsls	r2, r2, #4
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	440b      	add	r3, r1
 8002836:	761a      	strb	r2, [r3, #24]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000e100 	.word	0xe000e100
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	@ 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f1c3 0307 	rsb	r3, r3, #7
 8002866:	2b04      	cmp	r3, #4
 8002868:	bf28      	it	cs
 800286a:	2304      	movcs	r3, #4
 800286c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3304      	adds	r3, #4
 8002872:	2b06      	cmp	r3, #6
 8002874:	d902      	bls.n	800287c <NVIC_EncodePriority+0x30>
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3b03      	subs	r3, #3
 800287a:	e000      	b.n	800287e <NVIC_EncodePriority+0x32>
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	f04f 32ff 	mov.w	r2, #4294967295
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43da      	mvns	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	401a      	ands	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002894:	f04f 31ff 	mov.w	r1, #4294967295
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	43d9      	mvns	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	4313      	orrs	r3, r2
         );
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	@ 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028c4:	d301      	bcc.n	80028ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00f      	b.n	80028ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ca:	4a0a      	ldr	r2, [pc, #40]	@ (80028f4 <SysTick_Config+0x40>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d2:	210f      	movs	r1, #15
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f7ff ff8e 	bl	80027f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <SysTick_Config+0x40>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e2:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <SysTick_Config+0x40>)
 80028e4:	2207      	movs	r2, #7
 80028e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	e000e010 	.word	0xe000e010

080028f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff29 	bl	8002758 <__NVIC_SetPriorityGrouping>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002920:	f7ff ff3e 	bl	80027a0 <__NVIC_GetPriorityGrouping>
 8002924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f7ff ff8e 	bl	800284c <NVIC_EncodePriority>
 8002930:	4602      	mov	r2, r0
 8002932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff5d 	bl	80027f8 <__NVIC_SetPriority>
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff31 	bl	80027bc <__NVIC_EnableIRQ>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ffa2 	bl	80028b4 <SysTick_Config>
 8002970:	4603      	mov	r3, r0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002988:	f7ff fc44 	bl	8002214 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e099      	b.n	8002acc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b8:	e00f      	b.n	80029da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ba:	f7ff fc2b 	bl	8002214 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d908      	bls.n	80029da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2220      	movs	r2, #32
 80029cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2203      	movs	r2, #3
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e078      	b.n	8002acc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e8      	bne.n	80029ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4b38      	ldr	r3, [pc, #224]	@ (8002ad4 <HAL_DMA_Init+0x158>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d107      	bne.n	8002a44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f023 0307 	bic.w	r3, r3, #7
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d117      	bne.n	8002a9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00e      	beq.n	8002a9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fb01 	bl	8003088 <DMA_CheckFifoParam>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2240      	movs	r2, #64	@ 0x40
 8002a90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e016      	b.n	8002acc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fab8 	bl	800301c <DMA_CalcBaseAndBitshift>
 8002aac:	4603      	mov	r3, r0
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab4:	223f      	movs	r2, #63	@ 0x3f
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	f010803f 	.word	0xf010803f

08002ad8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_DMA_Start_IT+0x26>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e040      	b.n	8002b80 <HAL_DMA_Start_IT+0xa8>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d12f      	bne.n	8002b72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2202      	movs	r2, #2
 8002b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 fa4a 	bl	8002fc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b30:	223f      	movs	r2, #63	@ 0x3f
 8002b32:	409a      	lsls	r2, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0216 	orr.w	r2, r2, #22
 8002b46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0208 	orr.w	r2, r2, #8
 8002b5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e005      	b.n	8002b7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b96:	f7ff fb3d 	bl	8002214 <HAL_GetTick>
 8002b9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d008      	beq.n	8002bba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2280      	movs	r2, #128	@ 0x80
 8002bac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e052      	b.n	8002c60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0216 	bic.w	r2, r2, #22
 8002bc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <HAL_DMA_Abort+0x62>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0208 	bic.w	r2, r2, #8
 8002bf8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c0a:	e013      	b.n	8002c34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c0c:	f7ff fb02 	bl	8002214 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b05      	cmp	r3, #5
 8002c18:	d90c      	bls.n	8002c34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2203      	movs	r2, #3
 8002c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e015      	b.n	8002c60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1e4      	bne.n	8002c0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c46:	223f      	movs	r2, #63	@ 0x3f
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d004      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2280      	movs	r2, #128	@ 0x80
 8002c80:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00c      	b.n	8002ca0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2205      	movs	r2, #5
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0201 	bic.w	r2, r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cb8:	4b8e      	ldr	r3, [pc, #568]	@ (8002ef4 <HAL_DMA_IRQHandler+0x248>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a8e      	ldr	r2, [pc, #568]	@ (8002ef8 <HAL_DMA_IRQHandler+0x24c>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	0a9b      	lsrs	r3, r3, #10
 8002cc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d01a      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d013      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0204 	bic.w	r2, r2, #4
 8002cfe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d04:	2208      	movs	r2, #8
 8002d06:	409a      	lsls	r2, r3
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d10:	f043 0201 	orr.w	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d012      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d46:	f043 0202 	orr.w	r2, r3, #2
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d52:	2204      	movs	r2, #4
 8002d54:	409a      	lsls	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d012      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00b      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d70:	2204      	movs	r2, #4
 8002d72:	409a      	lsls	r2, r3
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7c:	f043 0204 	orr.w	r2, r3, #4
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d88:	2210      	movs	r2, #16
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d043      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d03c      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da6:	2210      	movs	r2, #16
 8002da8:	409a      	lsls	r2, r3
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d018      	beq.n	8002dee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d108      	bne.n	8002ddc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d024      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
 8002dda:	e01f      	b.n	8002e1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01b      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
 8002dec:	e016      	b.n	8002e1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d107      	bne.n	8002e0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0208 	bic.w	r2, r2, #8
 8002e0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e20:	2220      	movs	r2, #32
 8002e22:	409a      	lsls	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 808f 	beq.w	8002f4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 8087 	beq.w	8002f4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e42:	2220      	movs	r2, #32
 8002e44:	409a      	lsls	r2, r3
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d136      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0216 	bic.w	r2, r2, #22
 8002e64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d103      	bne.n	8002e86 <HAL_DMA_IRQHandler+0x1da>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0208 	bic.w	r2, r2, #8
 8002e94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9a:	223f      	movs	r2, #63	@ 0x3f
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d07e      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
        }
        return;
 8002ec2:	e079      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01d      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10d      	bne.n	8002efc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d031      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
 8002ef0:	e02c      	b.n	8002f4c <HAL_DMA_IRQHandler+0x2a0>
 8002ef2:	bf00      	nop
 8002ef4:	20000008 	.word	0x20000008
 8002ef8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d023      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
 8002f0c:	e01e      	b.n	8002f4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10f      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0210 	bic.w	r2, r2, #16
 8002f2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d032      	beq.n	8002fba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d022      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2205      	movs	r2, #5
 8002f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d307      	bcc.n	8002f94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f2      	bne.n	8002f78 <HAL_DMA_IRQHandler+0x2cc>
 8002f92:	e000      	b.n	8002f96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
 8002fb6:	e000      	b.n	8002fba <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fb8:	bf00      	nop
    }
  }
}
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b40      	cmp	r3, #64	@ 0x40
 8002fec:	d108      	bne.n	8003000 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ffe:	e007      	b.n	8003010 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	60da      	str	r2, [r3, #12]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	3b10      	subs	r3, #16
 800302c:	4a14      	ldr	r2, [pc, #80]	@ (8003080 <DMA_CalcBaseAndBitshift+0x64>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003036:	4a13      	ldr	r2, [pc, #76]	@ (8003084 <DMA_CalcBaseAndBitshift+0x68>)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d909      	bls.n	800305e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003052:	f023 0303 	bic.w	r3, r3, #3
 8003056:	1d1a      	adds	r2, r3, #4
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	659a      	str	r2, [r3, #88]	@ 0x58
 800305c:	e007      	b.n	800306e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003066:	f023 0303 	bic.w	r3, r3, #3
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003072:	4618      	mov	r0, r3
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	aaaaaaab 	.word	0xaaaaaaab
 8003084:	08007e34 	.word	0x08007e34

08003088 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d11f      	bne.n	80030e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d856      	bhi.n	8003156 <DMA_CheckFifoParam+0xce>
 80030a8:	a201      	add	r2, pc, #4	@ (adr r2, 80030b0 <DMA_CheckFifoParam+0x28>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030c1 	.word	0x080030c1
 80030b4:	080030d3 	.word	0x080030d3
 80030b8:	080030c1 	.word	0x080030c1
 80030bc:	08003157 	.word	0x08003157
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d046      	beq.n	800315a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d0:	e043      	b.n	800315a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030da:	d140      	bne.n	800315e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e0:	e03d      	b.n	800315e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ea:	d121      	bne.n	8003130 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	d837      	bhi.n	8003162 <DMA_CheckFifoParam+0xda>
 80030f2:	a201      	add	r2, pc, #4	@ (adr r2, 80030f8 <DMA_CheckFifoParam+0x70>)
 80030f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f8:	08003109 	.word	0x08003109
 80030fc:	0800310f 	.word	0x0800310f
 8003100:	08003109 	.word	0x08003109
 8003104:	08003121 	.word	0x08003121
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
      break;
 800310c:	e030      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003112:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d025      	beq.n	8003166 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800311e:	e022      	b.n	8003166 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003124:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003128:	d11f      	bne.n	800316a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800312e:	e01c      	b.n	800316a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d903      	bls.n	800313e <DMA_CheckFifoParam+0xb6>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b03      	cmp	r3, #3
 800313a:	d003      	beq.n	8003144 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800313c:	e018      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
      break;
 8003142:	e015      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003148:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00e      	beq.n	800316e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
      break;
 8003154:	e00b      	b.n	800316e <DMA_CheckFifoParam+0xe6>
      break;
 8003156:	bf00      	nop
 8003158:	e00a      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;
 800315a:	bf00      	nop
 800315c:	e008      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;
 800315e:	bf00      	nop
 8003160:	e006      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;
 8003162:	bf00      	nop
 8003164:	e004      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;
 8003166:	bf00      	nop
 8003168:	e002      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;   
 800316a:	bf00      	nop
 800316c:	e000      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;
 800316e:	bf00      	nop
    }
  } 
  
  return status; 
 8003170:	7bfb      	ldrb	r3, [r7, #15]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop

08003180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003180:	b480      	push	{r7}
 8003182:	b089      	sub	sp, #36	@ 0x24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800318e:	2300      	movs	r3, #0
 8003190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	e159      	b.n	8003450 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800319c:	2201      	movs	r2, #1
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	f040 8148 	bne.w	800344a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d005      	beq.n	80031d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d130      	bne.n	8003234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	2203      	movs	r2, #3
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003208:	2201      	movs	r2, #1
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 0201 	and.w	r2, r3, #1
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	2b03      	cmp	r3, #3
 800323e:	d017      	beq.n	8003270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2203      	movs	r2, #3
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d123      	bne.n	80032c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	08da      	lsrs	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3208      	adds	r2, #8
 8003284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	220f      	movs	r2, #15
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	08da      	lsrs	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3208      	adds	r2, #8
 80032be:	69b9      	ldr	r1, [r7, #24]
 80032c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	2203      	movs	r2, #3
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0203 	and.w	r2, r3, #3
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80a2 	beq.w	800344a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	4b57      	ldr	r3, [pc, #348]	@ (8003468 <HAL_GPIO_Init+0x2e8>)
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	4a56      	ldr	r2, [pc, #344]	@ (8003468 <HAL_GPIO_Init+0x2e8>)
 8003310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003314:	6453      	str	r3, [r2, #68]	@ 0x44
 8003316:	4b54      	ldr	r3, [pc, #336]	@ (8003468 <HAL_GPIO_Init+0x2e8>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003322:	4a52      	ldr	r2, [pc, #328]	@ (800346c <HAL_GPIO_Init+0x2ec>)
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	089b      	lsrs	r3, r3, #2
 8003328:	3302      	adds	r3, #2
 800332a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	220f      	movs	r2, #15
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43db      	mvns	r3, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4013      	ands	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a49      	ldr	r2, [pc, #292]	@ (8003470 <HAL_GPIO_Init+0x2f0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d019      	beq.n	8003382 <HAL_GPIO_Init+0x202>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a48      	ldr	r2, [pc, #288]	@ (8003474 <HAL_GPIO_Init+0x2f4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_GPIO_Init+0x1fe>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a47      	ldr	r2, [pc, #284]	@ (8003478 <HAL_GPIO_Init+0x2f8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00d      	beq.n	800337a <HAL_GPIO_Init+0x1fa>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a46      	ldr	r2, [pc, #280]	@ (800347c <HAL_GPIO_Init+0x2fc>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d007      	beq.n	8003376 <HAL_GPIO_Init+0x1f6>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a45      	ldr	r2, [pc, #276]	@ (8003480 <HAL_GPIO_Init+0x300>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d101      	bne.n	8003372 <HAL_GPIO_Init+0x1f2>
 800336e:	2304      	movs	r3, #4
 8003370:	e008      	b.n	8003384 <HAL_GPIO_Init+0x204>
 8003372:	2307      	movs	r3, #7
 8003374:	e006      	b.n	8003384 <HAL_GPIO_Init+0x204>
 8003376:	2303      	movs	r3, #3
 8003378:	e004      	b.n	8003384 <HAL_GPIO_Init+0x204>
 800337a:	2302      	movs	r3, #2
 800337c:	e002      	b.n	8003384 <HAL_GPIO_Init+0x204>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <HAL_GPIO_Init+0x204>
 8003382:	2300      	movs	r3, #0
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	f002 0203 	and.w	r2, r2, #3
 800338a:	0092      	lsls	r2, r2, #2
 800338c:	4093      	lsls	r3, r2
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003394:	4935      	ldr	r1, [pc, #212]	@ (800346c <HAL_GPIO_Init+0x2ec>)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	089b      	lsrs	r3, r3, #2
 800339a:	3302      	adds	r3, #2
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033a2:	4b38      	ldr	r3, [pc, #224]	@ (8003484 <HAL_GPIO_Init+0x304>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4013      	ands	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033c6:	4a2f      	ldr	r2, [pc, #188]	@ (8003484 <HAL_GPIO_Init+0x304>)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003484 <HAL_GPIO_Init+0x304>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033f0:	4a24      	ldr	r2, [pc, #144]	@ (8003484 <HAL_GPIO_Init+0x304>)
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033f6:	4b23      	ldr	r3, [pc, #140]	@ (8003484 <HAL_GPIO_Init+0x304>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800341a:	4a1a      	ldr	r2, [pc, #104]	@ (8003484 <HAL_GPIO_Init+0x304>)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003420:	4b18      	ldr	r3, [pc, #96]	@ (8003484 <HAL_GPIO_Init+0x304>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003444:	4a0f      	ldr	r2, [pc, #60]	@ (8003484 <HAL_GPIO_Init+0x304>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3301      	adds	r3, #1
 800344e:	61fb      	str	r3, [r7, #28]
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	2b0f      	cmp	r3, #15
 8003454:	f67f aea2 	bls.w	800319c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	3724      	adds	r7, #36	@ 0x24
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40023800 	.word	0x40023800
 800346c:	40013800 	.word	0x40013800
 8003470:	40020000 	.word	0x40020000
 8003474:	40020400 	.word	0x40020400
 8003478:	40020800 	.word	0x40020800
 800347c:	40020c00 	.word	0x40020c00
 8003480:	40021000 	.word	0x40021000
 8003484:	40013c00 	.word	0x40013c00

08003488 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800349a:	2300      	movs	r3, #0
 800349c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	e0bb      	b.n	800361c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034a4:	2201      	movs	r2, #1
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4013      	ands	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	f040 80ab 	bne.w	8003616 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80034c0:	4a5c      	ldr	r2, [pc, #368]	@ (8003634 <HAL_GPIO_DeInit+0x1ac>)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	089b      	lsrs	r3, r3, #2
 80034c6:	3302      	adds	r3, #2
 80034c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034cc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	220f      	movs	r2, #15
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	4013      	ands	r3, r2
 80034e0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a54      	ldr	r2, [pc, #336]	@ (8003638 <HAL_GPIO_DeInit+0x1b0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d019      	beq.n	800351e <HAL_GPIO_DeInit+0x96>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a53      	ldr	r2, [pc, #332]	@ (800363c <HAL_GPIO_DeInit+0x1b4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <HAL_GPIO_DeInit+0x92>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a52      	ldr	r2, [pc, #328]	@ (8003640 <HAL_GPIO_DeInit+0x1b8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00d      	beq.n	8003516 <HAL_GPIO_DeInit+0x8e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a51      	ldr	r2, [pc, #324]	@ (8003644 <HAL_GPIO_DeInit+0x1bc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d007      	beq.n	8003512 <HAL_GPIO_DeInit+0x8a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a50      	ldr	r2, [pc, #320]	@ (8003648 <HAL_GPIO_DeInit+0x1c0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d101      	bne.n	800350e <HAL_GPIO_DeInit+0x86>
 800350a:	2304      	movs	r3, #4
 800350c:	e008      	b.n	8003520 <HAL_GPIO_DeInit+0x98>
 800350e:	2307      	movs	r3, #7
 8003510:	e006      	b.n	8003520 <HAL_GPIO_DeInit+0x98>
 8003512:	2303      	movs	r3, #3
 8003514:	e004      	b.n	8003520 <HAL_GPIO_DeInit+0x98>
 8003516:	2302      	movs	r3, #2
 8003518:	e002      	b.n	8003520 <HAL_GPIO_DeInit+0x98>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_GPIO_DeInit+0x98>
 800351e:	2300      	movs	r3, #0
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	f002 0203 	and.w	r2, r2, #3
 8003526:	0092      	lsls	r2, r2, #2
 8003528:	4093      	lsls	r3, r2
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	429a      	cmp	r2, r3
 800352e:	d132      	bne.n	8003596 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003530:	4b46      	ldr	r3, [pc, #280]	@ (800364c <HAL_GPIO_DeInit+0x1c4>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	43db      	mvns	r3, r3
 8003538:	4944      	ldr	r1, [pc, #272]	@ (800364c <HAL_GPIO_DeInit+0x1c4>)
 800353a:	4013      	ands	r3, r2
 800353c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800353e:	4b43      	ldr	r3, [pc, #268]	@ (800364c <HAL_GPIO_DeInit+0x1c4>)
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	43db      	mvns	r3, r3
 8003546:	4941      	ldr	r1, [pc, #260]	@ (800364c <HAL_GPIO_DeInit+0x1c4>)
 8003548:	4013      	ands	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800354c:	4b3f      	ldr	r3, [pc, #252]	@ (800364c <HAL_GPIO_DeInit+0x1c4>)
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	43db      	mvns	r3, r3
 8003554:	493d      	ldr	r1, [pc, #244]	@ (800364c <HAL_GPIO_DeInit+0x1c4>)
 8003556:	4013      	ands	r3, r2
 8003558:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800355a:	4b3c      	ldr	r3, [pc, #240]	@ (800364c <HAL_GPIO_DeInit+0x1c4>)
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	43db      	mvns	r3, r3
 8003562:	493a      	ldr	r1, [pc, #232]	@ (800364c <HAL_GPIO_DeInit+0x1c4>)
 8003564:	4013      	ands	r3, r2
 8003566:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	220f      	movs	r2, #15
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003578:	4a2e      	ldr	r2, [pc, #184]	@ (8003634 <HAL_GPIO_DeInit+0x1ac>)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	089b      	lsrs	r3, r3, #2
 800357e:	3302      	adds	r3, #2
 8003580:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	43da      	mvns	r2, r3
 8003588:	482a      	ldr	r0, [pc, #168]	@ (8003634 <HAL_GPIO_DeInit+0x1ac>)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	089b      	lsrs	r3, r3, #2
 800358e:	400a      	ands	r2, r1
 8003590:	3302      	adds	r3, #2
 8003592:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	2103      	movs	r1, #3
 80035a0:	fa01 f303 	lsl.w	r3, r1, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	401a      	ands	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	08da      	lsrs	r2, r3, #3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3208      	adds	r2, #8
 80035b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	220f      	movs	r2, #15
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	08d2      	lsrs	r2, r2, #3
 80035cc:	4019      	ands	r1, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3208      	adds	r2, #8
 80035d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	2103      	movs	r1, #3
 80035e0:	fa01 f303 	lsl.w	r3, r1, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	401a      	ands	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	2101      	movs	r1, #1
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	fa01 f303 	lsl.w	r3, r1, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	401a      	ands	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	2103      	movs	r1, #3
 800360a:	fa01 f303 	lsl.w	r3, r1, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	401a      	ands	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	3301      	adds	r3, #1
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b0f      	cmp	r3, #15
 8003620:	f67f af40 	bls.w	80034a4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40013800 	.word	0x40013800
 8003638:	40020000 	.word	0x40020000
 800363c:	40020400 	.word	0x40020400
 8003640:	40020800 	.word	0x40020800
 8003644:	40020c00 	.word	0x40020c00
 8003648:	40021000 	.word	0x40021000
 800364c:	40013c00 	.word	0x40013c00

08003650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	807b      	strh	r3, [r7, #2]
 800365c:	4613      	mov	r3, r2
 800365e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003660:	787b      	ldrb	r3, [r7, #1]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003666:	887a      	ldrh	r2, [r7, #2]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800366c:	e003      	b.n	8003676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800366e:	887b      	ldrh	r3, [r7, #2]
 8003670:	041a      	lsls	r2, r3, #16
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	619a      	str	r2, [r3, #24]
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e12b      	b.n	80038ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fe f9ec 	bl	8001a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2224      	movs	r2, #36	@ 0x24
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036e8:	f001 fc50 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 80036ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4a81      	ldr	r2, [pc, #516]	@ (80038f8 <HAL_I2C_Init+0x274>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d807      	bhi.n	8003708 <HAL_I2C_Init+0x84>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a80      	ldr	r2, [pc, #512]	@ (80038fc <HAL_I2C_Init+0x278>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	bf94      	ite	ls
 8003700:	2301      	movls	r3, #1
 8003702:	2300      	movhi	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	e006      	b.n	8003716 <HAL_I2C_Init+0x92>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a7d      	ldr	r2, [pc, #500]	@ (8003900 <HAL_I2C_Init+0x27c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	bf94      	ite	ls
 8003710:	2301      	movls	r3, #1
 8003712:	2300      	movhi	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e0e7      	b.n	80038ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4a78      	ldr	r2, [pc, #480]	@ (8003904 <HAL_I2C_Init+0x280>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	0c9b      	lsrs	r3, r3, #18
 8003728:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4a6a      	ldr	r2, [pc, #424]	@ (80038f8 <HAL_I2C_Init+0x274>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d802      	bhi.n	8003758 <HAL_I2C_Init+0xd4>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	3301      	adds	r3, #1
 8003756:	e009      	b.n	800376c <HAL_I2C_Init+0xe8>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	4a69      	ldr	r2, [pc, #420]	@ (8003908 <HAL_I2C_Init+0x284>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	099b      	lsrs	r3, r3, #6
 800376a:	3301      	adds	r3, #1
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	430b      	orrs	r3, r1
 8003772:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800377e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	495c      	ldr	r1, [pc, #368]	@ (80038f8 <HAL_I2C_Init+0x274>)
 8003788:	428b      	cmp	r3, r1
 800378a:	d819      	bhi.n	80037c0 <HAL_I2C_Init+0x13c>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1e59      	subs	r1, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	fbb1 f3f3 	udiv	r3, r1, r3
 800379a:	1c59      	adds	r1, r3, #1
 800379c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037a0:	400b      	ands	r3, r1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_I2C_Init+0x138>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1e59      	subs	r1, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037b4:	3301      	adds	r3, #1
 80037b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ba:	e051      	b.n	8003860 <HAL_I2C_Init+0x1dc>
 80037bc:	2304      	movs	r3, #4
 80037be:	e04f      	b.n	8003860 <HAL_I2C_Init+0x1dc>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d111      	bne.n	80037ec <HAL_I2C_Init+0x168>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1e58      	subs	r0, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6859      	ldr	r1, [r3, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	440b      	add	r3, r1
 80037d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037da:	3301      	adds	r3, #1
 80037dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	e012      	b.n	8003812 <HAL_I2C_Init+0x18e>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1e58      	subs	r0, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6859      	ldr	r1, [r3, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	0099      	lsls	r1, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003802:	3301      	adds	r3, #1
 8003804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003808:	2b00      	cmp	r3, #0
 800380a:	bf0c      	ite	eq
 800380c:	2301      	moveq	r3, #1
 800380e:	2300      	movne	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Init+0x196>
 8003816:	2301      	movs	r3, #1
 8003818:	e022      	b.n	8003860 <HAL_I2C_Init+0x1dc>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10e      	bne.n	8003840 <HAL_I2C_Init+0x1bc>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1e58      	subs	r0, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6859      	ldr	r1, [r3, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	440b      	add	r3, r1
 8003830:	fbb0 f3f3 	udiv	r3, r0, r3
 8003834:	3301      	adds	r3, #1
 8003836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800383a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800383e:	e00f      	b.n	8003860 <HAL_I2C_Init+0x1dc>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1e58      	subs	r0, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6859      	ldr	r1, [r3, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	0099      	lsls	r1, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	fbb0 f3f3 	udiv	r3, r0, r3
 8003856:	3301      	adds	r3, #1
 8003858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	6809      	ldr	r1, [r1, #0]
 8003864:	4313      	orrs	r3, r2
 8003866:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800388e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6911      	ldr	r1, [r2, #16]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68d2      	ldr	r2, [r2, #12]
 800389a:	4311      	orrs	r1, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	430b      	orrs	r3, r1
 80038a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	000186a0 	.word	0x000186a0
 80038fc:	001e847f 	.word	0x001e847f
 8003900:	003d08ff 	.word	0x003d08ff
 8003904:	431bde83 	.word	0x431bde83
 8003908:	10624dd3 	.word	0x10624dd3

0800390c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e021      	b.n	8003962 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2224      	movs	r2, #36	@ 0x24
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fe f942 	bl	8001bc0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	4608      	mov	r0, r1
 8003976:	4611      	mov	r1, r2
 8003978:	461a      	mov	r2, r3
 800397a:	4603      	mov	r3, r0
 800397c:	817b      	strh	r3, [r7, #10]
 800397e:	460b      	mov	r3, r1
 8003980:	813b      	strh	r3, [r7, #8]
 8003982:	4613      	mov	r3, r2
 8003984:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003986:	f7fe fc45 	bl	8002214 <HAL_GetTick>
 800398a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b20      	cmp	r3, #32
 8003996:	f040 80d9 	bne.w	8003b4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	2319      	movs	r3, #25
 80039a0:	2201      	movs	r2, #1
 80039a2:	496d      	ldr	r1, [pc, #436]	@ (8003b58 <HAL_I2C_Mem_Write+0x1ec>)
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fc8b 	bl	80042c0 <I2C_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80039b0:	2302      	movs	r3, #2
 80039b2:	e0cc      	b.n	8003b4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_I2C_Mem_Write+0x56>
 80039be:	2302      	movs	r3, #2
 80039c0:	e0c5      	b.n	8003b4e <HAL_I2C_Mem_Write+0x1e2>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d007      	beq.n	80039e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2221      	movs	r2, #33	@ 0x21
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2240      	movs	r2, #64	@ 0x40
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a3a      	ldr	r2, [r7, #32]
 8003a12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4a4d      	ldr	r2, [pc, #308]	@ (8003b5c <HAL_I2C_Mem_Write+0x1f0>)
 8003a28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a2a:	88f8      	ldrh	r0, [r7, #6]
 8003a2c:	893a      	ldrh	r2, [r7, #8]
 8003a2e:	8979      	ldrh	r1, [r7, #10]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	9301      	str	r3, [sp, #4]
 8003a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	4603      	mov	r3, r0
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fac2 	bl	8003fc4 <I2C_RequestMemoryWrite>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d052      	beq.n	8003aec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e081      	b.n	8003b4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 fd50 	bl	80044f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00d      	beq.n	8003a76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d107      	bne.n	8003a72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e06b      	b.n	8003b4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	781a      	ldrb	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d11b      	bne.n	8003aec <HAL_I2C_Mem_Write+0x180>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d017      	beq.n	8003aec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac0:	781a      	ldrb	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1aa      	bne.n	8003a4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fd43 	bl	8004584 <I2C_WaitOnBTFFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00d      	beq.n	8003b20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d107      	bne.n	8003b1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e016      	b.n	8003b4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e000      	b.n	8003b4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
  }
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	00100002 	.word	0x00100002
 8003b5c:	ffff0000 	.word	0xffff0000

08003b60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08c      	sub	sp, #48	@ 0x30
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	4608      	mov	r0, r1
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	817b      	strh	r3, [r7, #10]
 8003b72:	460b      	mov	r3, r1
 8003b74:	813b      	strh	r3, [r7, #8]
 8003b76:	4613      	mov	r3, r2
 8003b78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b7a:	f7fe fb4b 	bl	8002214 <HAL_GetTick>
 8003b7e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	f040 8214 	bne.w	8003fb6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	2319      	movs	r3, #25
 8003b94:	2201      	movs	r2, #1
 8003b96:	497b      	ldr	r1, [pc, #492]	@ (8003d84 <HAL_I2C_Mem_Read+0x224>)
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fb91 	bl	80042c0 <I2C_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e207      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_I2C_Mem_Read+0x56>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e200      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d007      	beq.n	8003bdc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2222      	movs	r2, #34	@ 0x22
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2240      	movs	r2, #64	@ 0x40
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a5b      	ldr	r2, [pc, #364]	@ (8003d88 <HAL_I2C_Mem_Read+0x228>)
 8003c1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c1e:	88f8      	ldrh	r0, [r7, #6]
 8003c20:	893a      	ldrh	r2, [r7, #8]
 8003c22:	8979      	ldrh	r1, [r7, #10]
 8003c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fa5e 	bl	80040f0 <I2C_RequestMemoryRead>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e1bc      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d113      	bne.n	8003c6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c46:	2300      	movs	r3, #0
 8003c48:	623b      	str	r3, [r7, #32]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	623b      	str	r3, [r7, #32]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	623b      	str	r3, [r7, #32]
 8003c5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e190      	b.n	8003f90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d11b      	bne.n	8003cae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e170      	b.n	8003f90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d11b      	bne.n	8003cee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	e150      	b.n	8003f90 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d04:	e144      	b.n	8003f90 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	f200 80f1 	bhi.w	8003ef2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d123      	bne.n	8003d60 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 fc79 	bl	8004614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e145      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691a      	ldr	r2, [r3, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d5e:	e117      	b.n	8003f90 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d14e      	bne.n	8003e06 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d6e:	2200      	movs	r2, #0
 8003d70:	4906      	ldr	r1, [pc, #24]	@ (8003d8c <HAL_I2C_Mem_Read+0x22c>)
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 faa4 	bl	80042c0 <I2C_WaitOnFlagUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e11a      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
 8003d82:	bf00      	nop
 8003d84:	00100002 	.word	0x00100002
 8003d88:	ffff0000 	.word	0xffff0000
 8003d8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e04:	e0c4      	b.n	8003f90 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	496c      	ldr	r1, [pc, #432]	@ (8003fc0 <HAL_I2C_Mem_Read+0x460>)
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 fa55 	bl	80042c0 <I2C_WaitOnFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0cb      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691a      	ldr	r2, [r3, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e68:	2200      	movs	r2, #0
 8003e6a:	4955      	ldr	r1, [pc, #340]	@ (8003fc0 <HAL_I2C_Mem_Read+0x460>)
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fa27 	bl	80042c0 <I2C_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e09d      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ef0:	e04e      	b.n	8003f90 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 fb8c 	bl	8004614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e058      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d124      	bne.n	8003f90 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d107      	bne.n	8003f5e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f5c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f47f aeb6 	bne.w	8003d06 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e000      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003fb6:	2302      	movs	r3, #2
  }
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3728      	adds	r7, #40	@ 0x28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	00010004 	.word	0x00010004

08003fc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	4608      	mov	r0, r1
 8003fce:	4611      	mov	r1, r2
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	817b      	strh	r3, [r7, #10]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	813b      	strh	r3, [r7, #8]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f960 	bl	80042c0 <I2C_WaitOnFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00d      	beq.n	8004022 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004010:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004014:	d103      	bne.n	800401e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800401c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e05f      	b.n	80040e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004022:	897b      	ldrh	r3, [r7, #10]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	461a      	mov	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004030:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	6a3a      	ldr	r2, [r7, #32]
 8004036:	492d      	ldr	r1, [pc, #180]	@ (80040ec <I2C_RequestMemoryWrite+0x128>)
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f9bb 	bl	80043b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e04c      	b.n	80040e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800405e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004060:	6a39      	ldr	r1, [r7, #32]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 fa46 	bl	80044f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00d      	beq.n	800408a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004072:	2b04      	cmp	r3, #4
 8004074:	d107      	bne.n	8004086 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004084:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e02b      	b.n	80040e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d105      	bne.n	800409c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004090:	893b      	ldrh	r3, [r7, #8]
 8004092:	b2da      	uxtb	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	611a      	str	r2, [r3, #16]
 800409a:	e021      	b.n	80040e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800409c:	893b      	ldrh	r3, [r7, #8]
 800409e:	0a1b      	lsrs	r3, r3, #8
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ac:	6a39      	ldr	r1, [r7, #32]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fa20 	bl	80044f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d107      	bne.n	80040d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e005      	b.n	80040e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040d6:	893b      	ldrh	r3, [r7, #8]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	00010002 	.word	0x00010002

080040f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	4608      	mov	r0, r1
 80040fa:	4611      	mov	r1, r2
 80040fc:	461a      	mov	r2, r3
 80040fe:	4603      	mov	r3, r0
 8004100:	817b      	strh	r3, [r7, #10]
 8004102:	460b      	mov	r3, r1
 8004104:	813b      	strh	r3, [r7, #8]
 8004106:	4613      	mov	r3, r2
 8004108:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004118:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004128:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	2200      	movs	r2, #0
 8004132:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 f8c2 	bl	80042c0 <I2C_WaitOnFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00d      	beq.n	800415e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004150:	d103      	bne.n	800415a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004158:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e0aa      	b.n	80042b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800415e:	897b      	ldrh	r3, [r7, #10]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800416c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	6a3a      	ldr	r2, [r7, #32]
 8004172:	4952      	ldr	r1, [pc, #328]	@ (80042bc <I2C_RequestMemoryRead+0x1cc>)
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f91d 	bl	80043b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e097      	b.n	80042b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800419a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800419c:	6a39      	ldr	r1, [r7, #32]
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f9a8 	bl	80044f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00d      	beq.n	80041c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d107      	bne.n	80041c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e076      	b.n	80042b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041c6:	88fb      	ldrh	r3, [r7, #6]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d105      	bne.n	80041d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041cc:	893b      	ldrh	r3, [r7, #8]
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	611a      	str	r2, [r3, #16]
 80041d6:	e021      	b.n	800421c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041d8:	893b      	ldrh	r3, [r7, #8]
 80041da:	0a1b      	lsrs	r3, r3, #8
 80041dc:	b29b      	uxth	r3, r3
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e8:	6a39      	ldr	r1, [r7, #32]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f982 	bl	80044f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00d      	beq.n	8004212 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d107      	bne.n	800420e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800420c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e050      	b.n	80042b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004212:	893b      	ldrh	r3, [r7, #8]
 8004214:	b2da      	uxtb	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800421c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421e:	6a39      	ldr	r1, [r7, #32]
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 f967 	bl	80044f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00d      	beq.n	8004248 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	2b04      	cmp	r3, #4
 8004232:	d107      	bne.n	8004244 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004242:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e035      	b.n	80042b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004256:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	2200      	movs	r2, #0
 8004260:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f82b 	bl	80042c0 <I2C_WaitOnFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00d      	beq.n	800428c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800427e:	d103      	bne.n	8004288 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004286:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e013      	b.n	80042b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800428c:	897b      	ldrh	r3, [r7, #10]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	b2da      	uxtb	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429e:	6a3a      	ldr	r2, [r7, #32]
 80042a0:	4906      	ldr	r1, [pc, #24]	@ (80042bc <I2C_RequestMemoryRead+0x1cc>)
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f886 	bl	80043b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	00010002 	.word	0x00010002

080042c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	4613      	mov	r3, r2
 80042ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042d0:	e048      	b.n	8004364 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d8:	d044      	beq.n	8004364 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042da:	f7fd ff9b 	bl	8002214 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d302      	bcc.n	80042f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d139      	bne.n	8004364 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	0c1b      	lsrs	r3, r3, #16
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d10d      	bne.n	8004316 <I2C_WaitOnFlagUntilTimeout+0x56>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	43da      	mvns	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	4013      	ands	r3, r2
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	bf0c      	ite	eq
 800430c:	2301      	moveq	r3, #1
 800430e:	2300      	movne	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	461a      	mov	r2, r3
 8004314:	e00c      	b.n	8004330 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	43da      	mvns	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	4013      	ands	r3, r2
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	bf0c      	ite	eq
 8004328:	2301      	moveq	r3, #1
 800432a:	2300      	movne	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	429a      	cmp	r2, r3
 8004334:	d116      	bne.n	8004364 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	f043 0220 	orr.w	r2, r3, #32
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e023      	b.n	80043ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	0c1b      	lsrs	r3, r3, #16
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b01      	cmp	r3, #1
 800436c:	d10d      	bne.n	800438a <I2C_WaitOnFlagUntilTimeout+0xca>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	43da      	mvns	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	4013      	ands	r3, r2
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	461a      	mov	r2, r3
 8004388:	e00c      	b.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	43da      	mvns	r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	4013      	ands	r3, r2
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	bf0c      	ite	eq
 800439c:	2301      	moveq	r3, #1
 800439e:	2300      	movne	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d093      	beq.n	80042d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043c2:	e071      	b.n	80044a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043d2:	d123      	bne.n	800441c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	f043 0204 	orr.w	r2, r3, #4
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e067      	b.n	80044ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004422:	d041      	beq.n	80044a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004424:	f7fd fef6 	bl	8002214 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	429a      	cmp	r2, r3
 8004432:	d302      	bcc.n	800443a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d136      	bne.n	80044a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	0c1b      	lsrs	r3, r3, #16
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	d10c      	bne.n	800445e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	43da      	mvns	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4013      	ands	r3, r2
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	bf14      	ite	ne
 8004456:	2301      	movne	r3, #1
 8004458:	2300      	moveq	r3, #0
 800445a:	b2db      	uxtb	r3, r3
 800445c:	e00b      	b.n	8004476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	43da      	mvns	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4013      	ands	r3, r2
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	bf14      	ite	ne
 8004470:	2301      	movne	r3, #1
 8004472:	2300      	moveq	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d016      	beq.n	80044a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	f043 0220 	orr.w	r2, r3, #32
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e021      	b.n	80044ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	0c1b      	lsrs	r3, r3, #16
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d10c      	bne.n	80044cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	43da      	mvns	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4013      	ands	r3, r2
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf14      	ite	ne
 80044c4:	2301      	movne	r3, #1
 80044c6:	2300      	moveq	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	e00b      	b.n	80044e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	43da      	mvns	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4013      	ands	r3, r2
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bf14      	ite	ne
 80044de:	2301      	movne	r3, #1
 80044e0:	2300      	moveq	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f47f af6d 	bne.w	80043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004500:	e034      	b.n	800456c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f8e3 	bl	80046ce <I2C_IsAcknowledgeFailed>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e034      	b.n	800457c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d028      	beq.n	800456c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451a:	f7fd fe7b 	bl	8002214 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	429a      	cmp	r2, r3
 8004528:	d302      	bcc.n	8004530 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d11d      	bne.n	800456c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800453a:	2b80      	cmp	r3, #128	@ 0x80
 800453c:	d016      	beq.n	800456c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004558:	f043 0220 	orr.w	r2, r3, #32
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e007      	b.n	800457c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004576:	2b80      	cmp	r3, #128	@ 0x80
 8004578:	d1c3      	bne.n	8004502 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004590:	e034      	b.n	80045fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f89b 	bl	80046ce <I2C_IsAcknowledgeFailed>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e034      	b.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d028      	beq.n	80045fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045aa:	f7fd fe33 	bl	8002214 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d302      	bcc.n	80045c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d11d      	bne.n	80045fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d016      	beq.n	80045fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e8:	f043 0220 	orr.w	r2, r3, #32
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e007      	b.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b04      	cmp	r3, #4
 8004608:	d1c3      	bne.n	8004592 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004620:	e049      	b.n	80046b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	2b10      	cmp	r3, #16
 800462e:	d119      	bne.n	8004664 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0210 	mvn.w	r2, #16
 8004638:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e030      	b.n	80046c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004664:	f7fd fdd6 	bl	8002214 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	429a      	cmp	r2, r3
 8004672:	d302      	bcc.n	800467a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d11d      	bne.n	80046b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004684:	2b40      	cmp	r3, #64	@ 0x40
 8004686:	d016      	beq.n	80046b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e007      	b.n	80046c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c0:	2b40      	cmp	r3, #64	@ 0x40
 80046c2:	d1ae      	bne.n	8004622 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046e4:	d11b      	bne.n	800471e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	f043 0204 	orr.w	r2, r3, #4
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e267      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d075      	beq.n	8004836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800474a:	4b88      	ldr	r3, [pc, #544]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b04      	cmp	r3, #4
 8004754:	d00c      	beq.n	8004770 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004756:	4b85      	ldr	r3, [pc, #532]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800475e:	2b08      	cmp	r3, #8
 8004760:	d112      	bne.n	8004788 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004762:	4b82      	ldr	r3, [pc, #520]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800476a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800476e:	d10b      	bne.n	8004788 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004770:	4b7e      	ldr	r3, [pc, #504]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d05b      	beq.n	8004834 <HAL_RCC_OscConfig+0x108>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d157      	bne.n	8004834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e242      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004790:	d106      	bne.n	80047a0 <HAL_RCC_OscConfig+0x74>
 8004792:	4b76      	ldr	r3, [pc, #472]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a75      	ldr	r2, [pc, #468]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e01d      	b.n	80047dc <HAL_RCC_OscConfig+0xb0>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047a8:	d10c      	bne.n	80047c4 <HAL_RCC_OscConfig+0x98>
 80047aa:	4b70      	ldr	r3, [pc, #448]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a6f      	ldr	r2, [pc, #444]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	4b6d      	ldr	r3, [pc, #436]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a6c      	ldr	r2, [pc, #432]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	e00b      	b.n	80047dc <HAL_RCC_OscConfig+0xb0>
 80047c4:	4b69      	ldr	r3, [pc, #420]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a68      	ldr	r2, [pc, #416]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	4b66      	ldr	r3, [pc, #408]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a65      	ldr	r2, [pc, #404]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d013      	beq.n	800480c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e4:	f7fd fd16 	bl	8002214 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ec:	f7fd fd12 	bl	8002214 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b64      	cmp	r3, #100	@ 0x64
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e207      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fe:	4b5b      	ldr	r3, [pc, #364]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0xc0>
 800480a:	e014      	b.n	8004836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480c:	f7fd fd02 	bl	8002214 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004814:	f7fd fcfe 	bl	8002214 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b64      	cmp	r3, #100	@ 0x64
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e1f3      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004826:	4b51      	ldr	r3, [pc, #324]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f0      	bne.n	8004814 <HAL_RCC_OscConfig+0xe8>
 8004832:	e000      	b.n	8004836 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d063      	beq.n	800490a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004842:	4b4a      	ldr	r3, [pc, #296]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 030c 	and.w	r3, r3, #12
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00b      	beq.n	8004866 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484e:	4b47      	ldr	r3, [pc, #284]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004856:	2b08      	cmp	r3, #8
 8004858:	d11c      	bne.n	8004894 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800485a:	4b44      	ldr	r3, [pc, #272]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d116      	bne.n	8004894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004866:	4b41      	ldr	r3, [pc, #260]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_RCC_OscConfig+0x152>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d001      	beq.n	800487e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e1c7      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487e:	4b3b      	ldr	r3, [pc, #236]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4937      	ldr	r1, [pc, #220]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 800488e:	4313      	orrs	r3, r2
 8004890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004892:	e03a      	b.n	800490a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d020      	beq.n	80048de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800489c:	4b34      	ldr	r3, [pc, #208]	@ (8004970 <HAL_RCC_OscConfig+0x244>)
 800489e:	2201      	movs	r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fd fcb7 	bl	8002214 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048aa:	f7fd fcb3 	bl	8002214 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e1a8      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048bc:	4b2b      	ldr	r3, [pc, #172]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0f0      	beq.n	80048aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c8:	4b28      	ldr	r3, [pc, #160]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	4925      	ldr	r1, [pc, #148]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	600b      	str	r3, [r1, #0]
 80048dc:	e015      	b.n	800490a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048de:	4b24      	ldr	r3, [pc, #144]	@ (8004970 <HAL_RCC_OscConfig+0x244>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fd fc96 	bl	8002214 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ec:	f7fd fc92 	bl	8002214 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e187      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048fe:	4b1b      	ldr	r3, [pc, #108]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d036      	beq.n	8004984 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800491e:	4b15      	ldr	r3, [pc, #84]	@ (8004974 <HAL_RCC_OscConfig+0x248>)
 8004920:	2201      	movs	r2, #1
 8004922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004924:	f7fd fc76 	bl	8002214 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800492c:	f7fd fc72 	bl	8002214 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e167      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800493e:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0x200>
 800494a:	e01b      	b.n	8004984 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800494c:	4b09      	ldr	r3, [pc, #36]	@ (8004974 <HAL_RCC_OscConfig+0x248>)
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004952:	f7fd fc5f 	bl	8002214 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004958:	e00e      	b.n	8004978 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800495a:	f7fd fc5b 	bl	8002214 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d907      	bls.n	8004978 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e150      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
 800496c:	40023800 	.word	0x40023800
 8004970:	42470000 	.word	0x42470000
 8004974:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004978:	4b88      	ldr	r3, [pc, #544]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 800497a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1ea      	bne.n	800495a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8097 	beq.w	8004ac0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004992:	2300      	movs	r3, #0
 8004994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004996:	4b81      	ldr	r3, [pc, #516]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10f      	bne.n	80049c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049a2:	2300      	movs	r3, #0
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	4b7d      	ldr	r3, [pc, #500]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	4a7c      	ldr	r2, [pc, #496]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 80049ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80049b2:	4b7a      	ldr	r3, [pc, #488]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ba:	60bb      	str	r3, [r7, #8]
 80049bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049be:	2301      	movs	r3, #1
 80049c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c2:	4b77      	ldr	r3, [pc, #476]	@ (8004ba0 <HAL_RCC_OscConfig+0x474>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d118      	bne.n	8004a00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ce:	4b74      	ldr	r3, [pc, #464]	@ (8004ba0 <HAL_RCC_OscConfig+0x474>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a73      	ldr	r2, [pc, #460]	@ (8004ba0 <HAL_RCC_OscConfig+0x474>)
 80049d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049da:	f7fd fc1b 	bl	8002214 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e2:	f7fd fc17 	bl	8002214 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e10c      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f4:	4b6a      	ldr	r3, [pc, #424]	@ (8004ba0 <HAL_RCC_OscConfig+0x474>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d106      	bne.n	8004a16 <HAL_RCC_OscConfig+0x2ea>
 8004a08:	4b64      	ldr	r3, [pc, #400]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0c:	4a63      	ldr	r2, [pc, #396]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a14:	e01c      	b.n	8004a50 <HAL_RCC_OscConfig+0x324>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	2b05      	cmp	r3, #5
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCC_OscConfig+0x30c>
 8004a1e:	4b5f      	ldr	r3, [pc, #380]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a22:	4a5e      	ldr	r2, [pc, #376]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a24:	f043 0304 	orr.w	r3, r3, #4
 8004a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2e:	4a5b      	ldr	r2, [pc, #364]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a36:	e00b      	b.n	8004a50 <HAL_RCC_OscConfig+0x324>
 8004a38:	4b58      	ldr	r3, [pc, #352]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3c:	4a57      	ldr	r2, [pc, #348]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a3e:	f023 0301 	bic.w	r3, r3, #1
 8004a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a44:	4b55      	ldr	r3, [pc, #340]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a48:	4a54      	ldr	r2, [pc, #336]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a4a:	f023 0304 	bic.w	r3, r3, #4
 8004a4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d015      	beq.n	8004a84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a58:	f7fd fbdc 	bl	8002214 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5e:	e00a      	b.n	8004a76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a60:	f7fd fbd8 	bl	8002214 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e0cb      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a76:	4b49      	ldr	r3, [pc, #292]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0ee      	beq.n	8004a60 <HAL_RCC_OscConfig+0x334>
 8004a82:	e014      	b.n	8004aae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a84:	f7fd fbc6 	bl	8002214 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8c:	f7fd fbc2 	bl	8002214 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e0b5      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1ee      	bne.n	8004a8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d105      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab4:	4b39      	ldr	r3, [pc, #228]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab8:	4a38      	ldr	r2, [pc, #224]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004abe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80a1 	beq.w	8004c0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aca:	4b34      	ldr	r3, [pc, #208]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 030c 	and.w	r3, r3, #12
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d05c      	beq.n	8004b90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d141      	bne.n	8004b62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ade:	4b31      	ldr	r3, [pc, #196]	@ (8004ba4 <HAL_RCC_OscConfig+0x478>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fd fb96 	bl	8002214 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aec:	f7fd fb92 	bl	8002214 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e087      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afe:	4b27      	ldr	r3, [pc, #156]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69da      	ldr	r2, [r3, #28]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b18:	019b      	lsls	r3, r3, #6
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b20:	085b      	lsrs	r3, r3, #1
 8004b22:	3b01      	subs	r3, #1
 8004b24:	041b      	lsls	r3, r3, #16
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2c:	061b      	lsls	r3, r3, #24
 8004b2e:	491b      	ldr	r1, [pc, #108]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b34:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba4 <HAL_RCC_OscConfig+0x478>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3a:	f7fd fb6b 	bl	8002214 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b42:	f7fd fb67 	bl	8002214 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e05c      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b54:	4b11      	ldr	r3, [pc, #68]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x416>
 8004b60:	e054      	b.n	8004c0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b62:	4b10      	ldr	r3, [pc, #64]	@ (8004ba4 <HAL_RCC_OscConfig+0x478>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b68:	f7fd fb54 	bl	8002214 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b70:	f7fd fb50 	bl	8002214 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e045      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b82:	4b06      	ldr	r3, [pc, #24]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x444>
 8004b8e:	e03d      	b.n	8004c0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d107      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e038      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	40007000 	.word	0x40007000
 8004ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c18 <HAL_RCC_OscConfig+0x4ec>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d028      	beq.n	8004c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d121      	bne.n	8004c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d11a      	bne.n	8004c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bd8:	4013      	ands	r3, r2
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d111      	bne.n	8004c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bee:	085b      	lsrs	r3, r3, #1
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d107      	bne.n	8004c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d001      	beq.n	8004c0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800

08004c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0cc      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c30:	4b68      	ldr	r3, [pc, #416]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d90c      	bls.n	8004c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b65      	ldr	r3, [pc, #404]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c46:	4b63      	ldr	r3, [pc, #396]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0b8      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d020      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c70:	4b59      	ldr	r3, [pc, #356]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	4a58      	ldr	r2, [pc, #352]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c88:	4b53      	ldr	r3, [pc, #332]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	4a52      	ldr	r2, [pc, #328]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c94:	4b50      	ldr	r3, [pc, #320]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	494d      	ldr	r1, [pc, #308]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d044      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d107      	bne.n	8004cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	4b47      	ldr	r3, [pc, #284]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d119      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e07f      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d003      	beq.n	8004cda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d107      	bne.n	8004cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cda:	4b3f      	ldr	r3, [pc, #252]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e06f      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cea:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e067      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cfa:	4b37      	ldr	r3, [pc, #220]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f023 0203 	bic.w	r2, r3, #3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	4934      	ldr	r1, [pc, #208]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d0c:	f7fd fa82 	bl	8002214 <HAL_GetTick>
 8004d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d12:	e00a      	b.n	8004d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d14:	f7fd fa7e 	bl	8002214 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e04f      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 020c 	and.w	r2, r3, #12
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d1eb      	bne.n	8004d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d3c:	4b25      	ldr	r3, [pc, #148]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d20c      	bcs.n	8004d64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4a:	4b22      	ldr	r3, [pc, #136]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d52:	4b20      	ldr	r3, [pc, #128]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d001      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e032      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d70:	4b19      	ldr	r3, [pc, #100]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4916      	ldr	r1, [pc, #88]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d8e:	4b12      	ldr	r3, [pc, #72]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	490e      	ldr	r1, [pc, #56]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004da2:	f000 f821 	bl	8004de8 <HAL_RCC_GetSysClockFreq>
 8004da6:	4602      	mov	r2, r0
 8004da8:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	091b      	lsrs	r3, r3, #4
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	490a      	ldr	r1, [pc, #40]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c0>)
 8004db4:	5ccb      	ldrb	r3, [r1, r3]
 8004db6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dba:	4a09      	ldr	r2, [pc, #36]	@ (8004de0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004dbe:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fd f9e2 	bl	800218c <HAL_InitTick>

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40023c00 	.word	0x40023c00
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	08007e1c 	.word	0x08007e1c
 8004de0:	20000008 	.word	0x20000008
 8004de4:	2000000c 	.word	0x2000000c

08004de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dec:	b090      	sub	sp, #64	@ 0x40
 8004dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e00:	4b59      	ldr	r3, [pc, #356]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 030c 	and.w	r3, r3, #12
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d00d      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0x40>
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	f200 80a1 	bhi.w	8004f54 <HAL_RCC_GetSysClockFreq+0x16c>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <HAL_RCC_GetSysClockFreq+0x34>
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d003      	beq.n	8004e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e1a:	e09b      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e1c:	4b53      	ldr	r3, [pc, #332]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x184>)
 8004e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e20:	e09b      	b.n	8004f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e22:	4b53      	ldr	r3, [pc, #332]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e26:	e098      	b.n	8004f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e28:	4b4f      	ldr	r3, [pc, #316]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e32:	4b4d      	ldr	r3, [pc, #308]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d028      	beq.n	8004e90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	099b      	lsrs	r3, r3, #6
 8004e44:	2200      	movs	r2, #0
 8004e46:	623b      	str	r3, [r7, #32]
 8004e48:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e50:	2100      	movs	r1, #0
 8004e52:	4b47      	ldr	r3, [pc, #284]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e54:	fb03 f201 	mul.w	r2, r3, r1
 8004e58:	2300      	movs	r3, #0
 8004e5a:	fb00 f303 	mul.w	r3, r0, r3
 8004e5e:	4413      	add	r3, r2
 8004e60:	4a43      	ldr	r2, [pc, #268]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e62:	fba0 1202 	umull	r1, r2, r0, r2
 8004e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e68:	460a      	mov	r2, r1
 8004e6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e6e:	4413      	add	r3, r2
 8004e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e74:	2200      	movs	r2, #0
 8004e76:	61bb      	str	r3, [r7, #24]
 8004e78:	61fa      	str	r2, [r7, #28]
 8004e7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e82:	f7fb fd0b 	bl	800089c <__aeabi_uldivmod>
 8004e86:	4602      	mov	r2, r0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e8e:	e053      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e90:	4b35      	ldr	r3, [pc, #212]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	099b      	lsrs	r3, r3, #6
 8004e96:	2200      	movs	r2, #0
 8004e98:	613b      	str	r3, [r7, #16]
 8004e9a:	617a      	str	r2, [r7, #20]
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ea2:	f04f 0b00 	mov.w	fp, #0
 8004ea6:	4652      	mov	r2, sl
 8004ea8:	465b      	mov	r3, fp
 8004eaa:	f04f 0000 	mov.w	r0, #0
 8004eae:	f04f 0100 	mov.w	r1, #0
 8004eb2:	0159      	lsls	r1, r3, #5
 8004eb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eb8:	0150      	lsls	r0, r2, #5
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	ebb2 080a 	subs.w	r8, r2, sl
 8004ec2:	eb63 090b 	sbc.w	r9, r3, fp
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ed2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ed6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004eda:	ebb2 0408 	subs.w	r4, r2, r8
 8004ede:	eb63 0509 	sbc.w	r5, r3, r9
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	00eb      	lsls	r3, r5, #3
 8004eec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ef0:	00e2      	lsls	r2, r4, #3
 8004ef2:	4614      	mov	r4, r2
 8004ef4:	461d      	mov	r5, r3
 8004ef6:	eb14 030a 	adds.w	r3, r4, sl
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	eb45 030b 	adc.w	r3, r5, fp
 8004f00:	607b      	str	r3, [r7, #4]
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	f04f 0300 	mov.w	r3, #0
 8004f0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f0e:	4629      	mov	r1, r5
 8004f10:	028b      	lsls	r3, r1, #10
 8004f12:	4621      	mov	r1, r4
 8004f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f18:	4621      	mov	r1, r4
 8004f1a:	028a      	lsls	r2, r1, #10
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f22:	2200      	movs	r2, #0
 8004f24:	60bb      	str	r3, [r7, #8]
 8004f26:	60fa      	str	r2, [r7, #12]
 8004f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f2c:	f7fb fcb6 	bl	800089c <__aeabi_uldivmod>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4613      	mov	r3, r2
 8004f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f38:	4b0b      	ldr	r3, [pc, #44]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	0c1b      	lsrs	r3, r3, #16
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	3301      	adds	r3, #1
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004f48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f52:	e002      	b.n	8004f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f54:	4b05      	ldr	r3, [pc, #20]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x184>)
 8004f56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3740      	adds	r7, #64	@ 0x40
 8004f60:	46bd      	mov	sp, r7
 8004f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f66:	bf00      	nop
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	00f42400 	.word	0x00f42400
 8004f70:	017d7840 	.word	0x017d7840

08004f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f78:	4b03      	ldr	r3, [pc, #12]	@ (8004f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	20000008 	.word	0x20000008

08004f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f90:	f7ff fff0 	bl	8004f74 <HAL_RCC_GetHCLKFreq>
 8004f94:	4602      	mov	r2, r0
 8004f96:	4b05      	ldr	r3, [pc, #20]	@ (8004fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	0a9b      	lsrs	r3, r3, #10
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	4903      	ldr	r1, [pc, #12]	@ (8004fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fa2:	5ccb      	ldrb	r3, [r1, r3]
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	08007e2c 	.word	0x08007e2c

08004fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fb8:	f7ff ffdc 	bl	8004f74 <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b05      	ldr	r3, [pc, #20]	@ (8004fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	0b5b      	lsrs	r3, r3, #13
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4903      	ldr	r1, [pc, #12]	@ (8004fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	08007e2c 	.word	0x08007e2c

08004fdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e041      	b.n	8005072 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fc fe16 	bl	8001c34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3304      	adds	r3, #4
 8005018:	4619      	mov	r1, r3
 800501a:	4610      	mov	r0, r2
 800501c:	f000 f9a0 	bl	8005360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d109      	bne.n	80050a0 <HAL_TIM_PWM_Start+0x24>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	bf14      	ite	ne
 8005098:	2301      	movne	r3, #1
 800509a:	2300      	moveq	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	e022      	b.n	80050e6 <HAL_TIM_PWM_Start+0x6a>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d109      	bne.n	80050ba <HAL_TIM_PWM_Start+0x3e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	bf14      	ite	ne
 80050b2:	2301      	movne	r3, #1
 80050b4:	2300      	moveq	r3, #0
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	e015      	b.n	80050e6 <HAL_TIM_PWM_Start+0x6a>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d109      	bne.n	80050d4 <HAL_TIM_PWM_Start+0x58>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	bf14      	ite	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	2300      	moveq	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	e008      	b.n	80050e6 <HAL_TIM_PWM_Start+0x6a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	bf14      	ite	ne
 80050e0:	2301      	movne	r3, #1
 80050e2:	2300      	moveq	r3, #0
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e068      	b.n	80051c0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_PWM_Start+0x82>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050fc:	e013      	b.n	8005126 <HAL_TIM_PWM_Start+0xaa>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b04      	cmp	r3, #4
 8005102:	d104      	bne.n	800510e <HAL_TIM_PWM_Start+0x92>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800510c:	e00b      	b.n	8005126 <HAL_TIM_PWM_Start+0xaa>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d104      	bne.n	800511e <HAL_TIM_PWM_Start+0xa2>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800511c:	e003      	b.n	8005126 <HAL_TIM_PWM_Start+0xaa>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2201      	movs	r2, #1
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fb2e 	bl	8005790 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a23      	ldr	r2, [pc, #140]	@ (80051c8 <HAL_TIM_PWM_Start+0x14c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d107      	bne.n	800514e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800514c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1d      	ldr	r2, [pc, #116]	@ (80051c8 <HAL_TIM_PWM_Start+0x14c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d018      	beq.n	800518a <HAL_TIM_PWM_Start+0x10e>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005160:	d013      	beq.n	800518a <HAL_TIM_PWM_Start+0x10e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a19      	ldr	r2, [pc, #100]	@ (80051cc <HAL_TIM_PWM_Start+0x150>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00e      	beq.n	800518a <HAL_TIM_PWM_Start+0x10e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a17      	ldr	r2, [pc, #92]	@ (80051d0 <HAL_TIM_PWM_Start+0x154>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d009      	beq.n	800518a <HAL_TIM_PWM_Start+0x10e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a16      	ldr	r2, [pc, #88]	@ (80051d4 <HAL_TIM_PWM_Start+0x158>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d004      	beq.n	800518a <HAL_TIM_PWM_Start+0x10e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a14      	ldr	r2, [pc, #80]	@ (80051d8 <HAL_TIM_PWM_Start+0x15c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d111      	bne.n	80051ae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b06      	cmp	r3, #6
 800519a:	d010      	beq.n	80051be <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ac:	e007      	b.n	80051be <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0201 	orr.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40010000 	.word	0x40010000
 80051cc:	40000400 	.word	0x40000400
 80051d0:	40000800 	.word	0x40000800
 80051d4:	40000c00 	.word	0x40000c00
 80051d8:	40014000 	.word	0x40014000

080051dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e0ae      	b.n	8005358 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b0c      	cmp	r3, #12
 8005206:	f200 809f 	bhi.w	8005348 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800520a:	a201      	add	r2, pc, #4	@ (adr r2, 8005210 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	08005245 	.word	0x08005245
 8005214:	08005349 	.word	0x08005349
 8005218:	08005349 	.word	0x08005349
 800521c:	08005349 	.word	0x08005349
 8005220:	08005285 	.word	0x08005285
 8005224:	08005349 	.word	0x08005349
 8005228:	08005349 	.word	0x08005349
 800522c:	08005349 	.word	0x08005349
 8005230:	080052c7 	.word	0x080052c7
 8005234:	08005349 	.word	0x08005349
 8005238:	08005349 	.word	0x08005349
 800523c:	08005349 	.word	0x08005349
 8005240:	08005307 	.word	0x08005307
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 f914 	bl	8005478 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0208 	orr.w	r2, r2, #8
 800525e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0204 	bic.w	r2, r2, #4
 800526e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6999      	ldr	r1, [r3, #24]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691a      	ldr	r2, [r3, #16]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	619a      	str	r2, [r3, #24]
      break;
 8005282:	e064      	b.n	800534e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	4618      	mov	r0, r3
 800528c:	f000 f95a 	bl	8005544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800529e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6999      	ldr	r1, [r3, #24]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	021a      	lsls	r2, r3, #8
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	619a      	str	r2, [r3, #24]
      break;
 80052c4:	e043      	b.n	800534e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f9a5 	bl	800561c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0208 	orr.w	r2, r2, #8
 80052e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0204 	bic.w	r2, r2, #4
 80052f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69d9      	ldr	r1, [r3, #28]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	61da      	str	r2, [r3, #28]
      break;
 8005304:	e023      	b.n	800534e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	4618      	mov	r0, r3
 800530e:	f000 f9ef 	bl	80056f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69da      	ldr	r2, [r3, #28]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69d9      	ldr	r1, [r3, #28]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	021a      	lsls	r2, r3, #8
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	61da      	str	r2, [r3, #28]
      break;
 8005346:	e002      	b.n	800534e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	75fb      	strb	r3, [r7, #23]
      break;
 800534c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005356:	7dfb      	ldrb	r3, [r7, #23]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a3a      	ldr	r2, [pc, #232]	@ (800545c <TIM_Base_SetConfig+0xfc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00f      	beq.n	8005398 <TIM_Base_SetConfig+0x38>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800537e:	d00b      	beq.n	8005398 <TIM_Base_SetConfig+0x38>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a37      	ldr	r2, [pc, #220]	@ (8005460 <TIM_Base_SetConfig+0x100>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d007      	beq.n	8005398 <TIM_Base_SetConfig+0x38>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a36      	ldr	r2, [pc, #216]	@ (8005464 <TIM_Base_SetConfig+0x104>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d003      	beq.n	8005398 <TIM_Base_SetConfig+0x38>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a35      	ldr	r2, [pc, #212]	@ (8005468 <TIM_Base_SetConfig+0x108>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d108      	bne.n	80053aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800539e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2b      	ldr	r2, [pc, #172]	@ (800545c <TIM_Base_SetConfig+0xfc>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d01b      	beq.n	80053ea <TIM_Base_SetConfig+0x8a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b8:	d017      	beq.n	80053ea <TIM_Base_SetConfig+0x8a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a28      	ldr	r2, [pc, #160]	@ (8005460 <TIM_Base_SetConfig+0x100>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <TIM_Base_SetConfig+0x8a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a27      	ldr	r2, [pc, #156]	@ (8005464 <TIM_Base_SetConfig+0x104>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00f      	beq.n	80053ea <TIM_Base_SetConfig+0x8a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a26      	ldr	r2, [pc, #152]	@ (8005468 <TIM_Base_SetConfig+0x108>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00b      	beq.n	80053ea <TIM_Base_SetConfig+0x8a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a25      	ldr	r2, [pc, #148]	@ (800546c <TIM_Base_SetConfig+0x10c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d007      	beq.n	80053ea <TIM_Base_SetConfig+0x8a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a24      	ldr	r2, [pc, #144]	@ (8005470 <TIM_Base_SetConfig+0x110>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d003      	beq.n	80053ea <TIM_Base_SetConfig+0x8a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a23      	ldr	r2, [pc, #140]	@ (8005474 <TIM_Base_SetConfig+0x114>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d108      	bne.n	80053fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a0e      	ldr	r2, [pc, #56]	@ (800545c <TIM_Base_SetConfig+0xfc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d103      	bne.n	8005430 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b01      	cmp	r3, #1
 8005440:	d105      	bne.n	800544e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f023 0201 	bic.w	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	611a      	str	r2, [r3, #16]
  }
}
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40010000 	.word	0x40010000
 8005460:	40000400 	.word	0x40000400
 8005464:	40000800 	.word	0x40000800
 8005468:	40000c00 	.word	0x40000c00
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800

08005478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	f023 0201 	bic.w	r2, r3, #1
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0303 	bic.w	r3, r3, #3
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f023 0302 	bic.w	r3, r3, #2
 80054c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005540 <TIM_OC1_SetConfig+0xc8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d10c      	bne.n	80054ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f023 0308 	bic.w	r3, r3, #8
 80054da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f023 0304 	bic.w	r3, r3, #4
 80054ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a13      	ldr	r2, [pc, #76]	@ (8005540 <TIM_OC1_SetConfig+0xc8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d111      	bne.n	800551a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	621a      	str	r2, [r3, #32]
}
 8005534:	bf00      	nop
 8005536:	371c      	adds	r7, #28
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	40010000 	.word	0x40010000

08005544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	f023 0210 	bic.w	r2, r3, #16
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800557a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	4313      	orrs	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0320 	bic.w	r3, r3, #32
 800558e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a1e      	ldr	r2, [pc, #120]	@ (8005618 <TIM_OC2_SetConfig+0xd4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d10d      	bne.n	80055c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a15      	ldr	r2, [pc, #84]	@ (8005618 <TIM_OC2_SetConfig+0xd4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d113      	bne.n	80055f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	621a      	str	r2, [r3, #32]
}
 800560a:	bf00      	nop
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40010000 	.word	0x40010000

0800561c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800564a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0303 	bic.w	r3, r3, #3
 8005652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	021b      	lsls	r3, r3, #8
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a1d      	ldr	r2, [pc, #116]	@ (80056ec <TIM_OC3_SetConfig+0xd0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d10d      	bne.n	8005696 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005680:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a14      	ldr	r2, [pc, #80]	@ (80056ec <TIM_OC3_SetConfig+0xd0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d113      	bne.n	80056c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	621a      	str	r2, [r3, #32]
}
 80056e0:	bf00      	nop
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	40010000 	.word	0x40010000

080056f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800571e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	4313      	orrs	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800573a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	031b      	lsls	r3, r3, #12
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a10      	ldr	r2, [pc, #64]	@ (800578c <TIM_OC4_SetConfig+0x9c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d109      	bne.n	8005764 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005756:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	019b      	lsls	r3, r3, #6
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	4313      	orrs	r3, r2
 8005762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	621a      	str	r2, [r3, #32]
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40010000 	.word	0x40010000

08005790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	2201      	movs	r2, #1
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a1a      	ldr	r2, [r3, #32]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	43db      	mvns	r3, r3
 80057b2:	401a      	ands	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a1a      	ldr	r2, [r3, #32]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	fa01 f303 	lsl.w	r3, r1, r3
 80057c8:	431a      	orrs	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	621a      	str	r2, [r3, #32]
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e050      	b.n	8005896 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800581a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1c      	ldr	r2, [pc, #112]	@ (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d018      	beq.n	800586a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005840:	d013      	beq.n	800586a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a18      	ldr	r2, [pc, #96]	@ (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00e      	beq.n	800586a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a16      	ldr	r2, [pc, #88]	@ (80058ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d009      	beq.n	800586a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a15      	ldr	r2, [pc, #84]	@ (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d004      	beq.n	800586a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a13      	ldr	r2, [pc, #76]	@ (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d10c      	bne.n	8005884 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	4313      	orrs	r3, r2
 800587a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40000400 	.word	0x40000400
 80058ac:	40000800 	.word	0x40000800
 80058b0:	40000c00 	.word	0x40000c00
 80058b4:	40014000 	.word	0x40014000

080058b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e042      	b.n	8005950 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fc fa24 	bl	8001d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2224      	movs	r2, #36	@ 0x24
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 ff4f 	bl	80067a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005910:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695a      	ldr	r2, [r3, #20]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005920:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005930:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08a      	sub	sp, #40	@ 0x28
 800595c:	af02      	add	r7, sp, #8
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	4613      	mov	r3, r2
 8005966:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b20      	cmp	r3, #32
 8005976:	d175      	bne.n	8005a64 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <HAL_UART_Transmit+0x2c>
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e06e      	b.n	8005a66 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2221      	movs	r2, #33	@ 0x21
 8005992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005996:	f7fc fc3d 	bl	8002214 <HAL_GetTick>
 800599a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	88fa      	ldrh	r2, [r7, #6]
 80059a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	88fa      	ldrh	r2, [r7, #6]
 80059a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059b0:	d108      	bne.n	80059c4 <HAL_UART_Transmit+0x6c>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d104      	bne.n	80059c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	e003      	b.n	80059cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059cc:	e02e      	b.n	8005a2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2200      	movs	r2, #0
 80059d6:	2180      	movs	r1, #128	@ 0x80
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 fc27 	bl	800622c <UART_WaitOnFlagUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d005      	beq.n	80059f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e03a      	b.n	8005a66 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	3302      	adds	r3, #2
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	e007      	b.n	8005a1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1cb      	bne.n	80059ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2140      	movs	r1, #64	@ 0x40
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 fbf3 	bl	800622c <UART_WaitOnFlagUntilTimeout>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e006      	b.n	8005a66 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	e000      	b.n	8005a66 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a64:	2302      	movs	r3, #2
  }
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3720      	adds	r7, #32
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b084      	sub	sp, #16
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d112      	bne.n	8005aae <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <HAL_UART_Receive_DMA+0x26>
 8005a8e:	88fb      	ldrh	r3, [r7, #6]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e00b      	b.n	8005ab0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005a9e:	88fb      	ldrh	r3, [r7, #6]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	68b9      	ldr	r1, [r7, #8]
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 fc1b 	bl	80062e0 <UART_Start_Receive_DMA>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	e000      	b.n	8005ab0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005aae:	2302      	movs	r3, #2
  }
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b0ba      	sub	sp, #232	@ 0xe8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005af6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10f      	bne.n	8005b1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d009      	beq.n	8005b1e <HAL_UART_IRQHandler+0x66>
 8005b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fd83 	bl	8006622 <UART_Receive_IT>
      return;
 8005b1c:	e25b      	b.n	8005fd6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 80de 	beq.w	8005ce4 <HAL_UART_IRQHandler+0x22c>
 8005b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d106      	bne.n	8005b42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b38:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 80d1 	beq.w	8005ce4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <HAL_UART_IRQHandler+0xae>
 8005b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d005      	beq.n	8005b66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b5e:	f043 0201 	orr.w	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00b      	beq.n	8005b8a <HAL_UART_IRQHandler+0xd2>
 8005b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b82:	f043 0202 	orr.w	r2, r3, #2
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00b      	beq.n	8005bae <HAL_UART_IRQHandler+0xf6>
 8005b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d005      	beq.n	8005bae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ba6:	f043 0204 	orr.w	r2, r3, #4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d011      	beq.n	8005bde <HAL_UART_IRQHandler+0x126>
 8005bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bbe:	f003 0320 	and.w	r3, r3, #32
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d105      	bne.n	8005bd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d005      	beq.n	8005bde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd6:	f043 0208 	orr.w	r2, r3, #8
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 81f2 	beq.w	8005fcc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bec:	f003 0320 	and.w	r3, r3, #32
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_UART_IRQHandler+0x14e>
 8005bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fd0e 	bl	8006622 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c10:	2b40      	cmp	r3, #64	@ 0x40
 8005c12:	bf0c      	ite	eq
 8005c14:	2301      	moveq	r3, #1
 8005c16:	2300      	movne	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d103      	bne.n	8005c32 <HAL_UART_IRQHandler+0x17a>
 8005c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d04f      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fc16 	bl	8006464 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c42:	2b40      	cmp	r3, #64	@ 0x40
 8005c44:	d141      	bne.n	8005cca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3314      	adds	r3, #20
 8005c4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3314      	adds	r3, #20
 8005c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1d9      	bne.n	8005c46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d013      	beq.n	8005cc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9e:	4a7e      	ldr	r2, [pc, #504]	@ (8005e98 <HAL_UART_IRQHandler+0x3e0>)
 8005ca0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fc ffde 	bl	8002c68 <HAL_DMA_Abort_IT>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d016      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc0:	e00e      	b.n	8005ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f99e 	bl	8006004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc8:	e00a      	b.n	8005ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f99a 	bl	8006004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd0:	e006      	b.n	8005ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f996 	bl	8006004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005cde:	e175      	b.n	8005fcc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce0:	bf00      	nop
    return;
 8005ce2:	e173      	b.n	8005fcc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	f040 814f 	bne.w	8005f8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cf2:	f003 0310 	and.w	r3, r3, #16
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 8148 	beq.w	8005f8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d00:	f003 0310 	and.w	r3, r3, #16
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 8141 	beq.w	8005f8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60bb      	str	r3, [r7, #8]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	60bb      	str	r3, [r7, #8]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	60bb      	str	r3, [r7, #8]
 8005d1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d2a:	2b40      	cmp	r3, #64	@ 0x40
 8005d2c:	f040 80b6 	bne.w	8005e9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 8145 	beq.w	8005fd0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	f080 813e 	bcs.w	8005fd0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d5a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d66:	f000 8088 	beq.w	8005e7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	330c      	adds	r3, #12
 8005d70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	330c      	adds	r3, #12
 8005d92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005d96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005da2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005da6:	e841 2300 	strex	r3, r2, [r1]
 8005daa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1d9      	bne.n	8005d6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3314      	adds	r3, #20
 8005dbc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005dc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005dc8:	f023 0301 	bic.w	r3, r3, #1
 8005dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3314      	adds	r3, #20
 8005dd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005dda:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005dde:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005de2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e1      	bne.n	8005db6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3314      	adds	r3, #20
 8005df8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dfc:	e853 3f00 	ldrex	r3, [r3]
 8005e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005e02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3314      	adds	r3, #20
 8005e12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005e16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e3      	bne.n	8005df2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e42:	e853 3f00 	ldrex	r3, [r3]
 8005e46:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e4a:	f023 0310 	bic.w	r3, r3, #16
 8005e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	330c      	adds	r3, #12
 8005e58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005e5c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005e5e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e64:	e841 2300 	strex	r3, r2, [r1]
 8005e68:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1e3      	bne.n	8005e38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fc fe87 	bl	8002b88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f8c1 	bl	8006018 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e96:	e09b      	b.n	8005fd0 <HAL_UART_IRQHandler+0x518>
 8005e98:	0800652b 	.word	0x0800652b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 808e 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 8089 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	330c      	adds	r3, #12
 8005ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ed4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ed8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	330c      	adds	r3, #12
 8005ee2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005ee6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ee8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005eec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e3      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3314      	adds	r3, #20
 8005f00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	623b      	str	r3, [r7, #32]
   return(result);
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	f023 0301 	bic.w	r3, r3, #1
 8005f10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3314      	adds	r3, #20
 8005f1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e3      	bne.n	8005efa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	330c      	adds	r3, #12
 8005f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0310 	bic.w	r3, r3, #16
 8005f56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	330c      	adds	r3, #12
 8005f60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005f64:	61fa      	str	r2, [r7, #28]
 8005f66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	69b9      	ldr	r1, [r7, #24]
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	617b      	str	r3, [r7, #20]
   return(result);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e3      	bne.n	8005f40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f847 	bl	8006018 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f8a:	e023      	b.n	8005fd4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d009      	beq.n	8005fac <HAL_UART_IRQHandler+0x4f4>
 8005f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fad4 	bl	8006552 <UART_Transmit_IT>
    return;
 8005faa:	e014      	b.n	8005fd6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00e      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x51e>
 8005fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d008      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fb14 	bl	80065f2 <UART_EndTransmit_IT>
    return;
 8005fca:	e004      	b.n	8005fd6 <HAL_UART_IRQHandler+0x51e>
    return;
 8005fcc:	bf00      	nop
 8005fce:	e002      	b.n	8005fd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005fd0:	bf00      	nop
 8005fd2:	e000      	b.n	8005fd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005fd4:	bf00      	nop
  }
}
 8005fd6:	37e8      	adds	r7, #232	@ 0xe8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b09c      	sub	sp, #112	@ 0x70
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006048:	2b00      	cmp	r3, #0
 800604a:	d172      	bne.n	8006132 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800604c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800604e:	2200      	movs	r2, #0
 8006050:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	330c      	adds	r3, #12
 8006058:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006068:	66bb      	str	r3, [r7, #104]	@ 0x68
 800606a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	330c      	adds	r3, #12
 8006070:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006072:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006074:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006078:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e5      	bne.n	8006052 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3314      	adds	r3, #20
 800608c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006098:	f023 0301 	bic.w	r3, r3, #1
 800609c:	667b      	str	r3, [r7, #100]	@ 0x64
 800609e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3314      	adds	r3, #20
 80060a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80060a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80060a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e5      	bne.n	8006086 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3314      	adds	r3, #20
 80060c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	623b      	str	r3, [r7, #32]
   return(result);
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80060d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3314      	adds	r3, #20
 80060d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80060da:	633a      	str	r2, [r7, #48]	@ 0x30
 80060dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e5      	bne.n	80060ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060f0:	2220      	movs	r2, #32
 80060f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d119      	bne.n	8006132 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	330c      	adds	r3, #12
 8006104:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	60fb      	str	r3, [r7, #12]
   return(result);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f023 0310 	bic.w	r3, r3, #16
 8006114:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006116:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	330c      	adds	r3, #12
 800611c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800611e:	61fa      	str	r2, [r7, #28]
 8006120:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006122:	69b9      	ldr	r1, [r7, #24]
 8006124:	69fa      	ldr	r2, [r7, #28]
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	617b      	str	r3, [r7, #20]
   return(result);
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e5      	bne.n	80060fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006134:	2200      	movs	r2, #0
 8006136:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800613a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613c:	2b01      	cmp	r3, #1
 800613e:	d106      	bne.n	800614e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006140:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006142:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006144:	4619      	mov	r1, r3
 8006146:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006148:	f7ff ff66 	bl	8006018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800614c:	e002      	b.n	8006154 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800614e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006150:	f7fb fbec 	bl	800192c <HAL_UART_RxCpltCallback>
}
 8006154:	bf00      	nop
 8006156:	3770      	adds	r7, #112	@ 0x70
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006168:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2201      	movs	r2, #1
 800616e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006174:	2b01      	cmp	r3, #1
 8006176:	d108      	bne.n	800618a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800617c:	085b      	lsrs	r3, r3, #1
 800617e:	b29b      	uxth	r3, r3
 8006180:	4619      	mov	r1, r3
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f7ff ff48 	bl	8006018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006188:	e002      	b.n	8006190 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f7ff ff30 	bl	8005ff0 <HAL_UART_RxHalfCpltCallback>
}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b4:	2b80      	cmp	r3, #128	@ 0x80
 80061b6:	bf0c      	ite	eq
 80061b8:	2301      	moveq	r3, #1
 80061ba:	2300      	movne	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b21      	cmp	r3, #33	@ 0x21
 80061ca:	d108      	bne.n	80061de <UART_DMAError+0x46>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d005      	beq.n	80061de <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2200      	movs	r2, #0
 80061d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80061d8:	68b8      	ldr	r0, [r7, #8]
 80061da:	f000 f91b 	bl	8006414 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e8:	2b40      	cmp	r3, #64	@ 0x40
 80061ea:	bf0c      	ite	eq
 80061ec:	2301      	moveq	r3, #1
 80061ee:	2300      	movne	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b22      	cmp	r3, #34	@ 0x22
 80061fe:	d108      	bne.n	8006212 <UART_DMAError+0x7a>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d005      	beq.n	8006212 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	2200      	movs	r2, #0
 800620a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800620c:	68b8      	ldr	r0, [r7, #8]
 800620e:	f000 f929 	bl	8006464 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006216:	f043 0210 	orr.w	r2, r3, #16
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800621e:	68b8      	ldr	r0, [r7, #8]
 8006220:	f7ff fef0 	bl	8006004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	603b      	str	r3, [r7, #0]
 8006238:	4613      	mov	r3, r2
 800623a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800623c:	e03b      	b.n	80062b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006244:	d037      	beq.n	80062b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006246:	f7fb ffe5 	bl	8002214 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	6a3a      	ldr	r2, [r7, #32]
 8006252:	429a      	cmp	r2, r3
 8006254:	d302      	bcc.n	800625c <UART_WaitOnFlagUntilTimeout+0x30>
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e03a      	b.n	80062d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	d023      	beq.n	80062b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b80      	cmp	r3, #128	@ 0x80
 8006272:	d020      	beq.n	80062b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b40      	cmp	r3, #64	@ 0x40
 8006278:	d01d      	beq.n	80062b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0308 	and.w	r3, r3, #8
 8006284:	2b08      	cmp	r3, #8
 8006286:	d116      	bne.n	80062b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006288:	2300      	movs	r3, #0
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f8e0 	bl	8006464 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2208      	movs	r2, #8
 80062a8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e00f      	b.n	80062d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	4013      	ands	r3, r2
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	bf0c      	ite	eq
 80062c6:	2301      	moveq	r3, #1
 80062c8:	2300      	movne	r3, #0
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	461a      	mov	r2, r3
 80062ce:	79fb      	ldrb	r3, [r7, #7]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d0b4      	beq.n	800623e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b098      	sub	sp, #96	@ 0x60
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	4613      	mov	r3, r2
 80062ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	88fa      	ldrh	r2, [r7, #6]
 80062f8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2222      	movs	r2, #34	@ 0x22
 8006304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800630c:	4a3e      	ldr	r2, [pc, #248]	@ (8006408 <UART_Start_Receive_DMA+0x128>)
 800630e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006314:	4a3d      	ldr	r2, [pc, #244]	@ (800640c <UART_Start_Receive_DMA+0x12c>)
 8006316:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800631c:	4a3c      	ldr	r2, [pc, #240]	@ (8006410 <UART_Start_Receive_DMA+0x130>)
 800631e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006324:	2200      	movs	r2, #0
 8006326:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006328:	f107 0308 	add.w	r3, r7, #8
 800632c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3304      	adds	r3, #4
 8006338:	4619      	mov	r1, r3
 800633a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	88fb      	ldrh	r3, [r7, #6]
 8006340:	f7fc fbca 	bl	8002ad8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006344:	2300      	movs	r3, #0
 8006346:	613b      	str	r3, [r7, #16]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d019      	beq.n	8006396 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	330c      	adds	r3, #12
 8006368:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006378:	65bb      	str	r3, [r7, #88]	@ 0x58
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	330c      	adds	r3, #12
 8006380:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006382:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006384:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006388:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e5      	bne.n	8006362 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3314      	adds	r3, #20
 800639c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a8:	f043 0301 	orr.w	r3, r3, #1
 80063ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3314      	adds	r3, #20
 80063b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80063b6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80063b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80063bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e5      	bne.n	8006396 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3314      	adds	r3, #20
 80063d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	617b      	str	r3, [r7, #20]
   return(result);
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3314      	adds	r3, #20
 80063e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80063ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80063ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	6a39      	ldr	r1, [r7, #32]
 80063f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e5      	bne.n	80063ca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3760      	adds	r7, #96	@ 0x60
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	08006031 	.word	0x08006031
 800640c:	0800615d 	.word	0x0800615d
 8006410:	08006199 	.word	0x08006199

08006414 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006414:	b480      	push	{r7}
 8006416:	b089      	sub	sp, #36	@ 0x24
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	330c      	adds	r3, #12
 8006422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	e853 3f00 	ldrex	r3, [r3]
 800642a:	60bb      	str	r3, [r7, #8]
   return(result);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	330c      	adds	r3, #12
 800643a:	69fa      	ldr	r2, [r7, #28]
 800643c:	61ba      	str	r2, [r7, #24]
 800643e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	6979      	ldr	r1, [r7, #20]
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	e841 2300 	strex	r3, r2, [r1]
 8006448:	613b      	str	r3, [r7, #16]
   return(result);
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e5      	bne.n	800641c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006458:	bf00      	nop
 800645a:	3724      	adds	r7, #36	@ 0x24
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006464:	b480      	push	{r7}
 8006466:	b095      	sub	sp, #84	@ 0x54
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	330c      	adds	r3, #12
 8006472:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006476:	e853 3f00 	ldrex	r3, [r3]
 800647a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800647c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	330c      	adds	r3, #12
 800648a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800648c:	643a      	str	r2, [r7, #64]	@ 0x40
 800648e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006492:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006494:	e841 2300 	strex	r3, r2, [r1]
 8006498:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800649a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e5      	bne.n	800646c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3314      	adds	r3, #20
 80064a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	f023 0301 	bic.w	r3, r3, #1
 80064b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3314      	adds	r3, #20
 80064be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e5      	bne.n	80064a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d119      	bne.n	8006510 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	330c      	adds	r3, #12
 80064e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	e853 3f00 	ldrex	r3, [r3]
 80064ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f023 0310 	bic.w	r3, r3, #16
 80064f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	330c      	adds	r3, #12
 80064fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064fc:	61ba      	str	r2, [r7, #24]
 80064fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006500:	6979      	ldr	r1, [r7, #20]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	e841 2300 	strex	r3, r2, [r1]
 8006508:	613b      	str	r3, [r7, #16]
   return(result);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e5      	bne.n	80064dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2220      	movs	r2, #32
 8006514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800651e:	bf00      	nop
 8006520:	3754      	adds	r7, #84	@ 0x54
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006536:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f7ff fd5d 	bl	8006004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800654a:	bf00      	nop
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006552:	b480      	push	{r7}
 8006554:	b085      	sub	sp, #20
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b21      	cmp	r3, #33	@ 0x21
 8006564:	d13e      	bne.n	80065e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800656e:	d114      	bne.n	800659a <UART_Transmit_IT+0x48>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d110      	bne.n	800659a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800658c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	1c9a      	adds	r2, r3, #2
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	621a      	str	r2, [r3, #32]
 8006598:	e008      	b.n	80065ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	1c59      	adds	r1, r3, #1
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	6211      	str	r1, [r2, #32]
 80065a4:	781a      	ldrb	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	4619      	mov	r1, r3
 80065ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10f      	bne.n	80065e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	e000      	b.n	80065e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065e4:	2302      	movs	r3, #2
  }
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006608:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2220      	movs	r2, #32
 800660e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff fce2 	bl	8005fdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b08c      	sub	sp, #48	@ 0x30
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b22      	cmp	r3, #34	@ 0x22
 8006634:	f040 80ae 	bne.w	8006794 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006640:	d117      	bne.n	8006672 <UART_Receive_IT+0x50>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d113      	bne.n	8006672 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800664a:	2300      	movs	r3, #0
 800664c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006652:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	b29b      	uxth	r3, r3
 800665c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006660:	b29a      	uxth	r2, r3
 8006662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006664:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666a:	1c9a      	adds	r2, r3, #2
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006670:	e026      	b.n	80066c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006676:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006678:	2300      	movs	r3, #0
 800667a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006684:	d007      	beq.n	8006696 <UART_Receive_IT+0x74>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10a      	bne.n	80066a4 <UART_Receive_IT+0x82>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d106      	bne.n	80066a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	b2da      	uxtb	r2, r3
 800669e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	e008      	b.n	80066b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	4619      	mov	r1, r3
 80066ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d15d      	bne.n	8006790 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0220 	bic.w	r2, r2, #32
 80066e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	695a      	ldr	r2, [r3, #20]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0201 	bic.w	r2, r2, #1
 8006702:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006716:	2b01      	cmp	r3, #1
 8006718:	d135      	bne.n	8006786 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	330c      	adds	r3, #12
 8006726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	613b      	str	r3, [r7, #16]
   return(result);
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f023 0310 	bic.w	r3, r3, #16
 8006736:	627b      	str	r3, [r7, #36]	@ 0x24
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	330c      	adds	r3, #12
 800673e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006740:	623a      	str	r2, [r7, #32]
 8006742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	69f9      	ldr	r1, [r7, #28]
 8006746:	6a3a      	ldr	r2, [r7, #32]
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	61bb      	str	r3, [r7, #24]
   return(result);
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e5      	bne.n	8006720 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0310 	and.w	r3, r3, #16
 800675e:	2b10      	cmp	r3, #16
 8006760:	d10a      	bne.n	8006778 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff fc4a 	bl	8006018 <HAL_UARTEx_RxEventCallback>
 8006784:	e002      	b.n	800678c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7fb f8d0 	bl	800192c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	e002      	b.n	8006796 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	e000      	b.n	8006796 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006794:	2302      	movs	r3, #2
  }
}
 8006796:	4618      	mov	r0, r3
 8006798:	3730      	adds	r7, #48	@ 0x30
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067a4:	b0c0      	sub	sp, #256	@ 0x100
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067bc:	68d9      	ldr	r1, [r3, #12]
 80067be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	ea40 0301 	orr.w	r3, r0, r1
 80067c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	431a      	orrs	r2, r3
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80067f8:	f021 010c 	bic.w	r1, r1, #12
 80067fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006806:	430b      	orrs	r3, r1
 8006808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800680a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800681a:	6999      	ldr	r1, [r3, #24]
 800681c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	ea40 0301 	orr.w	r3, r0, r1
 8006826:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	4b8f      	ldr	r3, [pc, #572]	@ (8006a6c <UART_SetConfig+0x2cc>)
 8006830:	429a      	cmp	r2, r3
 8006832:	d005      	beq.n	8006840 <UART_SetConfig+0xa0>
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	4b8d      	ldr	r3, [pc, #564]	@ (8006a70 <UART_SetConfig+0x2d0>)
 800683c:	429a      	cmp	r2, r3
 800683e:	d104      	bne.n	800684a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006840:	f7fe fbb8 	bl	8004fb4 <HAL_RCC_GetPCLK2Freq>
 8006844:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006848:	e003      	b.n	8006852 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800684a:	f7fe fb9f 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 800684e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800685c:	f040 810c 	bne.w	8006a78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006864:	2200      	movs	r2, #0
 8006866:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800686a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800686e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006872:	4622      	mov	r2, r4
 8006874:	462b      	mov	r3, r5
 8006876:	1891      	adds	r1, r2, r2
 8006878:	65b9      	str	r1, [r7, #88]	@ 0x58
 800687a:	415b      	adcs	r3, r3
 800687c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800687e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006882:	4621      	mov	r1, r4
 8006884:	eb12 0801 	adds.w	r8, r2, r1
 8006888:	4629      	mov	r1, r5
 800688a:	eb43 0901 	adc.w	r9, r3, r1
 800688e:	f04f 0200 	mov.w	r2, #0
 8006892:	f04f 0300 	mov.w	r3, #0
 8006896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800689a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800689e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068a2:	4690      	mov	r8, r2
 80068a4:	4699      	mov	r9, r3
 80068a6:	4623      	mov	r3, r4
 80068a8:	eb18 0303 	adds.w	r3, r8, r3
 80068ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068b0:	462b      	mov	r3, r5
 80068b2:	eb49 0303 	adc.w	r3, r9, r3
 80068b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80068ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80068ce:	460b      	mov	r3, r1
 80068d0:	18db      	adds	r3, r3, r3
 80068d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80068d4:	4613      	mov	r3, r2
 80068d6:	eb42 0303 	adc.w	r3, r2, r3
 80068da:	657b      	str	r3, [r7, #84]	@ 0x54
 80068dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80068e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80068e4:	f7f9 ffda 	bl	800089c <__aeabi_uldivmod>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4b61      	ldr	r3, [pc, #388]	@ (8006a74 <UART_SetConfig+0x2d4>)
 80068ee:	fba3 2302 	umull	r2, r3, r3, r2
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	011c      	lsls	r4, r3, #4
 80068f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006900:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006904:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006908:	4642      	mov	r2, r8
 800690a:	464b      	mov	r3, r9
 800690c:	1891      	adds	r1, r2, r2
 800690e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006910:	415b      	adcs	r3, r3
 8006912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006914:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006918:	4641      	mov	r1, r8
 800691a:	eb12 0a01 	adds.w	sl, r2, r1
 800691e:	4649      	mov	r1, r9
 8006920:	eb43 0b01 	adc.w	fp, r3, r1
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006930:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006938:	4692      	mov	sl, r2
 800693a:	469b      	mov	fp, r3
 800693c:	4643      	mov	r3, r8
 800693e:	eb1a 0303 	adds.w	r3, sl, r3
 8006942:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006946:	464b      	mov	r3, r9
 8006948:	eb4b 0303 	adc.w	r3, fp, r3
 800694c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800695c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006960:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006964:	460b      	mov	r3, r1
 8006966:	18db      	adds	r3, r3, r3
 8006968:	643b      	str	r3, [r7, #64]	@ 0x40
 800696a:	4613      	mov	r3, r2
 800696c:	eb42 0303 	adc.w	r3, r2, r3
 8006970:	647b      	str	r3, [r7, #68]	@ 0x44
 8006972:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006976:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800697a:	f7f9 ff8f 	bl	800089c <__aeabi_uldivmod>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4611      	mov	r1, r2
 8006984:	4b3b      	ldr	r3, [pc, #236]	@ (8006a74 <UART_SetConfig+0x2d4>)
 8006986:	fba3 2301 	umull	r2, r3, r3, r1
 800698a:	095b      	lsrs	r3, r3, #5
 800698c:	2264      	movs	r2, #100	@ 0x64
 800698e:	fb02 f303 	mul.w	r3, r2, r3
 8006992:	1acb      	subs	r3, r1, r3
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800699a:	4b36      	ldr	r3, [pc, #216]	@ (8006a74 <UART_SetConfig+0x2d4>)
 800699c:	fba3 2302 	umull	r2, r3, r3, r2
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80069a8:	441c      	add	r4, r3
 80069aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80069b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80069bc:	4642      	mov	r2, r8
 80069be:	464b      	mov	r3, r9
 80069c0:	1891      	adds	r1, r2, r2
 80069c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80069c4:	415b      	adcs	r3, r3
 80069c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80069cc:	4641      	mov	r1, r8
 80069ce:	1851      	adds	r1, r2, r1
 80069d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80069d2:	4649      	mov	r1, r9
 80069d4:	414b      	adcs	r3, r1
 80069d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80069e4:	4659      	mov	r1, fp
 80069e6:	00cb      	lsls	r3, r1, #3
 80069e8:	4651      	mov	r1, sl
 80069ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ee:	4651      	mov	r1, sl
 80069f0:	00ca      	lsls	r2, r1, #3
 80069f2:	4610      	mov	r0, r2
 80069f4:	4619      	mov	r1, r3
 80069f6:	4603      	mov	r3, r0
 80069f8:	4642      	mov	r2, r8
 80069fa:	189b      	adds	r3, r3, r2
 80069fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a00:	464b      	mov	r3, r9
 8006a02:	460a      	mov	r2, r1
 8006a04:	eb42 0303 	adc.w	r3, r2, r3
 8006a08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006a1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a20:	460b      	mov	r3, r1
 8006a22:	18db      	adds	r3, r3, r3
 8006a24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a26:	4613      	mov	r3, r2
 8006a28:	eb42 0303 	adc.w	r3, r2, r3
 8006a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006a36:	f7f9 ff31 	bl	800089c <__aeabi_uldivmod>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a74 <UART_SetConfig+0x2d4>)
 8006a40:	fba3 1302 	umull	r1, r3, r3, r2
 8006a44:	095b      	lsrs	r3, r3, #5
 8006a46:	2164      	movs	r1, #100	@ 0x64
 8006a48:	fb01 f303 	mul.w	r3, r1, r3
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	3332      	adds	r3, #50	@ 0x32
 8006a52:	4a08      	ldr	r2, [pc, #32]	@ (8006a74 <UART_SetConfig+0x2d4>)
 8006a54:	fba2 2303 	umull	r2, r3, r2, r3
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	f003 0207 	and.w	r2, r3, #7
 8006a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4422      	add	r2, r4
 8006a66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a68:	e106      	b.n	8006c78 <UART_SetConfig+0x4d8>
 8006a6a:	bf00      	nop
 8006a6c:	40011000 	.word	0x40011000
 8006a70:	40011400 	.word	0x40011400
 8006a74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006a86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006a8a:	4642      	mov	r2, r8
 8006a8c:	464b      	mov	r3, r9
 8006a8e:	1891      	adds	r1, r2, r2
 8006a90:	6239      	str	r1, [r7, #32]
 8006a92:	415b      	adcs	r3, r3
 8006a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a9a:	4641      	mov	r1, r8
 8006a9c:	1854      	adds	r4, r2, r1
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	eb43 0501 	adc.w	r5, r3, r1
 8006aa4:	f04f 0200 	mov.w	r2, #0
 8006aa8:	f04f 0300 	mov.w	r3, #0
 8006aac:	00eb      	lsls	r3, r5, #3
 8006aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ab2:	00e2      	lsls	r2, r4, #3
 8006ab4:	4614      	mov	r4, r2
 8006ab6:	461d      	mov	r5, r3
 8006ab8:	4643      	mov	r3, r8
 8006aba:	18e3      	adds	r3, r4, r3
 8006abc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ac0:	464b      	mov	r3, r9
 8006ac2:	eb45 0303 	adc.w	r3, r5, r3
 8006ac6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ad6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ada:	f04f 0200 	mov.w	r2, #0
 8006ade:	f04f 0300 	mov.w	r3, #0
 8006ae2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	008b      	lsls	r3, r1, #2
 8006aea:	4621      	mov	r1, r4
 8006aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006af0:	4621      	mov	r1, r4
 8006af2:	008a      	lsls	r2, r1, #2
 8006af4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006af8:	f7f9 fed0 	bl	800089c <__aeabi_uldivmod>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4b60      	ldr	r3, [pc, #384]	@ (8006c84 <UART_SetConfig+0x4e4>)
 8006b02:	fba3 2302 	umull	r2, r3, r3, r2
 8006b06:	095b      	lsrs	r3, r3, #5
 8006b08:	011c      	lsls	r4, r3, #4
 8006b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006b18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006b1c:	4642      	mov	r2, r8
 8006b1e:	464b      	mov	r3, r9
 8006b20:	1891      	adds	r1, r2, r2
 8006b22:	61b9      	str	r1, [r7, #24]
 8006b24:	415b      	adcs	r3, r3
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b2c:	4641      	mov	r1, r8
 8006b2e:	1851      	adds	r1, r2, r1
 8006b30:	6139      	str	r1, [r7, #16]
 8006b32:	4649      	mov	r1, r9
 8006b34:	414b      	adcs	r3, r1
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	f04f 0200 	mov.w	r2, #0
 8006b3c:	f04f 0300 	mov.w	r3, #0
 8006b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b44:	4659      	mov	r1, fp
 8006b46:	00cb      	lsls	r3, r1, #3
 8006b48:	4651      	mov	r1, sl
 8006b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b4e:	4651      	mov	r1, sl
 8006b50:	00ca      	lsls	r2, r1, #3
 8006b52:	4610      	mov	r0, r2
 8006b54:	4619      	mov	r1, r3
 8006b56:	4603      	mov	r3, r0
 8006b58:	4642      	mov	r2, r8
 8006b5a:	189b      	adds	r3, r3, r2
 8006b5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b60:	464b      	mov	r3, r9
 8006b62:	460a      	mov	r2, r1
 8006b64:	eb42 0303 	adc.w	r3, r2, r3
 8006b68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006b84:	4649      	mov	r1, r9
 8006b86:	008b      	lsls	r3, r1, #2
 8006b88:	4641      	mov	r1, r8
 8006b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b8e:	4641      	mov	r1, r8
 8006b90:	008a      	lsls	r2, r1, #2
 8006b92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006b96:	f7f9 fe81 	bl	800089c <__aeabi_uldivmod>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	4b38      	ldr	r3, [pc, #224]	@ (8006c84 <UART_SetConfig+0x4e4>)
 8006ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ba6:	095b      	lsrs	r3, r3, #5
 8006ba8:	2264      	movs	r2, #100	@ 0x64
 8006baa:	fb02 f303 	mul.w	r3, r2, r3
 8006bae:	1acb      	subs	r3, r1, r3
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	3332      	adds	r3, #50	@ 0x32
 8006bb4:	4a33      	ldr	r2, [pc, #204]	@ (8006c84 <UART_SetConfig+0x4e4>)
 8006bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006bc0:	441c      	add	r4, r3
 8006bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006bca:	677a      	str	r2, [r7, #116]	@ 0x74
 8006bcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006bd0:	4642      	mov	r2, r8
 8006bd2:	464b      	mov	r3, r9
 8006bd4:	1891      	adds	r1, r2, r2
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	415b      	adcs	r3, r3
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006be0:	4641      	mov	r1, r8
 8006be2:	1851      	adds	r1, r2, r1
 8006be4:	6039      	str	r1, [r7, #0]
 8006be6:	4649      	mov	r1, r9
 8006be8:	414b      	adcs	r3, r1
 8006bea:	607b      	str	r3, [r7, #4]
 8006bec:	f04f 0200 	mov.w	r2, #0
 8006bf0:	f04f 0300 	mov.w	r3, #0
 8006bf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bf8:	4659      	mov	r1, fp
 8006bfa:	00cb      	lsls	r3, r1, #3
 8006bfc:	4651      	mov	r1, sl
 8006bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c02:	4651      	mov	r1, sl
 8006c04:	00ca      	lsls	r2, r1, #3
 8006c06:	4610      	mov	r0, r2
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	4642      	mov	r2, r8
 8006c0e:	189b      	adds	r3, r3, r2
 8006c10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c12:	464b      	mov	r3, r9
 8006c14:	460a      	mov	r2, r1
 8006c16:	eb42 0303 	adc.w	r3, r2, r3
 8006c1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c26:	667a      	str	r2, [r7, #100]	@ 0x64
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	f04f 0300 	mov.w	r3, #0
 8006c30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006c34:	4649      	mov	r1, r9
 8006c36:	008b      	lsls	r3, r1, #2
 8006c38:	4641      	mov	r1, r8
 8006c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c3e:	4641      	mov	r1, r8
 8006c40:	008a      	lsls	r2, r1, #2
 8006c42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006c46:	f7f9 fe29 	bl	800089c <__aeabi_uldivmod>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <UART_SetConfig+0x4e4>)
 8006c50:	fba3 1302 	umull	r1, r3, r3, r2
 8006c54:	095b      	lsrs	r3, r3, #5
 8006c56:	2164      	movs	r1, #100	@ 0x64
 8006c58:	fb01 f303 	mul.w	r3, r1, r3
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	3332      	adds	r3, #50	@ 0x32
 8006c62:	4a08      	ldr	r2, [pc, #32]	@ (8006c84 <UART_SetConfig+0x4e4>)
 8006c64:	fba2 2303 	umull	r2, r3, r2, r3
 8006c68:	095b      	lsrs	r3, r3, #5
 8006c6a:	f003 020f 	and.w	r2, r3, #15
 8006c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4422      	add	r2, r4
 8006c76:	609a      	str	r2, [r3, #8]
}
 8006c78:	bf00      	nop
 8006c7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c84:	51eb851f 	.word	0x51eb851f

08006c88 <_strtol_l.isra.0>:
 8006c88:	2b24      	cmp	r3, #36	@ 0x24
 8006c8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c8e:	4686      	mov	lr, r0
 8006c90:	4690      	mov	r8, r2
 8006c92:	d801      	bhi.n	8006c98 <_strtol_l.isra.0+0x10>
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d106      	bne.n	8006ca6 <_strtol_l.isra.0+0x1e>
 8006c98:	f000 fad0 	bl	800723c <__errno>
 8006c9c:	2316      	movs	r3, #22
 8006c9e:	6003      	str	r3, [r0, #0]
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca6:	4834      	ldr	r0, [pc, #208]	@ (8006d78 <_strtol_l.isra.0+0xf0>)
 8006ca8:	460d      	mov	r5, r1
 8006caa:	462a      	mov	r2, r5
 8006cac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006cb0:	5d06      	ldrb	r6, [r0, r4]
 8006cb2:	f016 0608 	ands.w	r6, r6, #8
 8006cb6:	d1f8      	bne.n	8006caa <_strtol_l.isra.0+0x22>
 8006cb8:	2c2d      	cmp	r4, #45	@ 0x2d
 8006cba:	d110      	bne.n	8006cde <_strtol_l.isra.0+0x56>
 8006cbc:	782c      	ldrb	r4, [r5, #0]
 8006cbe:	2601      	movs	r6, #1
 8006cc0:	1c95      	adds	r5, r2, #2
 8006cc2:	f033 0210 	bics.w	r2, r3, #16
 8006cc6:	d115      	bne.n	8006cf4 <_strtol_l.isra.0+0x6c>
 8006cc8:	2c30      	cmp	r4, #48	@ 0x30
 8006cca:	d10d      	bne.n	8006ce8 <_strtol_l.isra.0+0x60>
 8006ccc:	782a      	ldrb	r2, [r5, #0]
 8006cce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006cd2:	2a58      	cmp	r2, #88	@ 0x58
 8006cd4:	d108      	bne.n	8006ce8 <_strtol_l.isra.0+0x60>
 8006cd6:	786c      	ldrb	r4, [r5, #1]
 8006cd8:	3502      	adds	r5, #2
 8006cda:	2310      	movs	r3, #16
 8006cdc:	e00a      	b.n	8006cf4 <_strtol_l.isra.0+0x6c>
 8006cde:	2c2b      	cmp	r4, #43	@ 0x2b
 8006ce0:	bf04      	itt	eq
 8006ce2:	782c      	ldrbeq	r4, [r5, #0]
 8006ce4:	1c95      	addeq	r5, r2, #2
 8006ce6:	e7ec      	b.n	8006cc2 <_strtol_l.isra.0+0x3a>
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1f6      	bne.n	8006cda <_strtol_l.isra.0+0x52>
 8006cec:	2c30      	cmp	r4, #48	@ 0x30
 8006cee:	bf14      	ite	ne
 8006cf0:	230a      	movne	r3, #10
 8006cf2:	2308      	moveq	r3, #8
 8006cf4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006cf8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	fbbc f9f3 	udiv	r9, ip, r3
 8006d02:	4610      	mov	r0, r2
 8006d04:	fb03 ca19 	mls	sl, r3, r9, ip
 8006d08:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006d0c:	2f09      	cmp	r7, #9
 8006d0e:	d80f      	bhi.n	8006d30 <_strtol_l.isra.0+0xa8>
 8006d10:	463c      	mov	r4, r7
 8006d12:	42a3      	cmp	r3, r4
 8006d14:	dd1b      	ble.n	8006d4e <_strtol_l.isra.0+0xc6>
 8006d16:	1c57      	adds	r7, r2, #1
 8006d18:	d007      	beq.n	8006d2a <_strtol_l.isra.0+0xa2>
 8006d1a:	4581      	cmp	r9, r0
 8006d1c:	d314      	bcc.n	8006d48 <_strtol_l.isra.0+0xc0>
 8006d1e:	d101      	bne.n	8006d24 <_strtol_l.isra.0+0x9c>
 8006d20:	45a2      	cmp	sl, r4
 8006d22:	db11      	blt.n	8006d48 <_strtol_l.isra.0+0xc0>
 8006d24:	fb00 4003 	mla	r0, r0, r3, r4
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d2e:	e7eb      	b.n	8006d08 <_strtol_l.isra.0+0x80>
 8006d30:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006d34:	2f19      	cmp	r7, #25
 8006d36:	d801      	bhi.n	8006d3c <_strtol_l.isra.0+0xb4>
 8006d38:	3c37      	subs	r4, #55	@ 0x37
 8006d3a:	e7ea      	b.n	8006d12 <_strtol_l.isra.0+0x8a>
 8006d3c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006d40:	2f19      	cmp	r7, #25
 8006d42:	d804      	bhi.n	8006d4e <_strtol_l.isra.0+0xc6>
 8006d44:	3c57      	subs	r4, #87	@ 0x57
 8006d46:	e7e4      	b.n	8006d12 <_strtol_l.isra.0+0x8a>
 8006d48:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4c:	e7ed      	b.n	8006d2a <_strtol_l.isra.0+0xa2>
 8006d4e:	1c53      	adds	r3, r2, #1
 8006d50:	d108      	bne.n	8006d64 <_strtol_l.isra.0+0xdc>
 8006d52:	2322      	movs	r3, #34	@ 0x22
 8006d54:	f8ce 3000 	str.w	r3, [lr]
 8006d58:	4660      	mov	r0, ip
 8006d5a:	f1b8 0f00 	cmp.w	r8, #0
 8006d5e:	d0a0      	beq.n	8006ca2 <_strtol_l.isra.0+0x1a>
 8006d60:	1e69      	subs	r1, r5, #1
 8006d62:	e006      	b.n	8006d72 <_strtol_l.isra.0+0xea>
 8006d64:	b106      	cbz	r6, 8006d68 <_strtol_l.isra.0+0xe0>
 8006d66:	4240      	negs	r0, r0
 8006d68:	f1b8 0f00 	cmp.w	r8, #0
 8006d6c:	d099      	beq.n	8006ca2 <_strtol_l.isra.0+0x1a>
 8006d6e:	2a00      	cmp	r2, #0
 8006d70:	d1f6      	bne.n	8006d60 <_strtol_l.isra.0+0xd8>
 8006d72:	f8c8 1000 	str.w	r1, [r8]
 8006d76:	e794      	b.n	8006ca2 <_strtol_l.isra.0+0x1a>
 8006d78:	08007e3d 	.word	0x08007e3d

08006d7c <strtol>:
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	460a      	mov	r2, r1
 8006d80:	4601      	mov	r1, r0
 8006d82:	4802      	ldr	r0, [pc, #8]	@ (8006d8c <strtol+0x10>)
 8006d84:	6800      	ldr	r0, [r0, #0]
 8006d86:	f7ff bf7f 	b.w	8006c88 <_strtol_l.isra.0>
 8006d8a:	bf00      	nop
 8006d8c:	20000020 	.word	0x20000020

08006d90 <std>:
 8006d90:	2300      	movs	r3, #0
 8006d92:	b510      	push	{r4, lr}
 8006d94:	4604      	mov	r4, r0
 8006d96:	e9c0 3300 	strd	r3, r3, [r0]
 8006d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d9e:	6083      	str	r3, [r0, #8]
 8006da0:	8181      	strh	r1, [r0, #12]
 8006da2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006da4:	81c2      	strh	r2, [r0, #14]
 8006da6:	6183      	str	r3, [r0, #24]
 8006da8:	4619      	mov	r1, r3
 8006daa:	2208      	movs	r2, #8
 8006dac:	305c      	adds	r0, #92	@ 0x5c
 8006dae:	f000 f99b 	bl	80070e8 <memset>
 8006db2:	4b0d      	ldr	r3, [pc, #52]	@ (8006de8 <std+0x58>)
 8006db4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006db6:	4b0d      	ldr	r3, [pc, #52]	@ (8006dec <std+0x5c>)
 8006db8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006dba:	4b0d      	ldr	r3, [pc, #52]	@ (8006df0 <std+0x60>)
 8006dbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <std+0x64>)
 8006dc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006df8 <std+0x68>)
 8006dc4:	6224      	str	r4, [r4, #32]
 8006dc6:	429c      	cmp	r4, r3
 8006dc8:	d006      	beq.n	8006dd8 <std+0x48>
 8006dca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006dce:	4294      	cmp	r4, r2
 8006dd0:	d002      	beq.n	8006dd8 <std+0x48>
 8006dd2:	33d0      	adds	r3, #208	@ 0xd0
 8006dd4:	429c      	cmp	r4, r3
 8006dd6:	d105      	bne.n	8006de4 <std+0x54>
 8006dd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006de0:	f000 ba56 	b.w	8007290 <__retarget_lock_init_recursive>
 8006de4:	bd10      	pop	{r4, pc}
 8006de6:	bf00      	nop
 8006de8:	08006f39 	.word	0x08006f39
 8006dec:	08006f5b 	.word	0x08006f5b
 8006df0:	08006f93 	.word	0x08006f93
 8006df4:	08006fb7 	.word	0x08006fb7
 8006df8:	20000378 	.word	0x20000378

08006dfc <stdio_exit_handler>:
 8006dfc:	4a02      	ldr	r2, [pc, #8]	@ (8006e08 <stdio_exit_handler+0xc>)
 8006dfe:	4903      	ldr	r1, [pc, #12]	@ (8006e0c <stdio_exit_handler+0x10>)
 8006e00:	4803      	ldr	r0, [pc, #12]	@ (8006e10 <stdio_exit_handler+0x14>)
 8006e02:	f000 b869 	b.w	8006ed8 <_fwalk_sglue>
 8006e06:	bf00      	nop
 8006e08:	20000014 	.word	0x20000014
 8006e0c:	08007b79 	.word	0x08007b79
 8006e10:	20000024 	.word	0x20000024

08006e14 <cleanup_stdio>:
 8006e14:	6841      	ldr	r1, [r0, #4]
 8006e16:	4b0c      	ldr	r3, [pc, #48]	@ (8006e48 <cleanup_stdio+0x34>)
 8006e18:	4299      	cmp	r1, r3
 8006e1a:	b510      	push	{r4, lr}
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	d001      	beq.n	8006e24 <cleanup_stdio+0x10>
 8006e20:	f000 feaa 	bl	8007b78 <_fflush_r>
 8006e24:	68a1      	ldr	r1, [r4, #8]
 8006e26:	4b09      	ldr	r3, [pc, #36]	@ (8006e4c <cleanup_stdio+0x38>)
 8006e28:	4299      	cmp	r1, r3
 8006e2a:	d002      	beq.n	8006e32 <cleanup_stdio+0x1e>
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f000 fea3 	bl	8007b78 <_fflush_r>
 8006e32:	68e1      	ldr	r1, [r4, #12]
 8006e34:	4b06      	ldr	r3, [pc, #24]	@ (8006e50 <cleanup_stdio+0x3c>)
 8006e36:	4299      	cmp	r1, r3
 8006e38:	d004      	beq.n	8006e44 <cleanup_stdio+0x30>
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e40:	f000 be9a 	b.w	8007b78 <_fflush_r>
 8006e44:	bd10      	pop	{r4, pc}
 8006e46:	bf00      	nop
 8006e48:	20000378 	.word	0x20000378
 8006e4c:	200003e0 	.word	0x200003e0
 8006e50:	20000448 	.word	0x20000448

08006e54 <global_stdio_init.part.0>:
 8006e54:	b510      	push	{r4, lr}
 8006e56:	4b0b      	ldr	r3, [pc, #44]	@ (8006e84 <global_stdio_init.part.0+0x30>)
 8006e58:	4c0b      	ldr	r4, [pc, #44]	@ (8006e88 <global_stdio_init.part.0+0x34>)
 8006e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e8c <global_stdio_init.part.0+0x38>)
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	4620      	mov	r0, r4
 8006e60:	2200      	movs	r2, #0
 8006e62:	2104      	movs	r1, #4
 8006e64:	f7ff ff94 	bl	8006d90 <std>
 8006e68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	2109      	movs	r1, #9
 8006e70:	f7ff ff8e 	bl	8006d90 <std>
 8006e74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e78:	2202      	movs	r2, #2
 8006e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e7e:	2112      	movs	r1, #18
 8006e80:	f7ff bf86 	b.w	8006d90 <std>
 8006e84:	200004b0 	.word	0x200004b0
 8006e88:	20000378 	.word	0x20000378
 8006e8c:	08006dfd 	.word	0x08006dfd

08006e90 <__sfp_lock_acquire>:
 8006e90:	4801      	ldr	r0, [pc, #4]	@ (8006e98 <__sfp_lock_acquire+0x8>)
 8006e92:	f000 b9fe 	b.w	8007292 <__retarget_lock_acquire_recursive>
 8006e96:	bf00      	nop
 8006e98:	200004b9 	.word	0x200004b9

08006e9c <__sfp_lock_release>:
 8006e9c:	4801      	ldr	r0, [pc, #4]	@ (8006ea4 <__sfp_lock_release+0x8>)
 8006e9e:	f000 b9f9 	b.w	8007294 <__retarget_lock_release_recursive>
 8006ea2:	bf00      	nop
 8006ea4:	200004b9 	.word	0x200004b9

08006ea8 <__sinit>:
 8006ea8:	b510      	push	{r4, lr}
 8006eaa:	4604      	mov	r4, r0
 8006eac:	f7ff fff0 	bl	8006e90 <__sfp_lock_acquire>
 8006eb0:	6a23      	ldr	r3, [r4, #32]
 8006eb2:	b11b      	cbz	r3, 8006ebc <__sinit+0x14>
 8006eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eb8:	f7ff bff0 	b.w	8006e9c <__sfp_lock_release>
 8006ebc:	4b04      	ldr	r3, [pc, #16]	@ (8006ed0 <__sinit+0x28>)
 8006ebe:	6223      	str	r3, [r4, #32]
 8006ec0:	4b04      	ldr	r3, [pc, #16]	@ (8006ed4 <__sinit+0x2c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1f5      	bne.n	8006eb4 <__sinit+0xc>
 8006ec8:	f7ff ffc4 	bl	8006e54 <global_stdio_init.part.0>
 8006ecc:	e7f2      	b.n	8006eb4 <__sinit+0xc>
 8006ece:	bf00      	nop
 8006ed0:	08006e15 	.word	0x08006e15
 8006ed4:	200004b0 	.word	0x200004b0

08006ed8 <_fwalk_sglue>:
 8006ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006edc:	4607      	mov	r7, r0
 8006ede:	4688      	mov	r8, r1
 8006ee0:	4614      	mov	r4, r2
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ee8:	f1b9 0901 	subs.w	r9, r9, #1
 8006eec:	d505      	bpl.n	8006efa <_fwalk_sglue+0x22>
 8006eee:	6824      	ldr	r4, [r4, #0]
 8006ef0:	2c00      	cmp	r4, #0
 8006ef2:	d1f7      	bne.n	8006ee4 <_fwalk_sglue+0xc>
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006efa:	89ab      	ldrh	r3, [r5, #12]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d907      	bls.n	8006f10 <_fwalk_sglue+0x38>
 8006f00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f04:	3301      	adds	r3, #1
 8006f06:	d003      	beq.n	8006f10 <_fwalk_sglue+0x38>
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	47c0      	blx	r8
 8006f0e:	4306      	orrs	r6, r0
 8006f10:	3568      	adds	r5, #104	@ 0x68
 8006f12:	e7e9      	b.n	8006ee8 <_fwalk_sglue+0x10>

08006f14 <iprintf>:
 8006f14:	b40f      	push	{r0, r1, r2, r3}
 8006f16:	b507      	push	{r0, r1, r2, lr}
 8006f18:	4906      	ldr	r1, [pc, #24]	@ (8006f34 <iprintf+0x20>)
 8006f1a:	ab04      	add	r3, sp, #16
 8006f1c:	6808      	ldr	r0, [r1, #0]
 8006f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f22:	6881      	ldr	r1, [r0, #8]
 8006f24:	9301      	str	r3, [sp, #4]
 8006f26:	f000 faff 	bl	8007528 <_vfiprintf_r>
 8006f2a:	b003      	add	sp, #12
 8006f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f30:	b004      	add	sp, #16
 8006f32:	4770      	bx	lr
 8006f34:	20000020 	.word	0x20000020

08006f38 <__sread>:
 8006f38:	b510      	push	{r4, lr}
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f40:	f000 f958 	bl	80071f4 <_read_r>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	bfab      	itete	ge
 8006f48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f4c:	181b      	addge	r3, r3, r0
 8006f4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f52:	bfac      	ite	ge
 8006f54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f56:	81a3      	strhlt	r3, [r4, #12]
 8006f58:	bd10      	pop	{r4, pc}

08006f5a <__swrite>:
 8006f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5e:	461f      	mov	r7, r3
 8006f60:	898b      	ldrh	r3, [r1, #12]
 8006f62:	05db      	lsls	r3, r3, #23
 8006f64:	4605      	mov	r5, r0
 8006f66:	460c      	mov	r4, r1
 8006f68:	4616      	mov	r6, r2
 8006f6a:	d505      	bpl.n	8006f78 <__swrite+0x1e>
 8006f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f70:	2302      	movs	r3, #2
 8006f72:	2200      	movs	r2, #0
 8006f74:	f000 f92c 	bl	80071d0 <_lseek_r>
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f82:	81a3      	strh	r3, [r4, #12]
 8006f84:	4632      	mov	r2, r6
 8006f86:	463b      	mov	r3, r7
 8006f88:	4628      	mov	r0, r5
 8006f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f8e:	f000 b943 	b.w	8007218 <_write_r>

08006f92 <__sseek>:
 8006f92:	b510      	push	{r4, lr}
 8006f94:	460c      	mov	r4, r1
 8006f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f9a:	f000 f919 	bl	80071d0 <_lseek_r>
 8006f9e:	1c43      	adds	r3, r0, #1
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	bf15      	itete	ne
 8006fa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006fa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006faa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006fae:	81a3      	strheq	r3, [r4, #12]
 8006fb0:	bf18      	it	ne
 8006fb2:	81a3      	strhne	r3, [r4, #12]
 8006fb4:	bd10      	pop	{r4, pc}

08006fb6 <__sclose>:
 8006fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fba:	f000 b8f9 	b.w	80071b0 <_close_r>

08006fbe <__swbuf_r>:
 8006fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc0:	460e      	mov	r6, r1
 8006fc2:	4614      	mov	r4, r2
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	b118      	cbz	r0, 8006fd0 <__swbuf_r+0x12>
 8006fc8:	6a03      	ldr	r3, [r0, #32]
 8006fca:	b90b      	cbnz	r3, 8006fd0 <__swbuf_r+0x12>
 8006fcc:	f7ff ff6c 	bl	8006ea8 <__sinit>
 8006fd0:	69a3      	ldr	r3, [r4, #24]
 8006fd2:	60a3      	str	r3, [r4, #8]
 8006fd4:	89a3      	ldrh	r3, [r4, #12]
 8006fd6:	071a      	lsls	r2, r3, #28
 8006fd8:	d501      	bpl.n	8006fde <__swbuf_r+0x20>
 8006fda:	6923      	ldr	r3, [r4, #16]
 8006fdc:	b943      	cbnz	r3, 8006ff0 <__swbuf_r+0x32>
 8006fde:	4621      	mov	r1, r4
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f000 f82b 	bl	800703c <__swsetup_r>
 8006fe6:	b118      	cbz	r0, 8006ff0 <__swbuf_r+0x32>
 8006fe8:	f04f 37ff 	mov.w	r7, #4294967295
 8006fec:	4638      	mov	r0, r7
 8006fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	6922      	ldr	r2, [r4, #16]
 8006ff4:	1a98      	subs	r0, r3, r2
 8006ff6:	6963      	ldr	r3, [r4, #20]
 8006ff8:	b2f6      	uxtb	r6, r6
 8006ffa:	4283      	cmp	r3, r0
 8006ffc:	4637      	mov	r7, r6
 8006ffe:	dc05      	bgt.n	800700c <__swbuf_r+0x4e>
 8007000:	4621      	mov	r1, r4
 8007002:	4628      	mov	r0, r5
 8007004:	f000 fdb8 	bl	8007b78 <_fflush_r>
 8007008:	2800      	cmp	r0, #0
 800700a:	d1ed      	bne.n	8006fe8 <__swbuf_r+0x2a>
 800700c:	68a3      	ldr	r3, [r4, #8]
 800700e:	3b01      	subs	r3, #1
 8007010:	60a3      	str	r3, [r4, #8]
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	6022      	str	r2, [r4, #0]
 8007018:	701e      	strb	r6, [r3, #0]
 800701a:	6962      	ldr	r2, [r4, #20]
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	429a      	cmp	r2, r3
 8007020:	d004      	beq.n	800702c <__swbuf_r+0x6e>
 8007022:	89a3      	ldrh	r3, [r4, #12]
 8007024:	07db      	lsls	r3, r3, #31
 8007026:	d5e1      	bpl.n	8006fec <__swbuf_r+0x2e>
 8007028:	2e0a      	cmp	r6, #10
 800702a:	d1df      	bne.n	8006fec <__swbuf_r+0x2e>
 800702c:	4621      	mov	r1, r4
 800702e:	4628      	mov	r0, r5
 8007030:	f000 fda2 	bl	8007b78 <_fflush_r>
 8007034:	2800      	cmp	r0, #0
 8007036:	d0d9      	beq.n	8006fec <__swbuf_r+0x2e>
 8007038:	e7d6      	b.n	8006fe8 <__swbuf_r+0x2a>
	...

0800703c <__swsetup_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	4b29      	ldr	r3, [pc, #164]	@ (80070e4 <__swsetup_r+0xa8>)
 8007040:	4605      	mov	r5, r0
 8007042:	6818      	ldr	r0, [r3, #0]
 8007044:	460c      	mov	r4, r1
 8007046:	b118      	cbz	r0, 8007050 <__swsetup_r+0x14>
 8007048:	6a03      	ldr	r3, [r0, #32]
 800704a:	b90b      	cbnz	r3, 8007050 <__swsetup_r+0x14>
 800704c:	f7ff ff2c 	bl	8006ea8 <__sinit>
 8007050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007054:	0719      	lsls	r1, r3, #28
 8007056:	d422      	bmi.n	800709e <__swsetup_r+0x62>
 8007058:	06da      	lsls	r2, r3, #27
 800705a:	d407      	bmi.n	800706c <__swsetup_r+0x30>
 800705c:	2209      	movs	r2, #9
 800705e:	602a      	str	r2, [r5, #0]
 8007060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007064:	81a3      	strh	r3, [r4, #12]
 8007066:	f04f 30ff 	mov.w	r0, #4294967295
 800706a:	e033      	b.n	80070d4 <__swsetup_r+0x98>
 800706c:	0758      	lsls	r0, r3, #29
 800706e:	d512      	bpl.n	8007096 <__swsetup_r+0x5a>
 8007070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007072:	b141      	cbz	r1, 8007086 <__swsetup_r+0x4a>
 8007074:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007078:	4299      	cmp	r1, r3
 800707a:	d002      	beq.n	8007082 <__swsetup_r+0x46>
 800707c:	4628      	mov	r0, r5
 800707e:	f000 f929 	bl	80072d4 <_free_r>
 8007082:	2300      	movs	r3, #0
 8007084:	6363      	str	r3, [r4, #52]	@ 0x34
 8007086:	89a3      	ldrh	r3, [r4, #12]
 8007088:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800708c:	81a3      	strh	r3, [r4, #12]
 800708e:	2300      	movs	r3, #0
 8007090:	6063      	str	r3, [r4, #4]
 8007092:	6923      	ldr	r3, [r4, #16]
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	f043 0308 	orr.w	r3, r3, #8
 800709c:	81a3      	strh	r3, [r4, #12]
 800709e:	6923      	ldr	r3, [r4, #16]
 80070a0:	b94b      	cbnz	r3, 80070b6 <__swsetup_r+0x7a>
 80070a2:	89a3      	ldrh	r3, [r4, #12]
 80070a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80070a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070ac:	d003      	beq.n	80070b6 <__swsetup_r+0x7a>
 80070ae:	4621      	mov	r1, r4
 80070b0:	4628      	mov	r0, r5
 80070b2:	f000 fdc1 	bl	8007c38 <__smakebuf_r>
 80070b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ba:	f013 0201 	ands.w	r2, r3, #1
 80070be:	d00a      	beq.n	80070d6 <__swsetup_r+0x9a>
 80070c0:	2200      	movs	r2, #0
 80070c2:	60a2      	str	r2, [r4, #8]
 80070c4:	6962      	ldr	r2, [r4, #20]
 80070c6:	4252      	negs	r2, r2
 80070c8:	61a2      	str	r2, [r4, #24]
 80070ca:	6922      	ldr	r2, [r4, #16]
 80070cc:	b942      	cbnz	r2, 80070e0 <__swsetup_r+0xa4>
 80070ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80070d2:	d1c5      	bne.n	8007060 <__swsetup_r+0x24>
 80070d4:	bd38      	pop	{r3, r4, r5, pc}
 80070d6:	0799      	lsls	r1, r3, #30
 80070d8:	bf58      	it	pl
 80070da:	6962      	ldrpl	r2, [r4, #20]
 80070dc:	60a2      	str	r2, [r4, #8]
 80070de:	e7f4      	b.n	80070ca <__swsetup_r+0x8e>
 80070e0:	2000      	movs	r0, #0
 80070e2:	e7f7      	b.n	80070d4 <__swsetup_r+0x98>
 80070e4:	20000020 	.word	0x20000020

080070e8 <memset>:
 80070e8:	4402      	add	r2, r0
 80070ea:	4603      	mov	r3, r0
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d100      	bne.n	80070f2 <memset+0xa>
 80070f0:	4770      	bx	lr
 80070f2:	f803 1b01 	strb.w	r1, [r3], #1
 80070f6:	e7f9      	b.n	80070ec <memset+0x4>

080070f8 <strtok>:
 80070f8:	4b16      	ldr	r3, [pc, #88]	@ (8007154 <strtok+0x5c>)
 80070fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070fe:	681f      	ldr	r7, [r3, #0]
 8007100:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007102:	4605      	mov	r5, r0
 8007104:	460e      	mov	r6, r1
 8007106:	b9ec      	cbnz	r4, 8007144 <strtok+0x4c>
 8007108:	2050      	movs	r0, #80	@ 0x50
 800710a:	f000 f92d 	bl	8007368 <malloc>
 800710e:	4602      	mov	r2, r0
 8007110:	6478      	str	r0, [r7, #68]	@ 0x44
 8007112:	b920      	cbnz	r0, 800711e <strtok+0x26>
 8007114:	4b10      	ldr	r3, [pc, #64]	@ (8007158 <strtok+0x60>)
 8007116:	4811      	ldr	r0, [pc, #68]	@ (800715c <strtok+0x64>)
 8007118:	215b      	movs	r1, #91	@ 0x5b
 800711a:	f000 f8bd 	bl	8007298 <__assert_func>
 800711e:	e9c0 4400 	strd	r4, r4, [r0]
 8007122:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007126:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800712a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800712e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007132:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007136:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800713a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800713e:	6184      	str	r4, [r0, #24]
 8007140:	7704      	strb	r4, [r0, #28]
 8007142:	6244      	str	r4, [r0, #36]	@ 0x24
 8007144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007146:	4631      	mov	r1, r6
 8007148:	4628      	mov	r0, r5
 800714a:	2301      	movs	r3, #1
 800714c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007150:	f000 b806 	b.w	8007160 <__strtok_r>
 8007154:	20000020 	.word	0x20000020
 8007158:	08007f3d 	.word	0x08007f3d
 800715c:	08007f54 	.word	0x08007f54

08007160 <__strtok_r>:
 8007160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007162:	4604      	mov	r4, r0
 8007164:	b908      	cbnz	r0, 800716a <__strtok_r+0xa>
 8007166:	6814      	ldr	r4, [r2, #0]
 8007168:	b144      	cbz	r4, 800717c <__strtok_r+0x1c>
 800716a:	4620      	mov	r0, r4
 800716c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007170:	460f      	mov	r7, r1
 8007172:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007176:	b91e      	cbnz	r6, 8007180 <__strtok_r+0x20>
 8007178:	b965      	cbnz	r5, 8007194 <__strtok_r+0x34>
 800717a:	6015      	str	r5, [r2, #0]
 800717c:	2000      	movs	r0, #0
 800717e:	e005      	b.n	800718c <__strtok_r+0x2c>
 8007180:	42b5      	cmp	r5, r6
 8007182:	d1f6      	bne.n	8007172 <__strtok_r+0x12>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1f0      	bne.n	800716a <__strtok_r+0xa>
 8007188:	6014      	str	r4, [r2, #0]
 800718a:	7003      	strb	r3, [r0, #0]
 800718c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800718e:	461c      	mov	r4, r3
 8007190:	e00c      	b.n	80071ac <__strtok_r+0x4c>
 8007192:	b91d      	cbnz	r5, 800719c <__strtok_r+0x3c>
 8007194:	4627      	mov	r7, r4
 8007196:	f814 3b01 	ldrb.w	r3, [r4], #1
 800719a:	460e      	mov	r6, r1
 800719c:	f816 5b01 	ldrb.w	r5, [r6], #1
 80071a0:	42ab      	cmp	r3, r5
 80071a2:	d1f6      	bne.n	8007192 <__strtok_r+0x32>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0f2      	beq.n	800718e <__strtok_r+0x2e>
 80071a8:	2300      	movs	r3, #0
 80071aa:	703b      	strb	r3, [r7, #0]
 80071ac:	6014      	str	r4, [r2, #0]
 80071ae:	e7ed      	b.n	800718c <__strtok_r+0x2c>

080071b0 <_close_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	4d06      	ldr	r5, [pc, #24]	@ (80071cc <_close_r+0x1c>)
 80071b4:	2300      	movs	r3, #0
 80071b6:	4604      	mov	r4, r0
 80071b8:	4608      	mov	r0, r1
 80071ba:	602b      	str	r3, [r5, #0]
 80071bc:	f7fa ff1e 	bl	8001ffc <_close>
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	d102      	bne.n	80071ca <_close_r+0x1a>
 80071c4:	682b      	ldr	r3, [r5, #0]
 80071c6:	b103      	cbz	r3, 80071ca <_close_r+0x1a>
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	200004b4 	.word	0x200004b4

080071d0 <_lseek_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	4d07      	ldr	r5, [pc, #28]	@ (80071f0 <_lseek_r+0x20>)
 80071d4:	4604      	mov	r4, r0
 80071d6:	4608      	mov	r0, r1
 80071d8:	4611      	mov	r1, r2
 80071da:	2200      	movs	r2, #0
 80071dc:	602a      	str	r2, [r5, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	f7fa ff33 	bl	800204a <_lseek>
 80071e4:	1c43      	adds	r3, r0, #1
 80071e6:	d102      	bne.n	80071ee <_lseek_r+0x1e>
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	b103      	cbz	r3, 80071ee <_lseek_r+0x1e>
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	200004b4 	.word	0x200004b4

080071f4 <_read_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4d07      	ldr	r5, [pc, #28]	@ (8007214 <_read_r+0x20>)
 80071f8:	4604      	mov	r4, r0
 80071fa:	4608      	mov	r0, r1
 80071fc:	4611      	mov	r1, r2
 80071fe:	2200      	movs	r2, #0
 8007200:	602a      	str	r2, [r5, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	f7fa fec1 	bl	8001f8a <_read>
 8007208:	1c43      	adds	r3, r0, #1
 800720a:	d102      	bne.n	8007212 <_read_r+0x1e>
 800720c:	682b      	ldr	r3, [r5, #0]
 800720e:	b103      	cbz	r3, 8007212 <_read_r+0x1e>
 8007210:	6023      	str	r3, [r4, #0]
 8007212:	bd38      	pop	{r3, r4, r5, pc}
 8007214:	200004b4 	.word	0x200004b4

08007218 <_write_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4d07      	ldr	r5, [pc, #28]	@ (8007238 <_write_r+0x20>)
 800721c:	4604      	mov	r4, r0
 800721e:	4608      	mov	r0, r1
 8007220:	4611      	mov	r1, r2
 8007222:	2200      	movs	r2, #0
 8007224:	602a      	str	r2, [r5, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	f7fa fecc 	bl	8001fc4 <_write>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_write_r+0x1e>
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	b103      	cbz	r3, 8007236 <_write_r+0x1e>
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	200004b4 	.word	0x200004b4

0800723c <__errno>:
 800723c:	4b01      	ldr	r3, [pc, #4]	@ (8007244 <__errno+0x8>)
 800723e:	6818      	ldr	r0, [r3, #0]
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	20000020 	.word	0x20000020

08007248 <__libc_init_array>:
 8007248:	b570      	push	{r4, r5, r6, lr}
 800724a:	4d0d      	ldr	r5, [pc, #52]	@ (8007280 <__libc_init_array+0x38>)
 800724c:	4c0d      	ldr	r4, [pc, #52]	@ (8007284 <__libc_init_array+0x3c>)
 800724e:	1b64      	subs	r4, r4, r5
 8007250:	10a4      	asrs	r4, r4, #2
 8007252:	2600      	movs	r6, #0
 8007254:	42a6      	cmp	r6, r4
 8007256:	d109      	bne.n	800726c <__libc_init_array+0x24>
 8007258:	4d0b      	ldr	r5, [pc, #44]	@ (8007288 <__libc_init_array+0x40>)
 800725a:	4c0c      	ldr	r4, [pc, #48]	@ (800728c <__libc_init_array+0x44>)
 800725c:	f000 fda6 	bl	8007dac <_init>
 8007260:	1b64      	subs	r4, r4, r5
 8007262:	10a4      	asrs	r4, r4, #2
 8007264:	2600      	movs	r6, #0
 8007266:	42a6      	cmp	r6, r4
 8007268:	d105      	bne.n	8007276 <__libc_init_array+0x2e>
 800726a:	bd70      	pop	{r4, r5, r6, pc}
 800726c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007270:	4798      	blx	r3
 8007272:	3601      	adds	r6, #1
 8007274:	e7ee      	b.n	8007254 <__libc_init_array+0xc>
 8007276:	f855 3b04 	ldr.w	r3, [r5], #4
 800727a:	4798      	blx	r3
 800727c:	3601      	adds	r6, #1
 800727e:	e7f2      	b.n	8007266 <__libc_init_array+0x1e>
 8007280:	08008028 	.word	0x08008028
 8007284:	08008028 	.word	0x08008028
 8007288:	08008028 	.word	0x08008028
 800728c:	0800802c 	.word	0x0800802c

08007290 <__retarget_lock_init_recursive>:
 8007290:	4770      	bx	lr

08007292 <__retarget_lock_acquire_recursive>:
 8007292:	4770      	bx	lr

08007294 <__retarget_lock_release_recursive>:
 8007294:	4770      	bx	lr
	...

08007298 <__assert_func>:
 8007298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800729a:	4614      	mov	r4, r2
 800729c:	461a      	mov	r2, r3
 800729e:	4b09      	ldr	r3, [pc, #36]	@ (80072c4 <__assert_func+0x2c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4605      	mov	r5, r0
 80072a4:	68d8      	ldr	r0, [r3, #12]
 80072a6:	b14c      	cbz	r4, 80072bc <__assert_func+0x24>
 80072a8:	4b07      	ldr	r3, [pc, #28]	@ (80072c8 <__assert_func+0x30>)
 80072aa:	9100      	str	r1, [sp, #0]
 80072ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072b0:	4906      	ldr	r1, [pc, #24]	@ (80072cc <__assert_func+0x34>)
 80072b2:	462b      	mov	r3, r5
 80072b4:	f000 fc88 	bl	8007bc8 <fiprintf>
 80072b8:	f000 fd2c 	bl	8007d14 <abort>
 80072bc:	4b04      	ldr	r3, [pc, #16]	@ (80072d0 <__assert_func+0x38>)
 80072be:	461c      	mov	r4, r3
 80072c0:	e7f3      	b.n	80072aa <__assert_func+0x12>
 80072c2:	bf00      	nop
 80072c4:	20000020 	.word	0x20000020
 80072c8:	08007fae 	.word	0x08007fae
 80072cc:	08007fbb 	.word	0x08007fbb
 80072d0:	08007fe9 	.word	0x08007fe9

080072d4 <_free_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4605      	mov	r5, r0
 80072d8:	2900      	cmp	r1, #0
 80072da:	d041      	beq.n	8007360 <_free_r+0x8c>
 80072dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072e0:	1f0c      	subs	r4, r1, #4
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	bfb8      	it	lt
 80072e6:	18e4      	addlt	r4, r4, r3
 80072e8:	f000 f8e8 	bl	80074bc <__malloc_lock>
 80072ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007364 <_free_r+0x90>)
 80072ee:	6813      	ldr	r3, [r2, #0]
 80072f0:	b933      	cbnz	r3, 8007300 <_free_r+0x2c>
 80072f2:	6063      	str	r3, [r4, #4]
 80072f4:	6014      	str	r4, [r2, #0]
 80072f6:	4628      	mov	r0, r5
 80072f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072fc:	f000 b8e4 	b.w	80074c8 <__malloc_unlock>
 8007300:	42a3      	cmp	r3, r4
 8007302:	d908      	bls.n	8007316 <_free_r+0x42>
 8007304:	6820      	ldr	r0, [r4, #0]
 8007306:	1821      	adds	r1, r4, r0
 8007308:	428b      	cmp	r3, r1
 800730a:	bf01      	itttt	eq
 800730c:	6819      	ldreq	r1, [r3, #0]
 800730e:	685b      	ldreq	r3, [r3, #4]
 8007310:	1809      	addeq	r1, r1, r0
 8007312:	6021      	streq	r1, [r4, #0]
 8007314:	e7ed      	b.n	80072f2 <_free_r+0x1e>
 8007316:	461a      	mov	r2, r3
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	b10b      	cbz	r3, 8007320 <_free_r+0x4c>
 800731c:	42a3      	cmp	r3, r4
 800731e:	d9fa      	bls.n	8007316 <_free_r+0x42>
 8007320:	6811      	ldr	r1, [r2, #0]
 8007322:	1850      	adds	r0, r2, r1
 8007324:	42a0      	cmp	r0, r4
 8007326:	d10b      	bne.n	8007340 <_free_r+0x6c>
 8007328:	6820      	ldr	r0, [r4, #0]
 800732a:	4401      	add	r1, r0
 800732c:	1850      	adds	r0, r2, r1
 800732e:	4283      	cmp	r3, r0
 8007330:	6011      	str	r1, [r2, #0]
 8007332:	d1e0      	bne.n	80072f6 <_free_r+0x22>
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	6053      	str	r3, [r2, #4]
 800733a:	4408      	add	r0, r1
 800733c:	6010      	str	r0, [r2, #0]
 800733e:	e7da      	b.n	80072f6 <_free_r+0x22>
 8007340:	d902      	bls.n	8007348 <_free_r+0x74>
 8007342:	230c      	movs	r3, #12
 8007344:	602b      	str	r3, [r5, #0]
 8007346:	e7d6      	b.n	80072f6 <_free_r+0x22>
 8007348:	6820      	ldr	r0, [r4, #0]
 800734a:	1821      	adds	r1, r4, r0
 800734c:	428b      	cmp	r3, r1
 800734e:	bf04      	itt	eq
 8007350:	6819      	ldreq	r1, [r3, #0]
 8007352:	685b      	ldreq	r3, [r3, #4]
 8007354:	6063      	str	r3, [r4, #4]
 8007356:	bf04      	itt	eq
 8007358:	1809      	addeq	r1, r1, r0
 800735a:	6021      	streq	r1, [r4, #0]
 800735c:	6054      	str	r4, [r2, #4]
 800735e:	e7ca      	b.n	80072f6 <_free_r+0x22>
 8007360:	bd38      	pop	{r3, r4, r5, pc}
 8007362:	bf00      	nop
 8007364:	200004c0 	.word	0x200004c0

08007368 <malloc>:
 8007368:	4b02      	ldr	r3, [pc, #8]	@ (8007374 <malloc+0xc>)
 800736a:	4601      	mov	r1, r0
 800736c:	6818      	ldr	r0, [r3, #0]
 800736e:	f000 b825 	b.w	80073bc <_malloc_r>
 8007372:	bf00      	nop
 8007374:	20000020 	.word	0x20000020

08007378 <sbrk_aligned>:
 8007378:	b570      	push	{r4, r5, r6, lr}
 800737a:	4e0f      	ldr	r6, [pc, #60]	@ (80073b8 <sbrk_aligned+0x40>)
 800737c:	460c      	mov	r4, r1
 800737e:	6831      	ldr	r1, [r6, #0]
 8007380:	4605      	mov	r5, r0
 8007382:	b911      	cbnz	r1, 800738a <sbrk_aligned+0x12>
 8007384:	f000 fcb6 	bl	8007cf4 <_sbrk_r>
 8007388:	6030      	str	r0, [r6, #0]
 800738a:	4621      	mov	r1, r4
 800738c:	4628      	mov	r0, r5
 800738e:	f000 fcb1 	bl	8007cf4 <_sbrk_r>
 8007392:	1c43      	adds	r3, r0, #1
 8007394:	d103      	bne.n	800739e <sbrk_aligned+0x26>
 8007396:	f04f 34ff 	mov.w	r4, #4294967295
 800739a:	4620      	mov	r0, r4
 800739c:	bd70      	pop	{r4, r5, r6, pc}
 800739e:	1cc4      	adds	r4, r0, #3
 80073a0:	f024 0403 	bic.w	r4, r4, #3
 80073a4:	42a0      	cmp	r0, r4
 80073a6:	d0f8      	beq.n	800739a <sbrk_aligned+0x22>
 80073a8:	1a21      	subs	r1, r4, r0
 80073aa:	4628      	mov	r0, r5
 80073ac:	f000 fca2 	bl	8007cf4 <_sbrk_r>
 80073b0:	3001      	adds	r0, #1
 80073b2:	d1f2      	bne.n	800739a <sbrk_aligned+0x22>
 80073b4:	e7ef      	b.n	8007396 <sbrk_aligned+0x1e>
 80073b6:	bf00      	nop
 80073b8:	200004bc 	.word	0x200004bc

080073bc <_malloc_r>:
 80073bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073c0:	1ccd      	adds	r5, r1, #3
 80073c2:	f025 0503 	bic.w	r5, r5, #3
 80073c6:	3508      	adds	r5, #8
 80073c8:	2d0c      	cmp	r5, #12
 80073ca:	bf38      	it	cc
 80073cc:	250c      	movcc	r5, #12
 80073ce:	2d00      	cmp	r5, #0
 80073d0:	4606      	mov	r6, r0
 80073d2:	db01      	blt.n	80073d8 <_malloc_r+0x1c>
 80073d4:	42a9      	cmp	r1, r5
 80073d6:	d904      	bls.n	80073e2 <_malloc_r+0x26>
 80073d8:	230c      	movs	r3, #12
 80073da:	6033      	str	r3, [r6, #0]
 80073dc:	2000      	movs	r0, #0
 80073de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074b8 <_malloc_r+0xfc>
 80073e6:	f000 f869 	bl	80074bc <__malloc_lock>
 80073ea:	f8d8 3000 	ldr.w	r3, [r8]
 80073ee:	461c      	mov	r4, r3
 80073f0:	bb44      	cbnz	r4, 8007444 <_malloc_r+0x88>
 80073f2:	4629      	mov	r1, r5
 80073f4:	4630      	mov	r0, r6
 80073f6:	f7ff ffbf 	bl	8007378 <sbrk_aligned>
 80073fa:	1c43      	adds	r3, r0, #1
 80073fc:	4604      	mov	r4, r0
 80073fe:	d158      	bne.n	80074b2 <_malloc_r+0xf6>
 8007400:	f8d8 4000 	ldr.w	r4, [r8]
 8007404:	4627      	mov	r7, r4
 8007406:	2f00      	cmp	r7, #0
 8007408:	d143      	bne.n	8007492 <_malloc_r+0xd6>
 800740a:	2c00      	cmp	r4, #0
 800740c:	d04b      	beq.n	80074a6 <_malloc_r+0xea>
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	4639      	mov	r1, r7
 8007412:	4630      	mov	r0, r6
 8007414:	eb04 0903 	add.w	r9, r4, r3
 8007418:	f000 fc6c 	bl	8007cf4 <_sbrk_r>
 800741c:	4581      	cmp	r9, r0
 800741e:	d142      	bne.n	80074a6 <_malloc_r+0xea>
 8007420:	6821      	ldr	r1, [r4, #0]
 8007422:	1a6d      	subs	r5, r5, r1
 8007424:	4629      	mov	r1, r5
 8007426:	4630      	mov	r0, r6
 8007428:	f7ff ffa6 	bl	8007378 <sbrk_aligned>
 800742c:	3001      	adds	r0, #1
 800742e:	d03a      	beq.n	80074a6 <_malloc_r+0xea>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	442b      	add	r3, r5
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	f8d8 3000 	ldr.w	r3, [r8]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	bb62      	cbnz	r2, 8007498 <_malloc_r+0xdc>
 800743e:	f8c8 7000 	str.w	r7, [r8]
 8007442:	e00f      	b.n	8007464 <_malloc_r+0xa8>
 8007444:	6822      	ldr	r2, [r4, #0]
 8007446:	1b52      	subs	r2, r2, r5
 8007448:	d420      	bmi.n	800748c <_malloc_r+0xd0>
 800744a:	2a0b      	cmp	r2, #11
 800744c:	d917      	bls.n	800747e <_malloc_r+0xc2>
 800744e:	1961      	adds	r1, r4, r5
 8007450:	42a3      	cmp	r3, r4
 8007452:	6025      	str	r5, [r4, #0]
 8007454:	bf18      	it	ne
 8007456:	6059      	strne	r1, [r3, #4]
 8007458:	6863      	ldr	r3, [r4, #4]
 800745a:	bf08      	it	eq
 800745c:	f8c8 1000 	streq.w	r1, [r8]
 8007460:	5162      	str	r2, [r4, r5]
 8007462:	604b      	str	r3, [r1, #4]
 8007464:	4630      	mov	r0, r6
 8007466:	f000 f82f 	bl	80074c8 <__malloc_unlock>
 800746a:	f104 000b 	add.w	r0, r4, #11
 800746e:	1d23      	adds	r3, r4, #4
 8007470:	f020 0007 	bic.w	r0, r0, #7
 8007474:	1ac2      	subs	r2, r0, r3
 8007476:	bf1c      	itt	ne
 8007478:	1a1b      	subne	r3, r3, r0
 800747a:	50a3      	strne	r3, [r4, r2]
 800747c:	e7af      	b.n	80073de <_malloc_r+0x22>
 800747e:	6862      	ldr	r2, [r4, #4]
 8007480:	42a3      	cmp	r3, r4
 8007482:	bf0c      	ite	eq
 8007484:	f8c8 2000 	streq.w	r2, [r8]
 8007488:	605a      	strne	r2, [r3, #4]
 800748a:	e7eb      	b.n	8007464 <_malloc_r+0xa8>
 800748c:	4623      	mov	r3, r4
 800748e:	6864      	ldr	r4, [r4, #4]
 8007490:	e7ae      	b.n	80073f0 <_malloc_r+0x34>
 8007492:	463c      	mov	r4, r7
 8007494:	687f      	ldr	r7, [r7, #4]
 8007496:	e7b6      	b.n	8007406 <_malloc_r+0x4a>
 8007498:	461a      	mov	r2, r3
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	42a3      	cmp	r3, r4
 800749e:	d1fb      	bne.n	8007498 <_malloc_r+0xdc>
 80074a0:	2300      	movs	r3, #0
 80074a2:	6053      	str	r3, [r2, #4]
 80074a4:	e7de      	b.n	8007464 <_malloc_r+0xa8>
 80074a6:	230c      	movs	r3, #12
 80074a8:	6033      	str	r3, [r6, #0]
 80074aa:	4630      	mov	r0, r6
 80074ac:	f000 f80c 	bl	80074c8 <__malloc_unlock>
 80074b0:	e794      	b.n	80073dc <_malloc_r+0x20>
 80074b2:	6005      	str	r5, [r0, #0]
 80074b4:	e7d6      	b.n	8007464 <_malloc_r+0xa8>
 80074b6:	bf00      	nop
 80074b8:	200004c0 	.word	0x200004c0

080074bc <__malloc_lock>:
 80074bc:	4801      	ldr	r0, [pc, #4]	@ (80074c4 <__malloc_lock+0x8>)
 80074be:	f7ff bee8 	b.w	8007292 <__retarget_lock_acquire_recursive>
 80074c2:	bf00      	nop
 80074c4:	200004b8 	.word	0x200004b8

080074c8 <__malloc_unlock>:
 80074c8:	4801      	ldr	r0, [pc, #4]	@ (80074d0 <__malloc_unlock+0x8>)
 80074ca:	f7ff bee3 	b.w	8007294 <__retarget_lock_release_recursive>
 80074ce:	bf00      	nop
 80074d0:	200004b8 	.word	0x200004b8

080074d4 <__sfputc_r>:
 80074d4:	6893      	ldr	r3, [r2, #8]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	2b00      	cmp	r3, #0
 80074da:	b410      	push	{r4}
 80074dc:	6093      	str	r3, [r2, #8]
 80074de:	da08      	bge.n	80074f2 <__sfputc_r+0x1e>
 80074e0:	6994      	ldr	r4, [r2, #24]
 80074e2:	42a3      	cmp	r3, r4
 80074e4:	db01      	blt.n	80074ea <__sfputc_r+0x16>
 80074e6:	290a      	cmp	r1, #10
 80074e8:	d103      	bne.n	80074f2 <__sfputc_r+0x1e>
 80074ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074ee:	f7ff bd66 	b.w	8006fbe <__swbuf_r>
 80074f2:	6813      	ldr	r3, [r2, #0]
 80074f4:	1c58      	adds	r0, r3, #1
 80074f6:	6010      	str	r0, [r2, #0]
 80074f8:	7019      	strb	r1, [r3, #0]
 80074fa:	4608      	mov	r0, r1
 80074fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007500:	4770      	bx	lr

08007502 <__sfputs_r>:
 8007502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007504:	4606      	mov	r6, r0
 8007506:	460f      	mov	r7, r1
 8007508:	4614      	mov	r4, r2
 800750a:	18d5      	adds	r5, r2, r3
 800750c:	42ac      	cmp	r4, r5
 800750e:	d101      	bne.n	8007514 <__sfputs_r+0x12>
 8007510:	2000      	movs	r0, #0
 8007512:	e007      	b.n	8007524 <__sfputs_r+0x22>
 8007514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007518:	463a      	mov	r2, r7
 800751a:	4630      	mov	r0, r6
 800751c:	f7ff ffda 	bl	80074d4 <__sfputc_r>
 8007520:	1c43      	adds	r3, r0, #1
 8007522:	d1f3      	bne.n	800750c <__sfputs_r+0xa>
 8007524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007528 <_vfiprintf_r>:
 8007528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752c:	460d      	mov	r5, r1
 800752e:	b09d      	sub	sp, #116	@ 0x74
 8007530:	4614      	mov	r4, r2
 8007532:	4698      	mov	r8, r3
 8007534:	4606      	mov	r6, r0
 8007536:	b118      	cbz	r0, 8007540 <_vfiprintf_r+0x18>
 8007538:	6a03      	ldr	r3, [r0, #32]
 800753a:	b90b      	cbnz	r3, 8007540 <_vfiprintf_r+0x18>
 800753c:	f7ff fcb4 	bl	8006ea8 <__sinit>
 8007540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007542:	07d9      	lsls	r1, r3, #31
 8007544:	d405      	bmi.n	8007552 <_vfiprintf_r+0x2a>
 8007546:	89ab      	ldrh	r3, [r5, #12]
 8007548:	059a      	lsls	r2, r3, #22
 800754a:	d402      	bmi.n	8007552 <_vfiprintf_r+0x2a>
 800754c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800754e:	f7ff fea0 	bl	8007292 <__retarget_lock_acquire_recursive>
 8007552:	89ab      	ldrh	r3, [r5, #12]
 8007554:	071b      	lsls	r3, r3, #28
 8007556:	d501      	bpl.n	800755c <_vfiprintf_r+0x34>
 8007558:	692b      	ldr	r3, [r5, #16]
 800755a:	b99b      	cbnz	r3, 8007584 <_vfiprintf_r+0x5c>
 800755c:	4629      	mov	r1, r5
 800755e:	4630      	mov	r0, r6
 8007560:	f7ff fd6c 	bl	800703c <__swsetup_r>
 8007564:	b170      	cbz	r0, 8007584 <_vfiprintf_r+0x5c>
 8007566:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007568:	07dc      	lsls	r4, r3, #31
 800756a:	d504      	bpl.n	8007576 <_vfiprintf_r+0x4e>
 800756c:	f04f 30ff 	mov.w	r0, #4294967295
 8007570:	b01d      	add	sp, #116	@ 0x74
 8007572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007576:	89ab      	ldrh	r3, [r5, #12]
 8007578:	0598      	lsls	r0, r3, #22
 800757a:	d4f7      	bmi.n	800756c <_vfiprintf_r+0x44>
 800757c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800757e:	f7ff fe89 	bl	8007294 <__retarget_lock_release_recursive>
 8007582:	e7f3      	b.n	800756c <_vfiprintf_r+0x44>
 8007584:	2300      	movs	r3, #0
 8007586:	9309      	str	r3, [sp, #36]	@ 0x24
 8007588:	2320      	movs	r3, #32
 800758a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800758e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007592:	2330      	movs	r3, #48	@ 0x30
 8007594:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007744 <_vfiprintf_r+0x21c>
 8007598:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800759c:	f04f 0901 	mov.w	r9, #1
 80075a0:	4623      	mov	r3, r4
 80075a2:	469a      	mov	sl, r3
 80075a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075a8:	b10a      	cbz	r2, 80075ae <_vfiprintf_r+0x86>
 80075aa:	2a25      	cmp	r2, #37	@ 0x25
 80075ac:	d1f9      	bne.n	80075a2 <_vfiprintf_r+0x7a>
 80075ae:	ebba 0b04 	subs.w	fp, sl, r4
 80075b2:	d00b      	beq.n	80075cc <_vfiprintf_r+0xa4>
 80075b4:	465b      	mov	r3, fp
 80075b6:	4622      	mov	r2, r4
 80075b8:	4629      	mov	r1, r5
 80075ba:	4630      	mov	r0, r6
 80075bc:	f7ff ffa1 	bl	8007502 <__sfputs_r>
 80075c0:	3001      	adds	r0, #1
 80075c2:	f000 80a7 	beq.w	8007714 <_vfiprintf_r+0x1ec>
 80075c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075c8:	445a      	add	r2, fp
 80075ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80075cc:	f89a 3000 	ldrb.w	r3, [sl]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 809f 	beq.w	8007714 <_vfiprintf_r+0x1ec>
 80075d6:	2300      	movs	r3, #0
 80075d8:	f04f 32ff 	mov.w	r2, #4294967295
 80075dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075e0:	f10a 0a01 	add.w	sl, sl, #1
 80075e4:	9304      	str	r3, [sp, #16]
 80075e6:	9307      	str	r3, [sp, #28]
 80075e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80075ee:	4654      	mov	r4, sl
 80075f0:	2205      	movs	r2, #5
 80075f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f6:	4853      	ldr	r0, [pc, #332]	@ (8007744 <_vfiprintf_r+0x21c>)
 80075f8:	f7f8 fdf2 	bl	80001e0 <memchr>
 80075fc:	9a04      	ldr	r2, [sp, #16]
 80075fe:	b9d8      	cbnz	r0, 8007638 <_vfiprintf_r+0x110>
 8007600:	06d1      	lsls	r1, r2, #27
 8007602:	bf44      	itt	mi
 8007604:	2320      	movmi	r3, #32
 8007606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800760a:	0713      	lsls	r3, r2, #28
 800760c:	bf44      	itt	mi
 800760e:	232b      	movmi	r3, #43	@ 0x2b
 8007610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007614:	f89a 3000 	ldrb.w	r3, [sl]
 8007618:	2b2a      	cmp	r3, #42	@ 0x2a
 800761a:	d015      	beq.n	8007648 <_vfiprintf_r+0x120>
 800761c:	9a07      	ldr	r2, [sp, #28]
 800761e:	4654      	mov	r4, sl
 8007620:	2000      	movs	r0, #0
 8007622:	f04f 0c0a 	mov.w	ip, #10
 8007626:	4621      	mov	r1, r4
 8007628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800762c:	3b30      	subs	r3, #48	@ 0x30
 800762e:	2b09      	cmp	r3, #9
 8007630:	d94b      	bls.n	80076ca <_vfiprintf_r+0x1a2>
 8007632:	b1b0      	cbz	r0, 8007662 <_vfiprintf_r+0x13a>
 8007634:	9207      	str	r2, [sp, #28]
 8007636:	e014      	b.n	8007662 <_vfiprintf_r+0x13a>
 8007638:	eba0 0308 	sub.w	r3, r0, r8
 800763c:	fa09 f303 	lsl.w	r3, r9, r3
 8007640:	4313      	orrs	r3, r2
 8007642:	9304      	str	r3, [sp, #16]
 8007644:	46a2      	mov	sl, r4
 8007646:	e7d2      	b.n	80075ee <_vfiprintf_r+0xc6>
 8007648:	9b03      	ldr	r3, [sp, #12]
 800764a:	1d19      	adds	r1, r3, #4
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	9103      	str	r1, [sp, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	bfbb      	ittet	lt
 8007654:	425b      	neglt	r3, r3
 8007656:	f042 0202 	orrlt.w	r2, r2, #2
 800765a:	9307      	strge	r3, [sp, #28]
 800765c:	9307      	strlt	r3, [sp, #28]
 800765e:	bfb8      	it	lt
 8007660:	9204      	strlt	r2, [sp, #16]
 8007662:	7823      	ldrb	r3, [r4, #0]
 8007664:	2b2e      	cmp	r3, #46	@ 0x2e
 8007666:	d10a      	bne.n	800767e <_vfiprintf_r+0x156>
 8007668:	7863      	ldrb	r3, [r4, #1]
 800766a:	2b2a      	cmp	r3, #42	@ 0x2a
 800766c:	d132      	bne.n	80076d4 <_vfiprintf_r+0x1ac>
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	1d1a      	adds	r2, r3, #4
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	9203      	str	r2, [sp, #12]
 8007676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800767a:	3402      	adds	r4, #2
 800767c:	9305      	str	r3, [sp, #20]
 800767e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007754 <_vfiprintf_r+0x22c>
 8007682:	7821      	ldrb	r1, [r4, #0]
 8007684:	2203      	movs	r2, #3
 8007686:	4650      	mov	r0, sl
 8007688:	f7f8 fdaa 	bl	80001e0 <memchr>
 800768c:	b138      	cbz	r0, 800769e <_vfiprintf_r+0x176>
 800768e:	9b04      	ldr	r3, [sp, #16]
 8007690:	eba0 000a 	sub.w	r0, r0, sl
 8007694:	2240      	movs	r2, #64	@ 0x40
 8007696:	4082      	lsls	r2, r0
 8007698:	4313      	orrs	r3, r2
 800769a:	3401      	adds	r4, #1
 800769c:	9304      	str	r3, [sp, #16]
 800769e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a2:	4829      	ldr	r0, [pc, #164]	@ (8007748 <_vfiprintf_r+0x220>)
 80076a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076a8:	2206      	movs	r2, #6
 80076aa:	f7f8 fd99 	bl	80001e0 <memchr>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d03f      	beq.n	8007732 <_vfiprintf_r+0x20a>
 80076b2:	4b26      	ldr	r3, [pc, #152]	@ (800774c <_vfiprintf_r+0x224>)
 80076b4:	bb1b      	cbnz	r3, 80076fe <_vfiprintf_r+0x1d6>
 80076b6:	9b03      	ldr	r3, [sp, #12]
 80076b8:	3307      	adds	r3, #7
 80076ba:	f023 0307 	bic.w	r3, r3, #7
 80076be:	3308      	adds	r3, #8
 80076c0:	9303      	str	r3, [sp, #12]
 80076c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c4:	443b      	add	r3, r7
 80076c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80076c8:	e76a      	b.n	80075a0 <_vfiprintf_r+0x78>
 80076ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ce:	460c      	mov	r4, r1
 80076d0:	2001      	movs	r0, #1
 80076d2:	e7a8      	b.n	8007626 <_vfiprintf_r+0xfe>
 80076d4:	2300      	movs	r3, #0
 80076d6:	3401      	adds	r4, #1
 80076d8:	9305      	str	r3, [sp, #20]
 80076da:	4619      	mov	r1, r3
 80076dc:	f04f 0c0a 	mov.w	ip, #10
 80076e0:	4620      	mov	r0, r4
 80076e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076e6:	3a30      	subs	r2, #48	@ 0x30
 80076e8:	2a09      	cmp	r2, #9
 80076ea:	d903      	bls.n	80076f4 <_vfiprintf_r+0x1cc>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0c6      	beq.n	800767e <_vfiprintf_r+0x156>
 80076f0:	9105      	str	r1, [sp, #20]
 80076f2:	e7c4      	b.n	800767e <_vfiprintf_r+0x156>
 80076f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80076f8:	4604      	mov	r4, r0
 80076fa:	2301      	movs	r3, #1
 80076fc:	e7f0      	b.n	80076e0 <_vfiprintf_r+0x1b8>
 80076fe:	ab03      	add	r3, sp, #12
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	462a      	mov	r2, r5
 8007704:	4b12      	ldr	r3, [pc, #72]	@ (8007750 <_vfiprintf_r+0x228>)
 8007706:	a904      	add	r1, sp, #16
 8007708:	4630      	mov	r0, r6
 800770a:	f3af 8000 	nop.w
 800770e:	4607      	mov	r7, r0
 8007710:	1c78      	adds	r0, r7, #1
 8007712:	d1d6      	bne.n	80076c2 <_vfiprintf_r+0x19a>
 8007714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007716:	07d9      	lsls	r1, r3, #31
 8007718:	d405      	bmi.n	8007726 <_vfiprintf_r+0x1fe>
 800771a:	89ab      	ldrh	r3, [r5, #12]
 800771c:	059a      	lsls	r2, r3, #22
 800771e:	d402      	bmi.n	8007726 <_vfiprintf_r+0x1fe>
 8007720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007722:	f7ff fdb7 	bl	8007294 <__retarget_lock_release_recursive>
 8007726:	89ab      	ldrh	r3, [r5, #12]
 8007728:	065b      	lsls	r3, r3, #25
 800772a:	f53f af1f 	bmi.w	800756c <_vfiprintf_r+0x44>
 800772e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007730:	e71e      	b.n	8007570 <_vfiprintf_r+0x48>
 8007732:	ab03      	add	r3, sp, #12
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	462a      	mov	r2, r5
 8007738:	4b05      	ldr	r3, [pc, #20]	@ (8007750 <_vfiprintf_r+0x228>)
 800773a:	a904      	add	r1, sp, #16
 800773c:	4630      	mov	r0, r6
 800773e:	f000 f879 	bl	8007834 <_printf_i>
 8007742:	e7e4      	b.n	800770e <_vfiprintf_r+0x1e6>
 8007744:	08007fea 	.word	0x08007fea
 8007748:	08007ff4 	.word	0x08007ff4
 800774c:	00000000 	.word	0x00000000
 8007750:	08007503 	.word	0x08007503
 8007754:	08007ff0 	.word	0x08007ff0

08007758 <_printf_common>:
 8007758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800775c:	4616      	mov	r6, r2
 800775e:	4698      	mov	r8, r3
 8007760:	688a      	ldr	r2, [r1, #8]
 8007762:	690b      	ldr	r3, [r1, #16]
 8007764:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007768:	4293      	cmp	r3, r2
 800776a:	bfb8      	it	lt
 800776c:	4613      	movlt	r3, r2
 800776e:	6033      	str	r3, [r6, #0]
 8007770:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007774:	4607      	mov	r7, r0
 8007776:	460c      	mov	r4, r1
 8007778:	b10a      	cbz	r2, 800777e <_printf_common+0x26>
 800777a:	3301      	adds	r3, #1
 800777c:	6033      	str	r3, [r6, #0]
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	0699      	lsls	r1, r3, #26
 8007782:	bf42      	ittt	mi
 8007784:	6833      	ldrmi	r3, [r6, #0]
 8007786:	3302      	addmi	r3, #2
 8007788:	6033      	strmi	r3, [r6, #0]
 800778a:	6825      	ldr	r5, [r4, #0]
 800778c:	f015 0506 	ands.w	r5, r5, #6
 8007790:	d106      	bne.n	80077a0 <_printf_common+0x48>
 8007792:	f104 0a19 	add.w	sl, r4, #25
 8007796:	68e3      	ldr	r3, [r4, #12]
 8007798:	6832      	ldr	r2, [r6, #0]
 800779a:	1a9b      	subs	r3, r3, r2
 800779c:	42ab      	cmp	r3, r5
 800779e:	dc26      	bgt.n	80077ee <_printf_common+0x96>
 80077a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077a4:	6822      	ldr	r2, [r4, #0]
 80077a6:	3b00      	subs	r3, #0
 80077a8:	bf18      	it	ne
 80077aa:	2301      	movne	r3, #1
 80077ac:	0692      	lsls	r2, r2, #26
 80077ae:	d42b      	bmi.n	8007808 <_printf_common+0xb0>
 80077b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077b4:	4641      	mov	r1, r8
 80077b6:	4638      	mov	r0, r7
 80077b8:	47c8      	blx	r9
 80077ba:	3001      	adds	r0, #1
 80077bc:	d01e      	beq.n	80077fc <_printf_common+0xa4>
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	6922      	ldr	r2, [r4, #16]
 80077c2:	f003 0306 	and.w	r3, r3, #6
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	bf02      	ittt	eq
 80077ca:	68e5      	ldreq	r5, [r4, #12]
 80077cc:	6833      	ldreq	r3, [r6, #0]
 80077ce:	1aed      	subeq	r5, r5, r3
 80077d0:	68a3      	ldr	r3, [r4, #8]
 80077d2:	bf0c      	ite	eq
 80077d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077d8:	2500      	movne	r5, #0
 80077da:	4293      	cmp	r3, r2
 80077dc:	bfc4      	itt	gt
 80077de:	1a9b      	subgt	r3, r3, r2
 80077e0:	18ed      	addgt	r5, r5, r3
 80077e2:	2600      	movs	r6, #0
 80077e4:	341a      	adds	r4, #26
 80077e6:	42b5      	cmp	r5, r6
 80077e8:	d11a      	bne.n	8007820 <_printf_common+0xc8>
 80077ea:	2000      	movs	r0, #0
 80077ec:	e008      	b.n	8007800 <_printf_common+0xa8>
 80077ee:	2301      	movs	r3, #1
 80077f0:	4652      	mov	r2, sl
 80077f2:	4641      	mov	r1, r8
 80077f4:	4638      	mov	r0, r7
 80077f6:	47c8      	blx	r9
 80077f8:	3001      	adds	r0, #1
 80077fa:	d103      	bne.n	8007804 <_printf_common+0xac>
 80077fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007804:	3501      	adds	r5, #1
 8007806:	e7c6      	b.n	8007796 <_printf_common+0x3e>
 8007808:	18e1      	adds	r1, r4, r3
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	2030      	movs	r0, #48	@ 0x30
 800780e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007812:	4422      	add	r2, r4
 8007814:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007818:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800781c:	3302      	adds	r3, #2
 800781e:	e7c7      	b.n	80077b0 <_printf_common+0x58>
 8007820:	2301      	movs	r3, #1
 8007822:	4622      	mov	r2, r4
 8007824:	4641      	mov	r1, r8
 8007826:	4638      	mov	r0, r7
 8007828:	47c8      	blx	r9
 800782a:	3001      	adds	r0, #1
 800782c:	d0e6      	beq.n	80077fc <_printf_common+0xa4>
 800782e:	3601      	adds	r6, #1
 8007830:	e7d9      	b.n	80077e6 <_printf_common+0x8e>
	...

08007834 <_printf_i>:
 8007834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007838:	7e0f      	ldrb	r7, [r1, #24]
 800783a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800783c:	2f78      	cmp	r7, #120	@ 0x78
 800783e:	4691      	mov	r9, r2
 8007840:	4680      	mov	r8, r0
 8007842:	460c      	mov	r4, r1
 8007844:	469a      	mov	sl, r3
 8007846:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800784a:	d807      	bhi.n	800785c <_printf_i+0x28>
 800784c:	2f62      	cmp	r7, #98	@ 0x62
 800784e:	d80a      	bhi.n	8007866 <_printf_i+0x32>
 8007850:	2f00      	cmp	r7, #0
 8007852:	f000 80d1 	beq.w	80079f8 <_printf_i+0x1c4>
 8007856:	2f58      	cmp	r7, #88	@ 0x58
 8007858:	f000 80b8 	beq.w	80079cc <_printf_i+0x198>
 800785c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007860:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007864:	e03a      	b.n	80078dc <_printf_i+0xa8>
 8007866:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800786a:	2b15      	cmp	r3, #21
 800786c:	d8f6      	bhi.n	800785c <_printf_i+0x28>
 800786e:	a101      	add	r1, pc, #4	@ (adr r1, 8007874 <_printf_i+0x40>)
 8007870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007874:	080078cd 	.word	0x080078cd
 8007878:	080078e1 	.word	0x080078e1
 800787c:	0800785d 	.word	0x0800785d
 8007880:	0800785d 	.word	0x0800785d
 8007884:	0800785d 	.word	0x0800785d
 8007888:	0800785d 	.word	0x0800785d
 800788c:	080078e1 	.word	0x080078e1
 8007890:	0800785d 	.word	0x0800785d
 8007894:	0800785d 	.word	0x0800785d
 8007898:	0800785d 	.word	0x0800785d
 800789c:	0800785d 	.word	0x0800785d
 80078a0:	080079df 	.word	0x080079df
 80078a4:	0800790b 	.word	0x0800790b
 80078a8:	08007999 	.word	0x08007999
 80078ac:	0800785d 	.word	0x0800785d
 80078b0:	0800785d 	.word	0x0800785d
 80078b4:	08007a01 	.word	0x08007a01
 80078b8:	0800785d 	.word	0x0800785d
 80078bc:	0800790b 	.word	0x0800790b
 80078c0:	0800785d 	.word	0x0800785d
 80078c4:	0800785d 	.word	0x0800785d
 80078c8:	080079a1 	.word	0x080079a1
 80078cc:	6833      	ldr	r3, [r6, #0]
 80078ce:	1d1a      	adds	r2, r3, #4
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6032      	str	r2, [r6, #0]
 80078d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078dc:	2301      	movs	r3, #1
 80078de:	e09c      	b.n	8007a1a <_printf_i+0x1e6>
 80078e0:	6833      	ldr	r3, [r6, #0]
 80078e2:	6820      	ldr	r0, [r4, #0]
 80078e4:	1d19      	adds	r1, r3, #4
 80078e6:	6031      	str	r1, [r6, #0]
 80078e8:	0606      	lsls	r6, r0, #24
 80078ea:	d501      	bpl.n	80078f0 <_printf_i+0xbc>
 80078ec:	681d      	ldr	r5, [r3, #0]
 80078ee:	e003      	b.n	80078f8 <_printf_i+0xc4>
 80078f0:	0645      	lsls	r5, r0, #25
 80078f2:	d5fb      	bpl.n	80078ec <_printf_i+0xb8>
 80078f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078f8:	2d00      	cmp	r5, #0
 80078fa:	da03      	bge.n	8007904 <_printf_i+0xd0>
 80078fc:	232d      	movs	r3, #45	@ 0x2d
 80078fe:	426d      	negs	r5, r5
 8007900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007904:	4858      	ldr	r0, [pc, #352]	@ (8007a68 <_printf_i+0x234>)
 8007906:	230a      	movs	r3, #10
 8007908:	e011      	b.n	800792e <_printf_i+0xfa>
 800790a:	6821      	ldr	r1, [r4, #0]
 800790c:	6833      	ldr	r3, [r6, #0]
 800790e:	0608      	lsls	r0, r1, #24
 8007910:	f853 5b04 	ldr.w	r5, [r3], #4
 8007914:	d402      	bmi.n	800791c <_printf_i+0xe8>
 8007916:	0649      	lsls	r1, r1, #25
 8007918:	bf48      	it	mi
 800791a:	b2ad      	uxthmi	r5, r5
 800791c:	2f6f      	cmp	r7, #111	@ 0x6f
 800791e:	4852      	ldr	r0, [pc, #328]	@ (8007a68 <_printf_i+0x234>)
 8007920:	6033      	str	r3, [r6, #0]
 8007922:	bf14      	ite	ne
 8007924:	230a      	movne	r3, #10
 8007926:	2308      	moveq	r3, #8
 8007928:	2100      	movs	r1, #0
 800792a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800792e:	6866      	ldr	r6, [r4, #4]
 8007930:	60a6      	str	r6, [r4, #8]
 8007932:	2e00      	cmp	r6, #0
 8007934:	db05      	blt.n	8007942 <_printf_i+0x10e>
 8007936:	6821      	ldr	r1, [r4, #0]
 8007938:	432e      	orrs	r6, r5
 800793a:	f021 0104 	bic.w	r1, r1, #4
 800793e:	6021      	str	r1, [r4, #0]
 8007940:	d04b      	beq.n	80079da <_printf_i+0x1a6>
 8007942:	4616      	mov	r6, r2
 8007944:	fbb5 f1f3 	udiv	r1, r5, r3
 8007948:	fb03 5711 	mls	r7, r3, r1, r5
 800794c:	5dc7      	ldrb	r7, [r0, r7]
 800794e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007952:	462f      	mov	r7, r5
 8007954:	42bb      	cmp	r3, r7
 8007956:	460d      	mov	r5, r1
 8007958:	d9f4      	bls.n	8007944 <_printf_i+0x110>
 800795a:	2b08      	cmp	r3, #8
 800795c:	d10b      	bne.n	8007976 <_printf_i+0x142>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	07df      	lsls	r7, r3, #31
 8007962:	d508      	bpl.n	8007976 <_printf_i+0x142>
 8007964:	6923      	ldr	r3, [r4, #16]
 8007966:	6861      	ldr	r1, [r4, #4]
 8007968:	4299      	cmp	r1, r3
 800796a:	bfde      	ittt	le
 800796c:	2330      	movle	r3, #48	@ 0x30
 800796e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007972:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007976:	1b92      	subs	r2, r2, r6
 8007978:	6122      	str	r2, [r4, #16]
 800797a:	f8cd a000 	str.w	sl, [sp]
 800797e:	464b      	mov	r3, r9
 8007980:	aa03      	add	r2, sp, #12
 8007982:	4621      	mov	r1, r4
 8007984:	4640      	mov	r0, r8
 8007986:	f7ff fee7 	bl	8007758 <_printf_common>
 800798a:	3001      	adds	r0, #1
 800798c:	d14a      	bne.n	8007a24 <_printf_i+0x1f0>
 800798e:	f04f 30ff 	mov.w	r0, #4294967295
 8007992:	b004      	add	sp, #16
 8007994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	f043 0320 	orr.w	r3, r3, #32
 800799e:	6023      	str	r3, [r4, #0]
 80079a0:	4832      	ldr	r0, [pc, #200]	@ (8007a6c <_printf_i+0x238>)
 80079a2:	2778      	movs	r7, #120	@ 0x78
 80079a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	6831      	ldr	r1, [r6, #0]
 80079ac:	061f      	lsls	r7, r3, #24
 80079ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80079b2:	d402      	bmi.n	80079ba <_printf_i+0x186>
 80079b4:	065f      	lsls	r7, r3, #25
 80079b6:	bf48      	it	mi
 80079b8:	b2ad      	uxthmi	r5, r5
 80079ba:	6031      	str	r1, [r6, #0]
 80079bc:	07d9      	lsls	r1, r3, #31
 80079be:	bf44      	itt	mi
 80079c0:	f043 0320 	orrmi.w	r3, r3, #32
 80079c4:	6023      	strmi	r3, [r4, #0]
 80079c6:	b11d      	cbz	r5, 80079d0 <_printf_i+0x19c>
 80079c8:	2310      	movs	r3, #16
 80079ca:	e7ad      	b.n	8007928 <_printf_i+0xf4>
 80079cc:	4826      	ldr	r0, [pc, #152]	@ (8007a68 <_printf_i+0x234>)
 80079ce:	e7e9      	b.n	80079a4 <_printf_i+0x170>
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	f023 0320 	bic.w	r3, r3, #32
 80079d6:	6023      	str	r3, [r4, #0]
 80079d8:	e7f6      	b.n	80079c8 <_printf_i+0x194>
 80079da:	4616      	mov	r6, r2
 80079dc:	e7bd      	b.n	800795a <_printf_i+0x126>
 80079de:	6833      	ldr	r3, [r6, #0]
 80079e0:	6825      	ldr	r5, [r4, #0]
 80079e2:	6961      	ldr	r1, [r4, #20]
 80079e4:	1d18      	adds	r0, r3, #4
 80079e6:	6030      	str	r0, [r6, #0]
 80079e8:	062e      	lsls	r6, r5, #24
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	d501      	bpl.n	80079f2 <_printf_i+0x1be>
 80079ee:	6019      	str	r1, [r3, #0]
 80079f0:	e002      	b.n	80079f8 <_printf_i+0x1c4>
 80079f2:	0668      	lsls	r0, r5, #25
 80079f4:	d5fb      	bpl.n	80079ee <_printf_i+0x1ba>
 80079f6:	8019      	strh	r1, [r3, #0]
 80079f8:	2300      	movs	r3, #0
 80079fa:	6123      	str	r3, [r4, #16]
 80079fc:	4616      	mov	r6, r2
 80079fe:	e7bc      	b.n	800797a <_printf_i+0x146>
 8007a00:	6833      	ldr	r3, [r6, #0]
 8007a02:	1d1a      	adds	r2, r3, #4
 8007a04:	6032      	str	r2, [r6, #0]
 8007a06:	681e      	ldr	r6, [r3, #0]
 8007a08:	6862      	ldr	r2, [r4, #4]
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f7f8 fbe7 	bl	80001e0 <memchr>
 8007a12:	b108      	cbz	r0, 8007a18 <_printf_i+0x1e4>
 8007a14:	1b80      	subs	r0, r0, r6
 8007a16:	6060      	str	r0, [r4, #4]
 8007a18:	6863      	ldr	r3, [r4, #4]
 8007a1a:	6123      	str	r3, [r4, #16]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a22:	e7aa      	b.n	800797a <_printf_i+0x146>
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	4632      	mov	r2, r6
 8007a28:	4649      	mov	r1, r9
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	47d0      	blx	sl
 8007a2e:	3001      	adds	r0, #1
 8007a30:	d0ad      	beq.n	800798e <_printf_i+0x15a>
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	079b      	lsls	r3, r3, #30
 8007a36:	d413      	bmi.n	8007a60 <_printf_i+0x22c>
 8007a38:	68e0      	ldr	r0, [r4, #12]
 8007a3a:	9b03      	ldr	r3, [sp, #12]
 8007a3c:	4298      	cmp	r0, r3
 8007a3e:	bfb8      	it	lt
 8007a40:	4618      	movlt	r0, r3
 8007a42:	e7a6      	b.n	8007992 <_printf_i+0x15e>
 8007a44:	2301      	movs	r3, #1
 8007a46:	4632      	mov	r2, r6
 8007a48:	4649      	mov	r1, r9
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	47d0      	blx	sl
 8007a4e:	3001      	adds	r0, #1
 8007a50:	d09d      	beq.n	800798e <_printf_i+0x15a>
 8007a52:	3501      	adds	r5, #1
 8007a54:	68e3      	ldr	r3, [r4, #12]
 8007a56:	9903      	ldr	r1, [sp, #12]
 8007a58:	1a5b      	subs	r3, r3, r1
 8007a5a:	42ab      	cmp	r3, r5
 8007a5c:	dcf2      	bgt.n	8007a44 <_printf_i+0x210>
 8007a5e:	e7eb      	b.n	8007a38 <_printf_i+0x204>
 8007a60:	2500      	movs	r5, #0
 8007a62:	f104 0619 	add.w	r6, r4, #25
 8007a66:	e7f5      	b.n	8007a54 <_printf_i+0x220>
 8007a68:	08007ffb 	.word	0x08007ffb
 8007a6c:	0800800c 	.word	0x0800800c

08007a70 <__sflush_r>:
 8007a70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a78:	0716      	lsls	r6, r2, #28
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	d454      	bmi.n	8007b2a <__sflush_r+0xba>
 8007a80:	684b      	ldr	r3, [r1, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	dc02      	bgt.n	8007a8c <__sflush_r+0x1c>
 8007a86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	dd48      	ble.n	8007b1e <__sflush_r+0xae>
 8007a8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a8e:	2e00      	cmp	r6, #0
 8007a90:	d045      	beq.n	8007b1e <__sflush_r+0xae>
 8007a92:	2300      	movs	r3, #0
 8007a94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a98:	682f      	ldr	r7, [r5, #0]
 8007a9a:	6a21      	ldr	r1, [r4, #32]
 8007a9c:	602b      	str	r3, [r5, #0]
 8007a9e:	d030      	beq.n	8007b02 <__sflush_r+0x92>
 8007aa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	0759      	lsls	r1, r3, #29
 8007aa6:	d505      	bpl.n	8007ab4 <__sflush_r+0x44>
 8007aa8:	6863      	ldr	r3, [r4, #4]
 8007aaa:	1ad2      	subs	r2, r2, r3
 8007aac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007aae:	b10b      	cbz	r3, 8007ab4 <__sflush_r+0x44>
 8007ab0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ab2:	1ad2      	subs	r2, r2, r3
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ab8:	6a21      	ldr	r1, [r4, #32]
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b0      	blx	r6
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	d106      	bne.n	8007ad2 <__sflush_r+0x62>
 8007ac4:	6829      	ldr	r1, [r5, #0]
 8007ac6:	291d      	cmp	r1, #29
 8007ac8:	d82b      	bhi.n	8007b22 <__sflush_r+0xb2>
 8007aca:	4a2a      	ldr	r2, [pc, #168]	@ (8007b74 <__sflush_r+0x104>)
 8007acc:	40ca      	lsrs	r2, r1
 8007ace:	07d6      	lsls	r6, r2, #31
 8007ad0:	d527      	bpl.n	8007b22 <__sflush_r+0xb2>
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	6062      	str	r2, [r4, #4]
 8007ad6:	04d9      	lsls	r1, r3, #19
 8007ad8:	6922      	ldr	r2, [r4, #16]
 8007ada:	6022      	str	r2, [r4, #0]
 8007adc:	d504      	bpl.n	8007ae8 <__sflush_r+0x78>
 8007ade:	1c42      	adds	r2, r0, #1
 8007ae0:	d101      	bne.n	8007ae6 <__sflush_r+0x76>
 8007ae2:	682b      	ldr	r3, [r5, #0]
 8007ae4:	b903      	cbnz	r3, 8007ae8 <__sflush_r+0x78>
 8007ae6:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ae8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007aea:	602f      	str	r7, [r5, #0]
 8007aec:	b1b9      	cbz	r1, 8007b1e <__sflush_r+0xae>
 8007aee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007af2:	4299      	cmp	r1, r3
 8007af4:	d002      	beq.n	8007afc <__sflush_r+0x8c>
 8007af6:	4628      	mov	r0, r5
 8007af8:	f7ff fbec 	bl	80072d4 <_free_r>
 8007afc:	2300      	movs	r3, #0
 8007afe:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b00:	e00d      	b.n	8007b1e <__sflush_r+0xae>
 8007b02:	2301      	movs	r3, #1
 8007b04:	4628      	mov	r0, r5
 8007b06:	47b0      	blx	r6
 8007b08:	4602      	mov	r2, r0
 8007b0a:	1c50      	adds	r0, r2, #1
 8007b0c:	d1c9      	bne.n	8007aa2 <__sflush_r+0x32>
 8007b0e:	682b      	ldr	r3, [r5, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d0c6      	beq.n	8007aa2 <__sflush_r+0x32>
 8007b14:	2b1d      	cmp	r3, #29
 8007b16:	d001      	beq.n	8007b1c <__sflush_r+0xac>
 8007b18:	2b16      	cmp	r3, #22
 8007b1a:	d11e      	bne.n	8007b5a <__sflush_r+0xea>
 8007b1c:	602f      	str	r7, [r5, #0]
 8007b1e:	2000      	movs	r0, #0
 8007b20:	e022      	b.n	8007b68 <__sflush_r+0xf8>
 8007b22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b26:	b21b      	sxth	r3, r3
 8007b28:	e01b      	b.n	8007b62 <__sflush_r+0xf2>
 8007b2a:	690f      	ldr	r7, [r1, #16]
 8007b2c:	2f00      	cmp	r7, #0
 8007b2e:	d0f6      	beq.n	8007b1e <__sflush_r+0xae>
 8007b30:	0793      	lsls	r3, r2, #30
 8007b32:	680e      	ldr	r6, [r1, #0]
 8007b34:	bf08      	it	eq
 8007b36:	694b      	ldreq	r3, [r1, #20]
 8007b38:	600f      	str	r7, [r1, #0]
 8007b3a:	bf18      	it	ne
 8007b3c:	2300      	movne	r3, #0
 8007b3e:	eba6 0807 	sub.w	r8, r6, r7
 8007b42:	608b      	str	r3, [r1, #8]
 8007b44:	f1b8 0f00 	cmp.w	r8, #0
 8007b48:	dde9      	ble.n	8007b1e <__sflush_r+0xae>
 8007b4a:	6a21      	ldr	r1, [r4, #32]
 8007b4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b4e:	4643      	mov	r3, r8
 8007b50:	463a      	mov	r2, r7
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b0      	blx	r6
 8007b56:	2800      	cmp	r0, #0
 8007b58:	dc08      	bgt.n	8007b6c <__sflush_r+0xfc>
 8007b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b62:	81a3      	strh	r3, [r4, #12]
 8007b64:	f04f 30ff 	mov.w	r0, #4294967295
 8007b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b6c:	4407      	add	r7, r0
 8007b6e:	eba8 0800 	sub.w	r8, r8, r0
 8007b72:	e7e7      	b.n	8007b44 <__sflush_r+0xd4>
 8007b74:	20400001 	.word	0x20400001

08007b78 <_fflush_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	690b      	ldr	r3, [r1, #16]
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	460c      	mov	r4, r1
 8007b80:	b913      	cbnz	r3, 8007b88 <_fflush_r+0x10>
 8007b82:	2500      	movs	r5, #0
 8007b84:	4628      	mov	r0, r5
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	b118      	cbz	r0, 8007b92 <_fflush_r+0x1a>
 8007b8a:	6a03      	ldr	r3, [r0, #32]
 8007b8c:	b90b      	cbnz	r3, 8007b92 <_fflush_r+0x1a>
 8007b8e:	f7ff f98b 	bl	8006ea8 <__sinit>
 8007b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0f3      	beq.n	8007b82 <_fflush_r+0xa>
 8007b9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b9c:	07d0      	lsls	r0, r2, #31
 8007b9e:	d404      	bmi.n	8007baa <_fflush_r+0x32>
 8007ba0:	0599      	lsls	r1, r3, #22
 8007ba2:	d402      	bmi.n	8007baa <_fflush_r+0x32>
 8007ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ba6:	f7ff fb74 	bl	8007292 <__retarget_lock_acquire_recursive>
 8007baa:	4628      	mov	r0, r5
 8007bac:	4621      	mov	r1, r4
 8007bae:	f7ff ff5f 	bl	8007a70 <__sflush_r>
 8007bb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bb4:	07da      	lsls	r2, r3, #31
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	d4e4      	bmi.n	8007b84 <_fflush_r+0xc>
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	059b      	lsls	r3, r3, #22
 8007bbe:	d4e1      	bmi.n	8007b84 <_fflush_r+0xc>
 8007bc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bc2:	f7ff fb67 	bl	8007294 <__retarget_lock_release_recursive>
 8007bc6:	e7dd      	b.n	8007b84 <_fflush_r+0xc>

08007bc8 <fiprintf>:
 8007bc8:	b40e      	push	{r1, r2, r3}
 8007bca:	b503      	push	{r0, r1, lr}
 8007bcc:	4601      	mov	r1, r0
 8007bce:	ab03      	add	r3, sp, #12
 8007bd0:	4805      	ldr	r0, [pc, #20]	@ (8007be8 <fiprintf+0x20>)
 8007bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bd6:	6800      	ldr	r0, [r0, #0]
 8007bd8:	9301      	str	r3, [sp, #4]
 8007bda:	f7ff fca5 	bl	8007528 <_vfiprintf_r>
 8007bde:	b002      	add	sp, #8
 8007be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007be4:	b003      	add	sp, #12
 8007be6:	4770      	bx	lr
 8007be8:	20000020 	.word	0x20000020

08007bec <__swhatbuf_r>:
 8007bec:	b570      	push	{r4, r5, r6, lr}
 8007bee:	460c      	mov	r4, r1
 8007bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf4:	2900      	cmp	r1, #0
 8007bf6:	b096      	sub	sp, #88	@ 0x58
 8007bf8:	4615      	mov	r5, r2
 8007bfa:	461e      	mov	r6, r3
 8007bfc:	da0d      	bge.n	8007c1a <__swhatbuf_r+0x2e>
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007c04:	f04f 0100 	mov.w	r1, #0
 8007c08:	bf14      	ite	ne
 8007c0a:	2340      	movne	r3, #64	@ 0x40
 8007c0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c10:	2000      	movs	r0, #0
 8007c12:	6031      	str	r1, [r6, #0]
 8007c14:	602b      	str	r3, [r5, #0]
 8007c16:	b016      	add	sp, #88	@ 0x58
 8007c18:	bd70      	pop	{r4, r5, r6, pc}
 8007c1a:	466a      	mov	r2, sp
 8007c1c:	f000 f848 	bl	8007cb0 <_fstat_r>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	dbec      	blt.n	8007bfe <__swhatbuf_r+0x12>
 8007c24:	9901      	ldr	r1, [sp, #4]
 8007c26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c2e:	4259      	negs	r1, r3
 8007c30:	4159      	adcs	r1, r3
 8007c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c36:	e7eb      	b.n	8007c10 <__swhatbuf_r+0x24>

08007c38 <__smakebuf_r>:
 8007c38:	898b      	ldrh	r3, [r1, #12]
 8007c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c3c:	079d      	lsls	r5, r3, #30
 8007c3e:	4606      	mov	r6, r0
 8007c40:	460c      	mov	r4, r1
 8007c42:	d507      	bpl.n	8007c54 <__smakebuf_r+0x1c>
 8007c44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	6123      	str	r3, [r4, #16]
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	6163      	str	r3, [r4, #20]
 8007c50:	b003      	add	sp, #12
 8007c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c54:	ab01      	add	r3, sp, #4
 8007c56:	466a      	mov	r2, sp
 8007c58:	f7ff ffc8 	bl	8007bec <__swhatbuf_r>
 8007c5c:	9f00      	ldr	r7, [sp, #0]
 8007c5e:	4605      	mov	r5, r0
 8007c60:	4639      	mov	r1, r7
 8007c62:	4630      	mov	r0, r6
 8007c64:	f7ff fbaa 	bl	80073bc <_malloc_r>
 8007c68:	b948      	cbnz	r0, 8007c7e <__smakebuf_r+0x46>
 8007c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c6e:	059a      	lsls	r2, r3, #22
 8007c70:	d4ee      	bmi.n	8007c50 <__smakebuf_r+0x18>
 8007c72:	f023 0303 	bic.w	r3, r3, #3
 8007c76:	f043 0302 	orr.w	r3, r3, #2
 8007c7a:	81a3      	strh	r3, [r4, #12]
 8007c7c:	e7e2      	b.n	8007c44 <__smakebuf_r+0xc>
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	6020      	str	r0, [r4, #0]
 8007c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c86:	81a3      	strh	r3, [r4, #12]
 8007c88:	9b01      	ldr	r3, [sp, #4]
 8007c8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c8e:	b15b      	cbz	r3, 8007ca8 <__smakebuf_r+0x70>
 8007c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c94:	4630      	mov	r0, r6
 8007c96:	f000 f81d 	bl	8007cd4 <_isatty_r>
 8007c9a:	b128      	cbz	r0, 8007ca8 <__smakebuf_r+0x70>
 8007c9c:	89a3      	ldrh	r3, [r4, #12]
 8007c9e:	f023 0303 	bic.w	r3, r3, #3
 8007ca2:	f043 0301 	orr.w	r3, r3, #1
 8007ca6:	81a3      	strh	r3, [r4, #12]
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	431d      	orrs	r5, r3
 8007cac:	81a5      	strh	r5, [r4, #12]
 8007cae:	e7cf      	b.n	8007c50 <__smakebuf_r+0x18>

08007cb0 <_fstat_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	4d07      	ldr	r5, [pc, #28]	@ (8007cd0 <_fstat_r+0x20>)
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	4608      	mov	r0, r1
 8007cba:	4611      	mov	r1, r2
 8007cbc:	602b      	str	r3, [r5, #0]
 8007cbe:	f7fa f9a9 	bl	8002014 <_fstat>
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	d102      	bne.n	8007ccc <_fstat_r+0x1c>
 8007cc6:	682b      	ldr	r3, [r5, #0]
 8007cc8:	b103      	cbz	r3, 8007ccc <_fstat_r+0x1c>
 8007cca:	6023      	str	r3, [r4, #0]
 8007ccc:	bd38      	pop	{r3, r4, r5, pc}
 8007cce:	bf00      	nop
 8007cd0:	200004b4 	.word	0x200004b4

08007cd4 <_isatty_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4d06      	ldr	r5, [pc, #24]	@ (8007cf0 <_isatty_r+0x1c>)
 8007cd8:	2300      	movs	r3, #0
 8007cda:	4604      	mov	r4, r0
 8007cdc:	4608      	mov	r0, r1
 8007cde:	602b      	str	r3, [r5, #0]
 8007ce0:	f7fa f9a8 	bl	8002034 <_isatty>
 8007ce4:	1c43      	adds	r3, r0, #1
 8007ce6:	d102      	bne.n	8007cee <_isatty_r+0x1a>
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	b103      	cbz	r3, 8007cee <_isatty_r+0x1a>
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	bd38      	pop	{r3, r4, r5, pc}
 8007cf0:	200004b4 	.word	0x200004b4

08007cf4 <_sbrk_r>:
 8007cf4:	b538      	push	{r3, r4, r5, lr}
 8007cf6:	4d06      	ldr	r5, [pc, #24]	@ (8007d10 <_sbrk_r+0x1c>)
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	602b      	str	r3, [r5, #0]
 8007d00:	f7fa f9b0 	bl	8002064 <_sbrk>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d102      	bne.n	8007d0e <_sbrk_r+0x1a>
 8007d08:	682b      	ldr	r3, [r5, #0]
 8007d0a:	b103      	cbz	r3, 8007d0e <_sbrk_r+0x1a>
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
 8007d10:	200004b4 	.word	0x200004b4

08007d14 <abort>:
 8007d14:	b508      	push	{r3, lr}
 8007d16:	2006      	movs	r0, #6
 8007d18:	f000 f82c 	bl	8007d74 <raise>
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	f7fa f929 	bl	8001f74 <_exit>

08007d22 <_raise_r>:
 8007d22:	291f      	cmp	r1, #31
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	4605      	mov	r5, r0
 8007d28:	460c      	mov	r4, r1
 8007d2a:	d904      	bls.n	8007d36 <_raise_r+0x14>
 8007d2c:	2316      	movs	r3, #22
 8007d2e:	6003      	str	r3, [r0, #0]
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295
 8007d34:	bd38      	pop	{r3, r4, r5, pc}
 8007d36:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007d38:	b112      	cbz	r2, 8007d40 <_raise_r+0x1e>
 8007d3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d3e:	b94b      	cbnz	r3, 8007d54 <_raise_r+0x32>
 8007d40:	4628      	mov	r0, r5
 8007d42:	f000 f831 	bl	8007da8 <_getpid_r>
 8007d46:	4622      	mov	r2, r4
 8007d48:	4601      	mov	r1, r0
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d50:	f000 b818 	b.w	8007d84 <_kill_r>
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d00a      	beq.n	8007d6e <_raise_r+0x4c>
 8007d58:	1c59      	adds	r1, r3, #1
 8007d5a:	d103      	bne.n	8007d64 <_raise_r+0x42>
 8007d5c:	2316      	movs	r3, #22
 8007d5e:	6003      	str	r3, [r0, #0]
 8007d60:	2001      	movs	r0, #1
 8007d62:	e7e7      	b.n	8007d34 <_raise_r+0x12>
 8007d64:	2100      	movs	r1, #0
 8007d66:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	4798      	blx	r3
 8007d6e:	2000      	movs	r0, #0
 8007d70:	e7e0      	b.n	8007d34 <_raise_r+0x12>
	...

08007d74 <raise>:
 8007d74:	4b02      	ldr	r3, [pc, #8]	@ (8007d80 <raise+0xc>)
 8007d76:	4601      	mov	r1, r0
 8007d78:	6818      	ldr	r0, [r3, #0]
 8007d7a:	f7ff bfd2 	b.w	8007d22 <_raise_r>
 8007d7e:	bf00      	nop
 8007d80:	20000020 	.word	0x20000020

08007d84 <_kill_r>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	4d07      	ldr	r5, [pc, #28]	@ (8007da4 <_kill_r+0x20>)
 8007d88:	2300      	movs	r3, #0
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	4608      	mov	r0, r1
 8007d8e:	4611      	mov	r1, r2
 8007d90:	602b      	str	r3, [r5, #0]
 8007d92:	f7fa f8df 	bl	8001f54 <_kill>
 8007d96:	1c43      	adds	r3, r0, #1
 8007d98:	d102      	bne.n	8007da0 <_kill_r+0x1c>
 8007d9a:	682b      	ldr	r3, [r5, #0]
 8007d9c:	b103      	cbz	r3, 8007da0 <_kill_r+0x1c>
 8007d9e:	6023      	str	r3, [r4, #0]
 8007da0:	bd38      	pop	{r3, r4, r5, pc}
 8007da2:	bf00      	nop
 8007da4:	200004b4 	.word	0x200004b4

08007da8 <_getpid_r>:
 8007da8:	f7fa b8cc 	b.w	8001f44 <_getpid>

08007dac <_init>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	bf00      	nop
 8007db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db2:	bc08      	pop	{r3}
 8007db4:	469e      	mov	lr, r3
 8007db6:	4770      	bx	lr

08007db8 <_fini>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	bf00      	nop
 8007dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dbe:	bc08      	pop	{r3}
 8007dc0:	469e      	mov	lr, r3
 8007dc2:	4770      	bx	lr
